
Modbus_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08006ce0  08006ce0  00007ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f8c  08006f8c  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  08006f8c  08006f8c  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f8c  08006f8c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f8c  08006f8c  00007f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f90  08006f90  00007f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006f94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042b4  20000060  08006ff4  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004314  08006ff4  00008314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184d5  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e9  00000000  00000000  0002055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00023d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa4  00000000  00000000  00025160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019884  00000000  00000000  00026104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d3a  00000000  00000000  0003f988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e45  00000000  00000000  000576c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb507  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005654  00000000  00000000  000eb54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f0ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006cc8 	.word	0x08006cc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006cc8 	.word	0x08006cc8

08000150 <HAL_UART_TxCpltCallback>:
//}



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000158:	2201      	movs	r2, #1
 800015a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800015e:	4803      	ldr	r0, [pc, #12]	@ (800016c <HAL_UART_TxCpltCallback+0x1c>)
 8000160:	f001 fcf0 	bl	8001b44 <HAL_GPIO_WritePin>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	40011000 	.word	0x40011000

08000170 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]

	/* Modbus RTU RX callback BEGIN */
    if (UartHandle->Instance == USART1){
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a1a      	ldr	r2, [pc, #104]	@ (80001ec <HAL_UART_RxCpltCallback+0x7c>)
 8000182:	4293      	cmp	r3, r2
 8000184:	d114      	bne.n	80001b0 <HAL_UART_RxCpltCallback+0x40>

		RingAdd(&ctx->Buffer, dataRX);
 8000186:	4b1a      	ldr	r3, [pc, #104]	@ (80001f0 <HAL_UART_RxCpltCallback+0x80>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	33fc      	adds	r3, #252	@ 0xfc
 800018c:	4a19      	ldr	r2, [pc, #100]	@ (80001f4 <HAL_UART_RxCpltCallback+0x84>)
 800018e:	7812      	ldrb	r2, [r2, #0]
 8000190:	4611      	mov	r1, r2
 8000192:	4618      	mov	r0, r3
 8000194:	f000 fa2c 	bl	80005f0 <RingAdd>
		HAL_UART_Receive_IT(&huart1, &dataRX, 1);
 8000198:	2201      	movs	r2, #1
 800019a:	4916      	ldr	r1, [pc, #88]	@ (80001f4 <HAL_UART_RxCpltCallback+0x84>)
 800019c:	4816      	ldr	r0, [pc, #88]	@ (80001f8 <HAL_UART_RxCpltCallback+0x88>)
 800019e:	f002 fbc3 	bl	8002928 <HAL_UART_Receive_IT>
		osSemaphoreRelease(ctx->mSem);
 80001a2:	4b13      	ldr	r3, [pc, #76]	@ (80001f0 <HAL_UART_RxCpltCallback+0x80>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80001aa:	4618      	mov	r0, r3
 80001ac:	f003 fc44 	bl	8003a38 <osSemaphoreRelease>
    }
    if (UartHandle->Instance == USART2){
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a11      	ldr	r2, [pc, #68]	@ (80001fc <HAL_UART_RxCpltCallback+0x8c>)
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d114      	bne.n	80001e4 <HAL_UART_RxCpltCallback+0x74>

		RingAdd(&ctx2->Buffer, dataRX2);
 80001ba:	4b11      	ldr	r3, [pc, #68]	@ (8000200 <HAL_UART_RxCpltCallback+0x90>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	33fc      	adds	r3, #252	@ 0xfc
 80001c0:	4a10      	ldr	r2, [pc, #64]	@ (8000204 <HAL_UART_RxCpltCallback+0x94>)
 80001c2:	7812      	ldrb	r2, [r2, #0]
 80001c4:	4611      	mov	r1, r2
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 fa12 	bl	80005f0 <RingAdd>
		HAL_UART_Receive_IT(&huart2, &dataRX2, 1);
 80001cc:	2201      	movs	r2, #1
 80001ce:	490d      	ldr	r1, [pc, #52]	@ (8000204 <HAL_UART_RxCpltCallback+0x94>)
 80001d0:	480d      	ldr	r0, [pc, #52]	@ (8000208 <HAL_UART_RxCpltCallback+0x98>)
 80001d2:	f002 fba9 	bl	8002928 <HAL_UART_Receive_IT>
		osSemaphoreRelease(ctx2->mSem);
 80001d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000200 <HAL_UART_RxCpltCallback+0x90>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80001de:	4618      	mov	r0, r3
 80001e0:	f003 fc2a 	bl	8003a38 <osSemaphoreRelease>
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 80001e4:	bf00      	nop
 80001e6:	3710      	adds	r7, #16
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40013800 	.word	0x40013800
 80001f0:	2000019c 	.word	0x2000019c
 80001f4:	200001a4 	.word	0x200001a4
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	40004400 	.word	0x40004400
 8000200:	200001a0 	.word	0x200001a0
 8000204:	200001a5 	.word	0x200001a5
 8000208:	200000c4 	.word	0x200000c4

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000210:	f000 ff60 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000214:	f000 f82a 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000218:	f000 f8e8 	bl	80003ec <MX_GPIO_Init>
  MX_DMA_Init();
 800021c:	f000 f8c0 	bl	80003a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000220:	f000 f86a 	bl	80002f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000224:	f000 f892 	bl	800034c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000228:	f003 f9f2 	bl	8003610 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ModbusTask */
  ModbusTaskHandle = osThreadNew(StartModbusTask, NULL, &ModbusTask_attributes);
 800022c:	4a09      	ldr	r2, [pc, #36]	@ (8000254 <main+0x48>)
 800022e:	2100      	movs	r1, #0
 8000230:	4809      	ldr	r0, [pc, #36]	@ (8000258 <main+0x4c>)
 8000232:	f003 fa53 	bl	80036dc <osThreadNew>
 8000236:	4603      	mov	r3, r0
 8000238:	4a08      	ldr	r2, [pc, #32]	@ (800025c <main+0x50>)
 800023a:	6013      	str	r3, [r2, #0]

  /* creation of ModbusTask2 */
  ModbusTask2Handle = osThreadNew(StartModbusTask2, NULL, &ModbusTask2_attributes);
 800023c:	4a08      	ldr	r2, [pc, #32]	@ (8000260 <main+0x54>)
 800023e:	2100      	movs	r1, #0
 8000240:	4808      	ldr	r0, [pc, #32]	@ (8000264 <main+0x58>)
 8000242:	f003 fa4b 	bl	80036dc <osThreadNew>
 8000246:	4603      	mov	r3, r0
 8000248:	4a07      	ldr	r2, [pc, #28]	@ (8000268 <main+0x5c>)
 800024a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800024c:	f003 fa12 	bl	8003674 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000250:	bf00      	nop
 8000252:	e7fd      	b.n	8000250 <main+0x44>
 8000254:	08006d18 	.word	0x08006d18
 8000258:	0800049d 	.word	0x0800049d
 800025c:	20000194 	.word	0x20000194
 8000260:	08006d3c 	.word	0x08006d3c
 8000264:	08000539 	.word	0x08000539
 8000268:	20000198 	.word	0x20000198

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b090      	sub	sp, #64	@ 0x40
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2228      	movs	r2, #40	@ 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f006 fc3e 	bl	8006afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028e:	2301      	movs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000296:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	2301      	movs	r3, #1
 800029e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a0:	2302      	movs	r3, #2
 80002a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002aa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0318 	add.w	r3, r7, #24
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 fc5d 	bl	8001b74 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c0:	f000 f990 	bl	80005e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2302      	movs	r3, #2
 80002ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2102      	movs	r1, #2
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 feca 	bl	8002078 <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ea:	f000 f97b 	bl	80005e4 <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3740      	adds	r7, #64	@ 0x40
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002fc:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	@ (8000348 <MX_USART1_UART_Init+0x50>)
 8000300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000302:	4b10      	ldr	r3, [pc, #64]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000304:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000330:	f002 faaa 	bl	8002888 <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800033a:	f000 f953 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	2000007c 	.word	0x2000007c
 8000348:	40013800 	.word	0x40013800

0800034c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000350:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_USART2_UART_Init+0x4c>)
 8000352:	4a12      	ldr	r2, [pc, #72]	@ (800039c <MX_USART2_UART_Init+0x50>)
 8000354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000356:	4b10      	ldr	r3, [pc, #64]	@ (8000398 <MX_USART2_UART_Init+0x4c>)
 8000358:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800035c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035e:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <MX_USART2_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000364:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <MX_USART2_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <MX_USART2_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000370:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <MX_USART2_UART_Init+0x4c>)
 8000372:	220c      	movs	r2, #12
 8000374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000376:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <MX_USART2_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <MX_USART2_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000382:	4805      	ldr	r0, [pc, #20]	@ (8000398 <MX_USART2_UART_Init+0x4c>)
 8000384:	f002 fa80 	bl	8002888 <HAL_UART_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800038e:	f000 f929 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000c4 	.word	0x200000c4
 800039c:	40004400 	.word	0x40004400

080003a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003a6:	4b10      	ldr	r3, [pc, #64]	@ (80003e8 <MX_DMA_Init+0x48>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a0f      	ldr	r2, [pc, #60]	@ (80003e8 <MX_DMA_Init+0x48>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b0d      	ldr	r3, [pc, #52]	@ (80003e8 <MX_DMA_Init+0x48>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2105      	movs	r1, #5
 80003c2:	200e      	movs	r0, #14
 80003c4:	f000 ff6d 	bl	80012a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003c8:	200e      	movs	r0, #14
 80003ca:	f000 ff86 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2105      	movs	r1, #5
 80003d2:	2011      	movs	r0, #17
 80003d4:	f000 ff65 	bl	80012a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003d8:	2011      	movs	r0, #17
 80003da:	f000 ff7e 	bl	80012da <HAL_NVIC_EnableIRQ>

}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000400:	4b24      	ldr	r3, [pc, #144]	@ (8000494 <MX_GPIO_Init+0xa8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a23      	ldr	r2, [pc, #140]	@ (8000494 <MX_GPIO_Init+0xa8>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <MX_GPIO_Init+0xa8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0310 	and.w	r3, r3, #16
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <MX_GPIO_Init+0xa8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a1d      	ldr	r2, [pc, #116]	@ (8000494 <MX_GPIO_Init+0xa8>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <MX_GPIO_Init+0xa8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0320 	and.w	r3, r3, #32
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <MX_GPIO_Init+0xa8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a17      	ldr	r2, [pc, #92]	@ (8000494 <MX_GPIO_Init+0xa8>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <MX_GPIO_Init+0xa8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <MX_GPIO_Init+0xa8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <MX_GPIO_Init+0xa8>)
 800044e:	f043 0308 	orr.w	r3, r3, #8
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_GPIO_Init+0xa8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0308 	and.w	r3, r3, #8
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000466:	480c      	ldr	r0, [pc, #48]	@ (8000498 <MX_GPIO_Init+0xac>)
 8000468:	f001 fb6c 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800046c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000472:	2301      	movs	r3, #1
 8000474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800047a:	2303      	movs	r3, #3
 800047c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4619      	mov	r1, r3
 8000484:	4804      	ldr	r0, [pc, #16]	@ (8000498 <MX_GPIO_Init+0xac>)
 8000486:	f001 f9d9 	bl	800183c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800048a:	bf00      	nop
 800048c:	3720      	adds	r7, #32
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	40011000 	.word	0x40011000

0800049c <StartModbusTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartModbusTask */
void StartModbusTask(void *argument)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b0b3      	sub	sp, #204	@ 0xcc
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t req[180];
	int rc;
	ctx = NULL;
 80004a4:	4b20      	ldr	r3, [pc, #128]	@ (8000528 <StartModbusTask+0x8c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
	ctx = pvPortMalloc(sizeof(ctx));
 80004aa:	2004      	movs	r0, #4
 80004ac:	f006 f948 	bl	8006740 <pvPortMalloc>
 80004b0:	4603      	mov	r3, r0
 80004b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000528 <StartModbusTask+0x8c>)
 80004b4:	6013      	str	r3, [r2, #0]
	ctx->mSem = osSemaphoreNew(1, 0, NULL);
 80004b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000528 <StartModbusTask+0x8c>)
 80004b8:	681c      	ldr	r4, [r3, #0]
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	2001      	movs	r0, #1
 80004c0:	f003 f9b8 	bl	8003834 <osSemaphoreNew>
 80004c4:	4603      	mov	r3, r0
 80004c6:	f8c4 3200 	str.w	r3, [r4, #512]	@ 0x200
	ctx->response_timeout = 200;
 80004ca:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <StartModbusTask+0x8c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	22c8      	movs	r2, #200	@ 0xc8
 80004d0:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	ctx->slaveID = 2;
 80004d4:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <StartModbusTask+0x8c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2202      	movs	r2, #2
 80004da:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &dataRX, 1);
 80004dc:	2201      	movs	r2, #1
 80004de:	4913      	ldr	r1, [pc, #76]	@ (800052c <StartModbusTask+0x90>)
 80004e0:	4813      	ldr	r0, [pc, #76]	@ (8000530 <StartModbusTask+0x94>)
 80004e2:	f002 fa21 	bl	8002928 <HAL_UART_Receive_IT>
	//memset(ctx->Holding_Regs,0,MAX_ADRESS*2);

	ctx->mbUart = &huart1;
 80004e6:	4b10      	ldr	r3, [pc, #64]	@ (8000528 <StartModbusTask+0x8c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a11      	ldr	r2, [pc, #68]	@ (8000530 <StartModbusTask+0x94>)
 80004ec:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
//	for (int i=0;i<=32;i++)
//	{
//		ctx->Holding_Regs[i] = 0;
//	}
	ctx->Holding_Regs[0] = 0x55AA;
 80004f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000528 <StartModbusTask+0x8c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f245 52aa 	movw	r2, #21930	@ 0x55aa
 80004f8:	809a      	strh	r2, [r3, #4]
	// Создаем структуру модбас регистров
	uint8_t dat[5] = {1,2,3,4,5};
 80004fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000534 <StartModbusTask+0x98>)
 80004fc:	f107 0308 	add.w	r3, r7, #8
 8000500:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000504:	6018      	str	r0, [r3, #0]
 8000506:	3304      	adds	r3, #4
 8000508:	7019      	strb	r1, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	rc = Modbus_Recieve(ctx);
 800050a:	4b07      	ldr	r3, [pc, #28]	@ (8000528 <StartModbusTask+0x8c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fabd 	bl	8000a8e <Modbus_Recieve>
 8000514:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
	ctx->Holding_Regs[1]++;
 8000518:	4b03      	ldr	r3, [pc, #12]	@ (8000528 <StartModbusTask+0x8c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	88da      	ldrh	r2, [r3, #6]
 800051e:	3201      	adds	r2, #1
 8000520:	b292      	uxth	r2, r2
 8000522:	80da      	strh	r2, [r3, #6]
	rc = Modbus_Recieve(ctx);
 8000524:	bf00      	nop
 8000526:	e7f0      	b.n	800050a <StartModbusTask+0x6e>
 8000528:	2000019c 	.word	0x2000019c
 800052c:	200001a4 	.word	0x200001a4
 8000530:	2000007c 	.word	0x2000007c
 8000534:	08006cf8 	.word	0x08006cf8

08000538 <StartModbusTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartModbusTask2 */
void StartModbusTask2(void *argument)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartModbusTask2 */
	int rc;
	ctx2 = NULL;
 8000540:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <StartModbusTask2+0x7c>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
	ctx2 = pvPortMalloc(sizeof(ctx2));
 8000546:	2004      	movs	r0, #4
 8000548:	f006 f8fa 	bl	8006740 <pvPortMalloc>
 800054c:	4603      	mov	r3, r0
 800054e:	4a19      	ldr	r2, [pc, #100]	@ (80005b4 <StartModbusTask2+0x7c>)
 8000550:	6013      	str	r3, [r2, #0]
	ctx2->mSem = osSemaphoreNew(1, 0, NULL);
 8000552:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <StartModbusTask2+0x7c>)
 8000554:	681c      	ldr	r4, [r3, #0]
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	2001      	movs	r0, #1
 800055c:	f003 f96a 	bl	8003834 <osSemaphoreNew>
 8000560:	4603      	mov	r3, r0
 8000562:	f8c4 3200 	str.w	r3, [r4, #512]	@ 0x200
	ctx2->response_timeout = 200;
 8000566:	4b13      	ldr	r3, [pc, #76]	@ (80005b4 <StartModbusTask2+0x7c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	22c8      	movs	r2, #200	@ 0xc8
 800056c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	ctx2->slaveID = 3;
 8000570:	4b10      	ldr	r3, [pc, #64]	@ (80005b4 <StartModbusTask2+0x7c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2203      	movs	r2, #3
 8000576:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &dataRX2, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	490f      	ldr	r1, [pc, #60]	@ (80005b8 <StartModbusTask2+0x80>)
 800057c:	480f      	ldr	r0, [pc, #60]	@ (80005bc <StartModbusTask2+0x84>)
 800057e:	f002 f9d3 	bl	8002928 <HAL_UART_Receive_IT>
	ctx2->mbUart = &huart2;
 8000582:	4b0c      	ldr	r3, [pc, #48]	@ (80005b4 <StartModbusTask2+0x7c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a0d      	ldr	r2, [pc, #52]	@ (80005bc <StartModbusTask2+0x84>)
 8000588:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
	ctx2->Holding_Regs[0] = 0x3344;
 800058c:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <StartModbusTask2+0x7c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f243 3244 	movw	r2, #13124	@ 0x3344
 8000594:	809a      	strh	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
	  rc = Modbus_Recieve(ctx2);
 8000596:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <StartModbusTask2+0x7c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fa77 	bl	8000a8e <Modbus_Recieve>
 80005a0:	60f8      	str	r0, [r7, #12]
	  ctx2->Holding_Regs[2]++;
 80005a2:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <StartModbusTask2+0x7c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	891a      	ldrh	r2, [r3, #8]
 80005a8:	3201      	adds	r2, #1
 80005aa:	b292      	uxth	r2, r2
 80005ac:	811a      	strh	r2, [r3, #8]
	  rc = Modbus_Recieve(ctx2);
 80005ae:	bf00      	nop
 80005b0:	e7f1      	b.n	8000596 <StartModbusTask2+0x5e>
 80005b2:	bf00      	nop
 80005b4:	200001a0 	.word	0x200001a0
 80005b8:	200001a5 	.word	0x200001a5
 80005bc:	200000c4 	.word	0x200000c4

080005c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d101      	bne.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005d2:	f000 fd95 	bl	8001100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40000800 	.word	0x40000800

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
}
 80005ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <Error_Handler+0x8>

080005f0 <RingAdd>:
#include "main.h"
#include "modbus.h"
#include "modbus_crc.h"

void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8000602:	4619      	mov	r1, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	78fa      	ldrb	r2, [r7, #3]
 8000608:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8000610:	3301      	adds	r3, #1
 8000612:	425a      	negs	r2, r3
 8000614:	b2db      	uxtb	r3, r3
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	bf58      	it	pl
 800061a:	4253      	negpl	r3, r2
 800061c:	b2da      	uxtb	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
		xRingBuffer->overflow = true;
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
	}
	else
	{
		xRingBuffer->overflow = false;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
		xRingBuffer->u8available++;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8000632:	3301      	adds	r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
	}

}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <RingGetNBytes>:
{
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
}

uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b086      	sub	sp, #24
 800064a:	af00      	add	r7, sp, #0
 800064c:	60f8      	str	r0, [r7, #12]
 800064e:	60b9      	str	r1, [r7, #8]
 8000650:	4613      	mov	r3, r2
 8000652:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <RingGetNBytes+0x1e>
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <RingGetNBytes+0x22>
 8000664:	2300      	movs	r3, #0
 8000666:	e037      	b.n	80006d8 <RingGetNBytes+0x92>
	if(uNumber > MAX_BUFFER) return 0;

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000668:	2300      	movs	r3, #0
 800066a:	75fb      	strb	r3, [r7, #23]
 800066c:	e019      	b.n	80006a2 <RingGetNBytes+0x5c>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8000674:	4619      	mov	r1, r3
 8000676:	7dfb      	ldrb	r3, [r7, #23]
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	4413      	add	r3, r2
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	5c52      	ldrb	r2, [r2, r1]
 8000680:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8000688:	3301      	adds	r3, #1
 800068a:	425a      	negs	r2, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	bf58      	it	pl
 8000692:	4253      	negpl	r3, r2
 8000694:	b2da      	uxtb	r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	3301      	adds	r3, #1
 80006a0:	75fb      	strb	r3, [r7, #23]
 80006a2:	7dfa      	ldrb	r2, [r7, #23]
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d205      	bcs.n	80006b6 <RingGetNBytes+0x70>
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80006b0:	7dfa      	ldrb	r2, [r7, #23]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d3db      	bcc.n	800066e <RingGetNBytes+0x28>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
	xRingBuffer->overflow = false;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
	RingClear(xRingBuffer);
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f000 f811 	bl	80006f8 <RingClear>

	return uCounter;
 80006d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <RingCountBytes>:

uint8_t RingCountBytes(modbusRingBuffer_t *xRingBuffer)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
return xRingBuffer->u8available;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <RingClear>:

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
xRingBuffer->u8end = 0;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
xRingBuffer->u8available = 0;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
xRingBuffer->overflow = false;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <WaitBytes>:
uint8_t WaitBytes(modbus *Handler,uint8_t ByteCount)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b084      	sub	sp, #16
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	460b      	mov	r3, r1
 8000734:	70fb      	strb	r3, [r7, #3]
	osStatus_t stat;
	while (RingCountBytes(&Handler->Buffer)<ByteCount)
 8000736:	e014      	b.n	8000762 <WaitBytes+0x38>
	{
		stat = osSemaphoreAcquire(Handler->mSem, Handler->response_timeout);//ждем пока придет нужное количество байт
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8000744:	4619      	mov	r1, r3
 8000746:	4610      	mov	r0, r2
 8000748:	f003 f910 	bl	800396c <osSemaphoreAcquire>
 800074c:	60f8      	str	r0, [r7, #12]
		if (stat != osOK)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d006      	beq.n	8000762 <WaitBytes+0x38>
		 {
			RingClear(&Handler->Buffer);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	33fc      	adds	r3, #252	@ 0xfc
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ffcd 	bl	80006f8 <RingClear>
			return 0;
 800075e:	2300      	movs	r3, #0
 8000760:	e00a      	b.n	8000778 <WaitBytes+0x4e>
	while (RingCountBytes(&Handler->Buffer)<ByteCount)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	33fc      	adds	r3, #252	@ 0xfc
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ffba 	bl	80006e0 <RingCountBytes>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	4293      	cmp	r3, r2
 8000774:	d8e0      	bhi.n	8000738 <WaitBytes+0xe>
		 }
	}
	return 1;
 8000776:	2301      	movs	r3, #1
}
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <BuildResponse>:
uint8_t BuildResponse(modbus *Handler,uint8_t cmd)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	//uint16_t crc;

	switch (cmd)
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	2b03      	cmp	r3, #3
 8000790:	f200 813d 	bhi.w	8000a0e <BuildResponse+0x28e>
 8000794:	a201      	add	r2, pc, #4	@ (adr r2, 800079c <BuildResponse+0x1c>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	0800089d 	.word	0x0800089d
 80007a4:	0800093b 	.word	0x0800093b
 80007a8:	080009a5 	.word	0x080009a5
	{
	case MODBUS_HOLDING:
		Handler->ResponseBuffer[0] = Handler->slaveID;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	781a      	ldrb	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		Handler->ResponseBuffer[1] = 0x03;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2203      	movs	r2, #3
 80007ba:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		Handler->ResponseBuffer[2] = Handler->regcount*2;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	789b      	ldrb	r3, [r3, #2]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		int j=3;
 80007cc:	2303      	movs	r3, #3
 80007ce:	60fb      	str	r3, [r7, #12]
		for (int i =0;i<Handler->regcount;i++)			//переворачиваем байты, чтобы на мастере было удобно
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	e020      	b.n	8000818 <BuildResponse+0x98>
		{
			Handler->ResponseBuffer[j++] = Handler->Holding_Regs[i]>>8;
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	889b      	ldrh	r3, [r3, #4]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	b299      	uxth	r1, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	60fa      	str	r2, [r7, #12]
 80007ea:	b2c9      	uxtb	r1, r1
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	460a      	mov	r2, r1
 80007f2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			Handler->ResponseBuffer[j++] = Handler->Holding_Regs[i];
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	8899      	ldrh	r1, [r3, #4]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	60fa      	str	r2, [r7, #12]
 8000806:	b2c9      	uxtb	r1, r1
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	460a      	mov	r2, r1
 800080e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		for (int i =0;i<Handler->regcount;i++)			//переворачиваем байты, чтобы на мастере было удобно
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	3301      	adds	r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	461a      	mov	r2, r3
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	4293      	cmp	r3, r2
 8000822:	dbd8      	blt.n	80007d6 <BuildResponse+0x56>

		}
		//memcpy(Handler->ResponseBuffer+3,&Handler->Holding_Regs+Handler->offset,Handler->regcount*2);
		Handler->crc = crc16(Handler->ResponseBuffer,(Handler->regcount*2)+3);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	789b      	ldrb	r3, [r3, #2]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	b29b      	uxth	r3, r3
 8000832:	3303      	adds	r3, #3
 8000834:	b29b      	uxth	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	4610      	mov	r0, r2
 800083a:	f000 f9fd 	bl	8000c38 <crc16>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
		Handler->ResponseBuffer[(Handler->regcount*2)+3] = ((uint8_t*)&Handler->crc)[1];
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	33f4      	adds	r3, #244	@ 0xf4
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	789b      	ldrb	r3, [r3, #2]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	3303      	adds	r3, #3
 8000856:	7811      	ldrb	r1, [r2, #0]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	4413      	add	r3, r2
 800085c:	460a      	mov	r2, r1
 800085e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		Handler->ResponseBuffer[(Handler->regcount*2)+4] = ((uint8_t*)&Handler->crc)[0];
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	789b      	ldrb	r3, [r3, #2]
 800086c:	3302      	adds	r3, #2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	7811      	ldrb	r1, [r2, #0]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	460a      	mov	r2, r1
 8000878:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		HAL_UART_Transmit_DMA(Handler->mbUart, Handler->ResponseBuffer, (Handler->regcount*2+5));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f8d3 0304 	ldr.w	r0, [r3, #772]	@ 0x304
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f503 7101 	add.w	r1, r3, #516	@ 0x204
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	789b      	ldrb	r3, [r3, #2]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	b29b      	uxth	r3, r3
 8000890:	3305      	adds	r3, #5
 8000892:	b29b      	uxth	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	f002 f86d 	bl	8002974 <HAL_UART_Transmit_DMA>
		break;
 800089a:	e0b8      	b.n	8000a0e <BuildResponse+0x28e>
	case MODBUS_WRITE_HOLDING:
		Handler->ResponseBuffer[0] = Handler->slaveID;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		Handler->ResponseBuffer[1] = 0x06;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2206      	movs	r2, #6
 80008aa:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		Handler->ResponseBuffer[2] = Handler->offset>>8;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	78db      	ldrb	r3, [r3, #3]
 80008b2:	121b      	asrs	r3, r3, #8
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		Handler->ResponseBuffer[3] = Handler->offset;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	78da      	ldrb	r2, [r3, #3]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
		Handler->ResponseBuffer[4] = Handler->Holding_Regs[Handler->offset]>>8;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	78db      	ldrb	r3, [r3, #3]
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	4413      	add	r3, r2
 80008d0:	889b      	ldrh	r3, [r3, #4]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		Handler->ResponseBuffer[5] = Handler->Holding_Regs[Handler->offset];
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	78db      	ldrb	r3, [r3, #3]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	889b      	ldrh	r3, [r3, #4]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
		Handler->crc = crc16(Handler->ResponseBuffer,6);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80008f8:	2106      	movs	r1, #6
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f99c 	bl	8000c38 <crc16>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
		Handler->ResponseBuffer[6] = ((uint8_t*)&Handler->crc)[1];
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	33f4      	adds	r3, #244	@ 0xf4
 800090e:	3301      	adds	r3, #1
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
		Handler->ResponseBuffer[7] = ((uint8_t*)&Handler->crc)[0];
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	33f4      	adds	r3, #244	@ 0xf4
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f883 220b 	strb.w	r2, [r3, #523]	@ 0x20b
		HAL_UART_Transmit_DMA(Handler->mbUart, Handler->ResponseBuffer, 8);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f8d3 0304 	ldr.w	r0, [r3, #772]	@ 0x304
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000930:	2208      	movs	r2, #8
 8000932:	4619      	mov	r1, r3
 8000934:	f002 f81e 	bl	8002974 <HAL_UART_Transmit_DMA>
		break;
 8000938:	e069      	b.n	8000a0e <BuildResponse+0x28e>
	case MODBUS_ERROR://illegal function
		Handler->ResponseBuffer[0] = Handler->slaveID;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		Handler->ResponseBuffer[1] = Handler->func|0x80;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	785b      	ldrb	r3, [r3, #1]
 8000948:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800094c:	b2da      	uxtb	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		Handler->ResponseBuffer[2] = 0x01;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2201      	movs	r2, #1
 8000958:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		Handler->crc = crc16(Handler->ResponseBuffer,3);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000962:	2103      	movs	r1, #3
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f967 	bl	8000c38 <crc16>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
		Handler->ResponseBuffer[3] = ((uint8_t*)&Handler->crc)[1];
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	33f4      	adds	r3, #244	@ 0xf4
 8000978:	3301      	adds	r3, #1
 800097a:	781a      	ldrb	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
		Handler->ResponseBuffer[4] = ((uint8_t*)&Handler->crc)[0];
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	33f4      	adds	r3, #244	@ 0xf4
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		HAL_UART_Transmit_DMA(Handler->mbUart, Handler->ResponseBuffer, 5);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f8d3 0304 	ldr.w	r0, [r3, #772]	@ 0x304
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800099a:	2205      	movs	r2, #5
 800099c:	4619      	mov	r1, r3
 800099e:	f001 ffe9 	bl	8002974 <HAL_UART_Transmit_DMA>
		break;
 80009a2:	e034      	b.n	8000a0e <BuildResponse+0x28e>
	case MODBUS_ERROR_ADRESS:	//illegal adress
		Handler->ResponseBuffer[0] = Handler->slaveID;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		Handler->ResponseBuffer[1] = Handler->func|0x80;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	785b      	ldrb	r3, [r3, #1]
 80009b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		Handler->ResponseBuffer[2] = 0x02;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2202      	movs	r2, #2
 80009c2:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		Handler->crc = crc16(Handler->ResponseBuffer,3);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80009cc:	2103      	movs	r1, #3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f932 	bl	8000c38 <crc16>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
		Handler->ResponseBuffer[3] = ((uint8_t*)&Handler->crc)[1];
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	33f4      	adds	r3, #244	@ 0xf4
 80009e2:	3301      	adds	r3, #1
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
		Handler->ResponseBuffer[4] = ((uint8_t*)&Handler->crc)[0];
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	33f4      	adds	r3, #244	@ 0xf4
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		HAL_UART_Transmit_DMA(Handler->mbUart, Handler->ResponseBuffer, 5);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f8d3 0304 	ldr.w	r0, [r3, #772]	@ 0x304
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000a04:	2205      	movs	r2, #5
 8000a06:	4619      	mov	r1, r3
 8000a08:	f001 ffb4 	bl	8002974 <HAL_UART_Transmit_DMA>
		break;
 8000a0c:	bf00      	nop
	}

	//HAL_UART_Transmit_DMA(&huart1, Handler->ResponseBuffer, (Handler->regcount*2+5));
}
 8000a0e:	bf00      	nop
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <Parse_Command>:
uint8_t Parse_Command (modbus *Handler,uint8_t *buf)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	 RingGetNBytes(&Handler->Buffer,buf+2,4);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f103 00fc 	add.w	r0, r3, #252	@ 0xfc
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f7ff fe09 	bl	8000646 <RingGetNBytes>
	Handler->offset = buf[3];
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	78da      	ldrb	r2, [r3, #3]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	70da      	strb	r2, [r3, #3]
	Handler->offset |= buf[2]<<8;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	78db      	ldrb	r3, [r3, #3]
 8000a40:	b25a      	sxtb	r2, r3
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	3302      	adds	r3, #2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	b25b      	sxtb	r3, r3
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	70da      	strb	r2, [r3, #3]
	Handler->regcount = buf[5];
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	795a      	ldrb	r2, [r3, #5]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	709a      	strb	r2, [r3, #2]
	Handler->regcount |= buf[4];
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	789a      	ldrb	r2, [r3, #2]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	3304      	adds	r3, #4
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	709a      	strb	r2, [r3, #2]
	if ((Handler->offset+Handler->regcount)>(START_ADRESS+MAX_ADRESS))
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	78db      	ldrb	r3, [r3, #3]
 8000a74:	461a      	mov	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	789b      	ldrb	r3, [r3, #2]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	2b20      	cmp	r3, #32
 8000a7e:	dd01      	ble.n	8000a84 <Parse_Command+0x6c>
		{
			return 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e000      	b.n	8000a86 <Parse_Command+0x6e>
		}
	return 1;
 8000a84:	2301      	movs	r3, #1
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <Modbus_Recieve>:
int32_t Modbus_Recieve (modbus *Handler)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	Handler->length_to_read = 2;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2202      	movs	r2, #2
 8000a9a:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
	if (!WaitBytes(Handler,Handler->length_to_read))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fe3e 	bl	800072a <WaitBytes>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d101      	bne.n	8000ab8 <Modbus_Recieve+0x2a>
	{
		return 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e0ba      	b.n	8000c2e <Modbus_Recieve+0x1a0>
	}
	RingGetNBytes(&Handler->Buffer,Handler->recv,2);	// начинаем обработку если пришло хотя бы 2 байта
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f103 00fc 	add.w	r0, r3, #252	@ 0xfc
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f7ff fdbd 	bl	8000646 <RingGetNBytes>
	if (Handler->recv[0] != Handler->slaveID)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f893 230c 	ldrb.w	r2, [r3, #780]	@ 0x30c
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d006      	beq.n	8000ae8 <Modbus_Recieve+0x5a>
		 {
			RingClear(&Handler->Buffer);	//не наш ID
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	33fc      	adds	r3, #252	@ 0xfc
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fe0a 	bl	80006f8 <RingClear>
			return MODBUS_ERROR;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	e0a2      	b.n	8000c2e <Modbus_Recieve+0x1a0>
		 }
	Handler->length_to_read += 2;					// если пришло для нас, читаем еоманду и параметры
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 8000aee:	1c9a      	adds	r2, r3, #2
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
	if (!WaitBytes(Handler,Handler->length_to_read))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4619      	mov	r1, r3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fe12 	bl	800072a <WaitBytes>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <Modbus_Recieve+0x82>
		{
			return MODBUS_ERROR;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e08e      	b.n	8000c2e <Modbus_Recieve+0x1a0>
		}
	if (!Parse_Command(Handler,Handler->recv))	// проверяем, что в запросе не превышен лимит регистров
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8000b16:	4619      	mov	r1, r3
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff7d 	bl	8000a18 <Parse_Command>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10a      	bne.n	8000b3a <Modbus_Recieve+0xac>
	{
		Handler->func = Handler->recv[1];
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 230d 	ldrb.w	r2, [r3, #781]	@ 0x30d
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	705a      	strb	r2, [r3, #1]
		BuildResponse(Handler,MODBUS_ERROR_ADRESS);
 8000b2e:	2103      	movs	r1, #3
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fe25 	bl	8000780 <BuildResponse>
		return MODBUS_ERROR_ADRESS;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e079      	b.n	8000c2e <Modbus_Recieve+0x1a0>
	}
	Handler->length_to_read = 2;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
	if (!WaitBytes(Handler,Handler->length_to_read))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fdec 	bl	800072a <WaitBytes>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <Modbus_Recieve+0xce>
		{
			return 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e068      	b.n	8000c2e <Modbus_Recieve+0x1a0>
		}
	RingGetNBytes(&Handler->Buffer,Handler->recv+6,Handler->length_to_read);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f103 00fc 	add.w	r0, r3, #252	@ 0xfc
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8000b68:	1d99      	adds	r1, r3, #6
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	f7ff fd67 	bl	8000646 <RingGetNBytes>
	Handler->crc=crc16(Handler->recv,6);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8000b7e:	2106      	movs	r1, #6
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 f859 	bl	8000c38 <crc16>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
	((uint8_t*)&Handler->Recv_crc)[1] = Handler->recv[6];
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f203 3322 	addw	r3, r3, #802	@ 0x322
 8000b96:	3301      	adds	r3, #1
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	f892 2312 	ldrb.w	r2, [r2, #786]	@ 0x312
 8000b9e:	701a      	strb	r2, [r3, #0]
	((uint8_t*)&Handler->Recv_crc)[0] = Handler->recv[7];
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f203 3322 	addw	r3, r3, #802	@ 0x322
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	f892 2313 	ldrb.w	r2, [r2, #787]	@ 0x313
 8000bac:	701a      	strb	r2, [r3, #0]
	if (Handler->crc != Handler->Recv_crc)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f8b3 3322 	ldrh.w	r3, [r3, #802]	@ 0x322
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d001      	beq.n	8000bc2 <Modbus_Recieve+0x134>
	{
		return 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e035      	b.n	8000c2e <Modbus_Recieve+0x1a0>
	}

	 switch (Handler->recv[1])
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f893 330d 	ldrb.w	r3, [r3, #781]	@ 0x30d
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d002      	beq.n	8000bd2 <Modbus_Recieve+0x144>
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	d005      	beq.n	8000bdc <Modbus_Recieve+0x14e>
 8000bd0:	e01e      	b.n	8000c10 <Modbus_Recieve+0x182>
	 {
		 case READ_HOLDING:
				BuildResponse(Handler,MODBUS_HOLDING);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fdd3 	bl	8000780 <BuildResponse>
			 break;
 8000bda:	e027      	b.n	8000c2c <Modbus_Recieve+0x19e>
		 case WRITE_HOLDING:
				((uint8_t*)& Handler->Holding_Regs[Handler->offset])[1] = Handler->recv[5];
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	78db      	ldrb	r3, [r3, #3]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	3304      	adds	r3, #4
 8000be8:	3301      	adds	r3, #1
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	f892 2311 	ldrb.w	r2, [r2, #785]	@ 0x311
 8000bf0:	701a      	strb	r2, [r3, #0]
				((uint8_t*)& Handler->Holding_Regs[Handler->offset])[0] = Handler->recv[4];
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	78db      	ldrb	r3, [r3, #3]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	f892 2310 	ldrb.w	r2, [r2, #784]	@ 0x310
 8000c04:	701a      	strb	r2, [r3, #0]
				BuildResponse(Handler,MODBUS_WRITE_HOLDING);
 8000c06:	2101      	movs	r1, #1
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fdb9 	bl	8000780 <BuildResponse>
			 break;
 8000c0e:	e00d      	b.n	8000c2c <Modbus_Recieve+0x19e>
		 default:									// если функция не поддерживается, возвращаем ошибку
			 	 Handler->func = Handler->recv[1];
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 230d 	ldrb.w	r2, [r3, #781]	@ 0x30d
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	705a      	strb	r2, [r3, #1]
				 BuildResponse(Handler,MODBUS_ERROR);
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fdaf 	bl	8000780 <BuildResponse>
				 Handler->error = MODBUS_ERROR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2202      	movs	r2, #2
 8000c26:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
			 break;
 8000c2a:	bf00      	nop
	 }


return 	MODBUS_OK;
 8000c2c:	2304      	movs	r3, #4
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <crc16>:
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};


uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000c44:	23ff      	movs	r3, #255	@ 0xff
 8000c46:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000c48:	23ff      	movs	r3, #255	@ 0xff
 8000c4a:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000c4c:	e013      	b.n	8000c76 <crc16+0x3e>
        i = crc_hi ^ *buffer++; /* calculate the CRC  */
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	781a      	ldrb	r2, [r3, #0]
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	4053      	eors	r3, r2
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	60bb      	str	r3, [r7, #8]
        crc_hi = crc_lo ^ table_crc_hi[i];
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c9c <crc16+0x64>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4413      	add	r3, r2
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	4053      	eors	r3, r2
 8000c6a:	73fb      	strb	r3, [r7, #15]
        crc_lo = table_crc_lo[i];
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca0 <crc16+0x68>)
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	73bb      	strb	r3, [r7, #14]
    while (buffer_length--) {
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	807a      	strh	r2, [r7, #2]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1e6      	bne.n	8000c4e <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	7bbb      	ldrb	r3, [r7, #14]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	b29b      	uxth	r3, r3
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	08006d60 	.word	0x08006d60
 8000ca0:	08006e60 	.word	0x08006e60

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <HAL_MspInit+0x68>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a17      	ldr	r2, [pc, #92]	@ (8000d0c <HAL_MspInit+0x68>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <HAL_MspInit+0x68>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_MspInit+0x68>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a11      	ldr	r2, [pc, #68]	@ (8000d0c <HAL_MspInit+0x68>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <HAL_MspInit+0x68>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	210f      	movs	r1, #15
 8000cde:	f06f 0001 	mvn.w	r0, #1
 8000ce2:	f000 fade 	bl	80012a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <HAL_MspInit+0x6c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <HAL_MspInit+0x6c>)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010000 	.word	0x40010000

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0318 	add.w	r3, r7, #24
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a66      	ldr	r2, [pc, #408]	@ (8000ec8 <HAL_UART_MspInit+0x1b4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d161      	bne.n	8000df8 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d34:	4b65      	ldr	r3, [pc, #404]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a64      	ldr	r2, [pc, #400]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000d3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b62      	ldr	r3, [pc, #392]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b5f      	ldr	r3, [pc, #380]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a5e      	ldr	r2, [pc, #376]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b5c      	ldr	r3, [pc, #368]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0318 	add.w	r3, r7, #24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4855      	ldr	r0, [pc, #340]	@ (8000ed0 <HAL_UART_MspInit+0x1bc>)
 8000d7a:	f000 fd5f 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0318 	add.w	r3, r7, #24
 8000d90:	4619      	mov	r1, r3
 8000d92:	484f      	ldr	r0, [pc, #316]	@ (8000ed0 <HAL_UART_MspInit+0x1bc>)
 8000d94:	f000 fd52 	bl	800183c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000d98:	4b4e      	ldr	r3, [pc, #312]	@ (8000ed4 <HAL_UART_MspInit+0x1c0>)
 8000d9a:	4a4f      	ldr	r2, [pc, #316]	@ (8000ed8 <HAL_UART_MspInit+0x1c4>)
 8000d9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed4 <HAL_UART_MspInit+0x1c0>)
 8000da0:	2210      	movs	r2, #16
 8000da2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed4 <HAL_UART_MspInit+0x1c0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000daa:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed4 <HAL_UART_MspInit+0x1c0>)
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db0:	4b48      	ldr	r3, [pc, #288]	@ (8000ed4 <HAL_UART_MspInit+0x1c0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000db6:	4b47      	ldr	r3, [pc, #284]	@ (8000ed4 <HAL_UART_MspInit+0x1c0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000dbc:	4b45      	ldr	r3, [pc, #276]	@ (8000ed4 <HAL_UART_MspInit+0x1c0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000dc2:	4b44      	ldr	r3, [pc, #272]	@ (8000ed4 <HAL_UART_MspInit+0x1c0>)
 8000dc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dc8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000dca:	4842      	ldr	r0, [pc, #264]	@ (8000ed4 <HAL_UART_MspInit+0x1c0>)
 8000dcc:	f000 fa94 	bl	80012f8 <HAL_DMA_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000dd6:	f7ff fc05 	bl	80005e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed4 <HAL_UART_MspInit+0x1c0>)
 8000dde:	639a      	str	r2, [r3, #56]	@ 0x38
 8000de0:	4a3c      	ldr	r2, [pc, #240]	@ (8000ed4 <HAL_UART_MspInit+0x1c0>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2105      	movs	r1, #5
 8000dea:	2025      	movs	r0, #37	@ 0x25
 8000dec:	f000 fa59 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000df0:	2025      	movs	r0, #37	@ 0x25
 8000df2:	f000 fa72 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df6:	e063      	b.n	8000ec0 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a37      	ldr	r2, [pc, #220]	@ (8000edc <HAL_UART_MspInit+0x1c8>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d15e      	bne.n	8000ec0 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e02:	4b32      	ldr	r3, [pc, #200]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a31      	ldr	r2, [pc, #196]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6193      	str	r3, [r2, #24]
 8000e26:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <HAL_UART_MspInit+0x1b8>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e32:	2304      	movs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4822      	ldr	r0, [pc, #136]	@ (8000ed0 <HAL_UART_MspInit+0x1bc>)
 8000e46:	f000 fcf9 	bl	800183c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e4a:	2308      	movs	r3, #8
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481c      	ldr	r0, [pc, #112]	@ (8000ed0 <HAL_UART_MspInit+0x1bc>)
 8000e5e:	f000 fced 	bl	800183c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000e62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <HAL_UART_MspInit+0x1cc>)
 8000e64:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee4 <HAL_UART_MspInit+0x1d0>)
 8000e66:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <HAL_UART_MspInit+0x1cc>)
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <HAL_UART_MspInit+0x1cc>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <HAL_UART_MspInit+0x1cc>)
 8000e76:	2280      	movs	r2, #128	@ 0x80
 8000e78:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <HAL_UART_MspInit+0x1cc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <HAL_UART_MspInit+0x1cc>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <HAL_UART_MspInit+0x1cc>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <HAL_UART_MspInit+0x1cc>)
 8000e8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e94:	4812      	ldr	r0, [pc, #72]	@ (8000ee0 <HAL_UART_MspInit+0x1cc>)
 8000e96:	f000 fa2f 	bl	80012f8 <HAL_DMA_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8000ea0:	f7ff fba0 	bl	80005e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee0 <HAL_UART_MspInit+0x1cc>)
 8000ea8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee0 <HAL_UART_MspInit+0x1cc>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2105      	movs	r1, #5
 8000eb4:	2026      	movs	r0, #38	@ 0x26
 8000eb6:	f000 f9f4 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eba:	2026      	movs	r0, #38	@ 0x26
 8000ebc:	f000 fa0d 	bl	80012da <HAL_NVIC_EnableIRQ>
}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	@ 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010800 	.word	0x40010800
 8000ed4:	2000010c 	.word	0x2000010c
 8000ed8:	40020044 	.word	0x40020044
 8000edc:	40004400 	.word	0x40004400
 8000ee0:	20000150 	.word	0x20000150
 8000ee4:	40020080 	.word	0x40020080

08000ee8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	@ 0x38
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000efe:	4b34      	ldr	r3, [pc, #208]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a33      	ldr	r2, [pc, #204]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	61d3      	str	r3, [r2, #28]
 8000f0a:	4b31      	ldr	r3, [pc, #196]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f16:	f107 0210 	add.w	r2, r7, #16
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fa19 	bl	8002358 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d103      	bne.n	8000f38 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f30:	f001 f9ea 	bl	8002308 <HAL_RCC_GetPCLK1Freq>
 8000f34:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f36:	e004      	b.n	8000f42 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f38:	f001 f9e6 	bl	8002308 <HAL_RCC_GetPCLK1Freq>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f44:	4a23      	ldr	r2, [pc, #140]	@ (8000fd4 <HAL_InitTick+0xec>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	0c9b      	lsrs	r3, r3, #18
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f50:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <HAL_InitTick+0xf0>)
 8000f52:	4a22      	ldr	r2, [pc, #136]	@ (8000fdc <HAL_InitTick+0xf4>)
 8000f54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f56:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <HAL_InitTick+0xf0>)
 8000f58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f5c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd8 <HAL_InitTick+0xf0>)
 8000f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f62:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <HAL_InitTick+0xf0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <HAL_InitTick+0xf0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_InitTick+0xf0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000f76:	4818      	ldr	r0, [pc, #96]	@ (8000fd8 <HAL_InitTick+0xf0>)
 8000f78:	f001 fa3c 	bl	80023f4 <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f82:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d11b      	bne.n	8000fc2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000f8a:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <HAL_InitTick+0xf0>)
 8000f8c:	f001 fa8a 	bl	80024a4 <HAL_TIM_Base_Start_IT>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f96:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d111      	bne.n	8000fc2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f9e:	201e      	movs	r0, #30
 8000fa0:	f000 f99b 	bl	80012da <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	d808      	bhi.n	8000fbc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000faa:	2200      	movs	r2, #0
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	201e      	movs	r0, #30
 8000fb0:	f000 f977 	bl	80012a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <HAL_InitTick+0xf8>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e002      	b.n	8000fc2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3738      	adds	r7, #56	@ 0x38
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	431bde83 	.word	0x431bde83
 8000fd8:	200001a8 	.word	0x200001a8
 8000fdc:	40000800 	.word	0x40000800
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <NMI_Handler+0x4>

08000fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <UsageFault_Handler+0x4>

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
//DMA TX USART
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <DMA1_Channel4_IRQHandler+0x10>)
 800101e:	f000 fad9 	bl	80015d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000010c 	.word	0x2000010c

0800102c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <DMA1_Channel7_IRQHandler+0x10>)
 8001032:	f000 facf 	bl	80015d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000150 	.word	0x20000150

08001040 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <TIM4_IRQHandler+0x10>)
 8001046:	f001 fa7f 	bl	8002548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001a8 	.word	0x200001a8

08001054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <USART1_IRQHandler+0x10>)
 800105a:	f001 fcfb 	bl	8002a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000007c 	.word	0x2000007c

08001068 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <USART2_IRQHandler+0x10>)
 800106e:	f001 fcf1 	bl	8002a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000c4 	.word	0x200000c4

0800107c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001088:	f7ff fff8 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800108c:	480b      	ldr	r0, [pc, #44]	@ (80010bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800108e:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a09      	ldr	r2, [pc, #36]	@ (80010c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010a4:	4c09      	ldr	r4, [pc, #36]	@ (80010cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b2:	f005 fd81 	bl	8006bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b6:	f7ff f8a9 	bl	800020c <main>
  bx lr
 80010ba:	4770      	bx	lr
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010c4:	08006f94 	.word	0x08006f94
  ldr r2, =_sbss
 80010c8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010cc:	20004314 	.word	0x20004314

080010d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_2_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_Init+0x28>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <HAL_Init+0x28>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f8d1 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	200f      	movs	r0, #15
 80010ec:	f7ff fefc 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fdd8 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <HAL_IncTick+0x1c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <HAL_IncTick+0x20>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a03      	ldr	r2, [pc, #12]	@ (8001120 <HAL_IncTick+0x20>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	20000008 	.word	0x20000008
 8001120:	200001f0 	.word	0x200001f0

08001124 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b02      	ldr	r3, [pc, #8]	@ (8001134 <HAL_GetTick+0x10>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	200001f0 	.word	0x200001f0

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	@ (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4906      	ldr	r1, [pc, #24]	@ (80011d0 <__NVIC_EnableIRQ+0x34>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	@ (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	@ (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	@ 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	@ 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff4f 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff64 	bl	8001180 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ffb2 	bl	8001228 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff81 	bl	80011d4 <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff57 	bl	800119c <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e043      	b.n	8001396 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <HAL_DMA_Init+0xa8>)
 8001316:	4413      	add	r3, r2
 8001318:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <HAL_DMA_Init+0xac>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	009a      	lsls	r2, r3, #2
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1f      	ldr	r2, [pc, #124]	@ (80013a8 <HAL_DMA_Init+0xb0>)
 800132a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2202      	movs	r2, #2
 8001330:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001342:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001346:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	bffdfff8 	.word	0xbffdfff8
 80013a4:	cccccccd 	.word	0xcccccccd
 80013a8:	40020000 	.word	0x40020000

080013ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_DMA_Start_IT+0x20>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e04b      	b.n	8001464 <HAL_DMA_Start_IT+0xb8>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d13a      	bne.n	8001456 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2202      	movs	r2, #2
 80013e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 f9eb 	bl	80017e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140e:	2b00      	cmp	r3, #0
 8001410:	d008      	beq.n	8001424 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 020e 	orr.w	r2, r2, #14
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e00f      	b.n	8001444 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0204 	bic.w	r2, r2, #4
 8001432:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 020a 	orr.w	r2, r2, #10
 8001442:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e005      	b.n	8001462 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800145e:	2302      	movs	r3, #2
 8001460:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d008      	beq.n	8001496 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2204      	movs	r2, #4
 8001488:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e020      	b.n	80014d8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 020e 	bic.w	r2, r2, #14
 80014a4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0201 	bic.w	r2, r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014be:	2101      	movs	r1, #1
 80014c0:	fa01 f202 	lsl.w	r2, r1, r2
 80014c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d005      	beq.n	8001508 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2204      	movs	r2, #4
 8001500:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	e051      	b.n	80015ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 020e 	bic.w	r2, r2, #14
 8001516:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a22      	ldr	r2, [pc, #136]	@ (80015b8 <HAL_DMA_Abort_IT+0xd4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d029      	beq.n	8001586 <HAL_DMA_Abort_IT+0xa2>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a21      	ldr	r2, [pc, #132]	@ (80015bc <HAL_DMA_Abort_IT+0xd8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d022      	beq.n	8001582 <HAL_DMA_Abort_IT+0x9e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1f      	ldr	r2, [pc, #124]	@ (80015c0 <HAL_DMA_Abort_IT+0xdc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01a      	beq.n	800157c <HAL_DMA_Abort_IT+0x98>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a1e      	ldr	r2, [pc, #120]	@ (80015c4 <HAL_DMA_Abort_IT+0xe0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d012      	beq.n	8001576 <HAL_DMA_Abort_IT+0x92>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1c      	ldr	r2, [pc, #112]	@ (80015c8 <HAL_DMA_Abort_IT+0xe4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00a      	beq.n	8001570 <HAL_DMA_Abort_IT+0x8c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1b      	ldr	r2, [pc, #108]	@ (80015cc <HAL_DMA_Abort_IT+0xe8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d102      	bne.n	800156a <HAL_DMA_Abort_IT+0x86>
 8001564:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001568:	e00e      	b.n	8001588 <HAL_DMA_Abort_IT+0xa4>
 800156a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800156e:	e00b      	b.n	8001588 <HAL_DMA_Abort_IT+0xa4>
 8001570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001574:	e008      	b.n	8001588 <HAL_DMA_Abort_IT+0xa4>
 8001576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157a:	e005      	b.n	8001588 <HAL_DMA_Abort_IT+0xa4>
 800157c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001580:	e002      	b.n	8001588 <HAL_DMA_Abort_IT+0xa4>
 8001582:	2310      	movs	r3, #16
 8001584:	e000      	b.n	8001588 <HAL_DMA_Abort_IT+0xa4>
 8001586:	2301      	movs	r3, #1
 8001588:	4a11      	ldr	r2, [pc, #68]	@ (80015d0 <HAL_DMA_Abort_IT+0xec>)
 800158a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	4798      	blx	r3
    } 
  }
  return status;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40020008 	.word	0x40020008
 80015bc:	4002001c 	.word	0x4002001c
 80015c0:	40020030 	.word	0x40020030
 80015c4:	40020044 	.word	0x40020044
 80015c8:	40020058 	.word	0x40020058
 80015cc:	4002006c 	.word	0x4002006c
 80015d0:	40020000 	.word	0x40020000

080015d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	2204      	movs	r2, #4
 80015f2:	409a      	lsls	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d04f      	beq.n	800169c <HAL_DMA_IRQHandler+0xc8>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	d04a      	beq.n	800169c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0320 	and.w	r3, r3, #32
 8001610:	2b00      	cmp	r3, #0
 8001612:	d107      	bne.n	8001624 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0204 	bic.w	r2, r2, #4
 8001622:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a66      	ldr	r2, [pc, #408]	@ (80017c4 <HAL_DMA_IRQHandler+0x1f0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d029      	beq.n	8001682 <HAL_DMA_IRQHandler+0xae>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a65      	ldr	r2, [pc, #404]	@ (80017c8 <HAL_DMA_IRQHandler+0x1f4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d022      	beq.n	800167e <HAL_DMA_IRQHandler+0xaa>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a63      	ldr	r2, [pc, #396]	@ (80017cc <HAL_DMA_IRQHandler+0x1f8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d01a      	beq.n	8001678 <HAL_DMA_IRQHandler+0xa4>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a62      	ldr	r2, [pc, #392]	@ (80017d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d012      	beq.n	8001672 <HAL_DMA_IRQHandler+0x9e>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a60      	ldr	r2, [pc, #384]	@ (80017d4 <HAL_DMA_IRQHandler+0x200>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00a      	beq.n	800166c <HAL_DMA_IRQHandler+0x98>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a5f      	ldr	r2, [pc, #380]	@ (80017d8 <HAL_DMA_IRQHandler+0x204>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d102      	bne.n	8001666 <HAL_DMA_IRQHandler+0x92>
 8001660:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001664:	e00e      	b.n	8001684 <HAL_DMA_IRQHandler+0xb0>
 8001666:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800166a:	e00b      	b.n	8001684 <HAL_DMA_IRQHandler+0xb0>
 800166c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001670:	e008      	b.n	8001684 <HAL_DMA_IRQHandler+0xb0>
 8001672:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001676:	e005      	b.n	8001684 <HAL_DMA_IRQHandler+0xb0>
 8001678:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800167c:	e002      	b.n	8001684 <HAL_DMA_IRQHandler+0xb0>
 800167e:	2340      	movs	r3, #64	@ 0x40
 8001680:	e000      	b.n	8001684 <HAL_DMA_IRQHandler+0xb0>
 8001682:	2304      	movs	r3, #4
 8001684:	4a55      	ldr	r2, [pc, #340]	@ (80017dc <HAL_DMA_IRQHandler+0x208>)
 8001686:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8094 	beq.w	80017ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800169a:	e08e      	b.n	80017ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	2202      	movs	r2, #2
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d056      	beq.n	800175a <HAL_DMA_IRQHandler+0x186>
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d051      	beq.n	800175a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10b      	bne.n	80016dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 020a 	bic.w	r2, r2, #10
 80016d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a38      	ldr	r2, [pc, #224]	@ (80017c4 <HAL_DMA_IRQHandler+0x1f0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d029      	beq.n	800173a <HAL_DMA_IRQHandler+0x166>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a37      	ldr	r2, [pc, #220]	@ (80017c8 <HAL_DMA_IRQHandler+0x1f4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d022      	beq.n	8001736 <HAL_DMA_IRQHandler+0x162>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a35      	ldr	r2, [pc, #212]	@ (80017cc <HAL_DMA_IRQHandler+0x1f8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01a      	beq.n	8001730 <HAL_DMA_IRQHandler+0x15c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a34      	ldr	r2, [pc, #208]	@ (80017d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d012      	beq.n	800172a <HAL_DMA_IRQHandler+0x156>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a32      	ldr	r2, [pc, #200]	@ (80017d4 <HAL_DMA_IRQHandler+0x200>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00a      	beq.n	8001724 <HAL_DMA_IRQHandler+0x150>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a31      	ldr	r2, [pc, #196]	@ (80017d8 <HAL_DMA_IRQHandler+0x204>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d102      	bne.n	800171e <HAL_DMA_IRQHandler+0x14a>
 8001718:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800171c:	e00e      	b.n	800173c <HAL_DMA_IRQHandler+0x168>
 800171e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001722:	e00b      	b.n	800173c <HAL_DMA_IRQHandler+0x168>
 8001724:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001728:	e008      	b.n	800173c <HAL_DMA_IRQHandler+0x168>
 800172a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800172e:	e005      	b.n	800173c <HAL_DMA_IRQHandler+0x168>
 8001730:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001734:	e002      	b.n	800173c <HAL_DMA_IRQHandler+0x168>
 8001736:	2320      	movs	r3, #32
 8001738:	e000      	b.n	800173c <HAL_DMA_IRQHandler+0x168>
 800173a:	2302      	movs	r3, #2
 800173c:	4a27      	ldr	r2, [pc, #156]	@ (80017dc <HAL_DMA_IRQHandler+0x208>)
 800173e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d034      	beq.n	80017ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001758:	e02f      	b.n	80017ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	2208      	movs	r2, #8
 8001760:	409a      	lsls	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d028      	beq.n	80017bc <HAL_DMA_IRQHandler+0x1e8>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d023      	beq.n	80017bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 020e 	bic.w	r2, r2, #14
 8001782:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	4798      	blx	r3
    }
  }
  return;
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
}
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40020008 	.word	0x40020008
 80017c8:	4002001c 	.word	0x4002001c
 80017cc:	40020030 	.word	0x40020030
 80017d0:	40020044 	.word	0x40020044
 80017d4:	40020058 	.word	0x40020058
 80017d8:	4002006c 	.word	0x4002006c
 80017dc:	40020000 	.word	0x40020000

080017e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f202 	lsl.w	r2, r1, r2
 80017fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b10      	cmp	r3, #16
 800180c:	d108      	bne.n	8001820 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800181e:	e007      	b.n	8001830 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	60da      	str	r2, [r3, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b08b      	sub	sp, #44	@ 0x2c
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184e:	e169      	b.n	8001b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001850:	2201      	movs	r2, #1
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8158 	bne.w	8001b1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a9a      	ldr	r2, [pc, #616]	@ (8001adc <HAL_GPIO_Init+0x2a0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d05e      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001878:	4a98      	ldr	r2, [pc, #608]	@ (8001adc <HAL_GPIO_Init+0x2a0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d875      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800187e:	4a98      	ldr	r2, [pc, #608]	@ (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d058      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001884:	4a96      	ldr	r2, [pc, #600]	@ (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d86f      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800188a:	4a96      	ldr	r2, [pc, #600]	@ (8001ae4 <HAL_GPIO_Init+0x2a8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d052      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001890:	4a94      	ldr	r2, [pc, #592]	@ (8001ae4 <HAL_GPIO_Init+0x2a8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d869      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 8001896:	4a94      	ldr	r2, [pc, #592]	@ (8001ae8 <HAL_GPIO_Init+0x2ac>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d04c      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 800189c:	4a92      	ldr	r2, [pc, #584]	@ (8001ae8 <HAL_GPIO_Init+0x2ac>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d863      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018a2:	4a92      	ldr	r2, [pc, #584]	@ (8001aec <HAL_GPIO_Init+0x2b0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d046      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 80018a8:	4a90      	ldr	r2, [pc, #576]	@ (8001aec <HAL_GPIO_Init+0x2b0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d85d      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d82a      	bhi.n	8001908 <HAL_GPIO_Init+0xcc>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d859      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018b6:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <HAL_GPIO_Init+0x80>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	08001937 	.word	0x08001937
 80018c0:	08001911 	.word	0x08001911
 80018c4:	08001923 	.word	0x08001923
 80018c8:	08001965 	.word	0x08001965
 80018cc:	0800196b 	.word	0x0800196b
 80018d0:	0800196b 	.word	0x0800196b
 80018d4:	0800196b 	.word	0x0800196b
 80018d8:	0800196b 	.word	0x0800196b
 80018dc:	0800196b 	.word	0x0800196b
 80018e0:	0800196b 	.word	0x0800196b
 80018e4:	0800196b 	.word	0x0800196b
 80018e8:	0800196b 	.word	0x0800196b
 80018ec:	0800196b 	.word	0x0800196b
 80018f0:	0800196b 	.word	0x0800196b
 80018f4:	0800196b 	.word	0x0800196b
 80018f8:	0800196b 	.word	0x0800196b
 80018fc:	0800196b 	.word	0x0800196b
 8001900:	08001919 	.word	0x08001919
 8001904:	0800192d 	.word	0x0800192d
 8001908:	4a79      	ldr	r2, [pc, #484]	@ (8001af0 <HAL_GPIO_Init+0x2b4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190e:	e02c      	b.n	800196a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e029      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	3304      	adds	r3, #4
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e024      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	3308      	adds	r3, #8
 8001928:	623b      	str	r3, [r7, #32]
          break;
 800192a:	e01f      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	330c      	adds	r3, #12
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e01a      	b.n	800196c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193e:	2304      	movs	r3, #4
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e013      	b.n	800196c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800194c:	2308      	movs	r3, #8
 800194e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	611a      	str	r2, [r3, #16]
          break;
 8001956:	e009      	b.n	800196c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001958:	2308      	movs	r3, #8
 800195a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	615a      	str	r2, [r3, #20]
          break;
 8001962:	e003      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x130>
          break;
 800196a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2bff      	cmp	r3, #255	@ 0xff
 8001970:	d801      	bhi.n	8001976 <HAL_GPIO_Init+0x13a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	e001      	b.n	800197a <HAL_GPIO_Init+0x13e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3304      	adds	r3, #4
 800197a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	@ 0xff
 8001980:	d802      	bhi.n	8001988 <HAL_GPIO_Init+0x14c>
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x152>
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	3b08      	subs	r3, #8
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	210f      	movs	r1, #15
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	6a39      	ldr	r1, [r7, #32]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80b1 	beq.w	8001b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019bc:	4b4d      	ldr	r3, [pc, #308]	@ (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a4c      	ldr	r2, [pc, #304]	@ (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d4:	4a48      	ldr	r2, [pc, #288]	@ (8001af8 <HAL_GPIO_Init+0x2bc>)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a40      	ldr	r2, [pc, #256]	@ (8001afc <HAL_GPIO_Init+0x2c0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_GPIO_Init+0x1ec>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3f      	ldr	r2, [pc, #252]	@ (8001b00 <HAL_GPIO_Init+0x2c4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1e8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b04 <HAL_GPIO_Init+0x2c8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1e4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3d      	ldr	r2, [pc, #244]	@ (8001b08 <HAL_GPIO_Init+0x2cc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1e0>
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e006      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	e004      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a2c:	f002 0203 	and.w	r2, r2, #3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4093      	lsls	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3a:	492f      	ldr	r1, [pc, #188]	@ (8001af8 <HAL_GPIO_Init+0x2bc>)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a54:	4b2d      	ldr	r3, [pc, #180]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	492c      	ldr	r1, [pc, #176]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a62:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4928      	ldr	r1, [pc, #160]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a7c:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4922      	ldr	r1, [pc, #136]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a8a:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	491e      	ldr	r1, [pc, #120]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4918      	ldr	r1, [pc, #96]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab2:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4914      	ldr	r1, [pc, #80]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d021      	beq.n	8001b10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001acc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	490e      	ldr	r1, [pc, #56]	@ (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	e021      	b.n	8001b1e <HAL_GPIO_Init+0x2e2>
 8001ada:	bf00      	nop
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10310000 	.word	0x10310000
 8001ae4:	10220000 	.word	0x10220000
 8001ae8:	10210000 	.word	0x10210000
 8001aec:	10120000 	.word	0x10120000
 8001af0:	10110000 	.word	0x10110000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40011400 	.word	0x40011400
 8001b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4909      	ldr	r1, [pc, #36]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f47f ae8e 	bne.w	8001850 <HAL_GPIO_Init+0x14>
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	372c      	adds	r7, #44	@ 0x2c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b60:	e003      	b.n	8001b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	041a      	lsls	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e272      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8087 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b94:	4b92      	ldr	r3, [pc, #584]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d00c      	beq.n	8001bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba0:	4b8f      	ldr	r3, [pc, #572]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d112      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
 8001bac:	4b8c      	ldr	r3, [pc, #560]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bba:	4b89      	ldr	r3, [pc, #548]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d168      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e24c      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x76>
 8001bdc:	4b80      	ldr	r3, [pc, #512]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a7f      	ldr	r2, [pc, #508]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	e02e      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x98>
 8001bf2:	4b7b      	ldr	r3, [pc, #492]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7a      	ldr	r2, [pc, #488]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b78      	ldr	r3, [pc, #480]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a77      	ldr	r2, [pc, #476]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e01d      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0xbc>
 8001c16:	4b72      	ldr	r3, [pc, #456]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a71      	ldr	r2, [pc, #452]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b6f      	ldr	r3, [pc, #444]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6e      	ldr	r2, [pc, #440]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c30:	4b6b      	ldr	r3, [pc, #428]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6a      	ldr	r2, [pc, #424]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b68      	ldr	r3, [pc, #416]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a67      	ldr	r2, [pc, #412]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fa68 	bl	8001124 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fa64 	bl	8001124 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	@ 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e200      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0xe4>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fa54 	bl	8001124 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fa50 	bl	8001124 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	@ 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1ec      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	4b53      	ldr	r3, [pc, #332]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x10c>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cae:	4b4c      	ldr	r3, [pc, #304]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cba:	4b49      	ldr	r3, [pc, #292]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d11c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
 8001cc6:	4b46      	ldr	r3, [pc, #280]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d116      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	4b43      	ldr	r3, [pc, #268]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e1c0      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b3d      	ldr	r3, [pc, #244]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4939      	ldr	r1, [pc, #228]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	e03a      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d08:	4b36      	ldr	r3, [pc, #216]	@ (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fa09 	bl	8001124 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff fa05 	bl	8001124 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1a1      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	4b2d      	ldr	r3, [pc, #180]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d34:	4b2a      	ldr	r3, [pc, #168]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4927      	ldr	r1, [pc, #156]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
 8001d48:	e015      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	4b26      	ldr	r3, [pc, #152]	@ (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff f9e8 	bl	8001124 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff f9e4 	bl	8001124 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e180      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d03a      	beq.n	8001df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d019      	beq.n	8001dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff f9c8 	bl	8001124 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff f9c4 	bl	8001124 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e160      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f000 fafe 	bl	80023b8 <RCC_Delay>
 8001dbc:	e01c      	b.n	8001df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f9ae 	bl	8001124 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff f9aa 	bl	8001124 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d908      	bls.n	8001dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e146      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	42420000 	.word	0x42420000
 8001de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	4b92      	ldr	r3, [pc, #584]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e9      	bne.n	8001dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a6 	beq.w	8001f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b8b      	ldr	r3, [pc, #556]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10d      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b88      	ldr	r3, [pc, #544]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a87      	ldr	r2, [pc, #540]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]
 8001e22:	4b85      	ldr	r3, [pc, #532]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b82      	ldr	r3, [pc, #520]	@ (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7e      	ldr	r2, [pc, #504]	@ (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f96b 	bl	8001124 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff f967 	bl	8001124 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	@ 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e103      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b75      	ldr	r3, [pc, #468]	@ (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x312>
 8001e78:	4b6f      	ldr	r3, [pc, #444]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	e02d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x334>
 8001e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a69      	ldr	r2, [pc, #420]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	4b67      	ldr	r3, [pc, #412]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a66      	ldr	r2, [pc, #408]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	e01c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_OscConfig+0x356>
 8001eb0:	4b61      	ldr	r3, [pc, #388]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a60      	ldr	r2, [pc, #384]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	4b5e      	ldr	r3, [pc, #376]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a5d      	ldr	r2, [pc, #372]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001eca:	4b5b      	ldr	r3, [pc, #364]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a5a      	ldr	r2, [pc, #360]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	4b58      	ldr	r3, [pc, #352]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a57      	ldr	r2, [pc, #348]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d015      	beq.n	8001f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff f91b 	bl	8001124 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7ff f917 	bl	8001124 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e0b1      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	4b4b      	ldr	r3, [pc, #300]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0ee      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x37e>
 8001f14:	e014      	b.n	8001f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7ff f905 	bl	8001124 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff f901 	bl	8001124 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e09b      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f34:	4b40      	ldr	r3, [pc, #256]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ee      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f46:	4b3c      	ldr	r3, [pc, #240]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a3b      	ldr	r2, [pc, #236]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8087 	beq.w	800206a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5c:	4b36      	ldr	r3, [pc, #216]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d061      	beq.n	800202c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d146      	bne.n	8001ffe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b33      	ldr	r3, [pc, #204]	@ (8002040 <HAL_RCC_OscConfig+0x4cc>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff f8d5 	bl	8001124 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff f8d1 	bl	8001124 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e06d      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	4b29      	ldr	r3, [pc, #164]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa4:	d108      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fa6:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	4921      	ldr	r1, [pc, #132]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a19      	ldr	r1, [r3, #32]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	491b      	ldr	r1, [pc, #108]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002040 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff f8a5 	bl	8001124 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff f8a1 	bl	8001124 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e03d      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff0:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x46a>
 8001ffc:	e035      	b.n	800206a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <HAL_RCC_OscConfig+0x4cc>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff f88e 	bl	8001124 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff f88a 	bl	8001124 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e026      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x498>
 800202a:	e01e      	b.n	800206a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e019      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
 8002038:	40021000 	.word	0x40021000
 800203c:	40007000 	.word	0x40007000
 8002040:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002044:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <HAL_RCC_OscConfig+0x500>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	429a      	cmp	r2, r3
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0d0      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b6a      	ldr	r3, [pc, #424]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d910      	bls.n	80020bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b67      	ldr	r3, [pc, #412]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4965      	ldr	r1, [pc, #404]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b63      	ldr	r3, [pc, #396]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0b8      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d020      	beq.n	800210a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d4:	4b59      	ldr	r3, [pc, #356]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a58      	ldr	r2, [pc, #352]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ec:	4b53      	ldr	r3, [pc, #332]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a52      	ldr	r2, [pc, #328]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b50      	ldr	r3, [pc, #320]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	494d      	ldr	r1, [pc, #308]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d040      	beq.n	8002198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b47      	ldr	r3, [pc, #284]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d115      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e07f      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d107      	bne.n	8002146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002136:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e073      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	4b3d      	ldr	r3, [pc, #244]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e06b      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002156:	4b39      	ldr	r3, [pc, #228]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f023 0203 	bic.w	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4936      	ldr	r1, [pc, #216]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002168:	f7fe ffdc 	bl	8001124 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	e00a      	b.n	8002186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002170:	f7fe ffd8 	bl	8001124 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e053      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	4b2d      	ldr	r3, [pc, #180]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 020c 	and.w	r2, r3, #12
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	429a      	cmp	r2, r3
 8002196:	d1eb      	bne.n	8002170 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002198:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d210      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4922      	ldr	r1, [pc, #136]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e032      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d4:	4b19      	ldr	r3, [pc, #100]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4916      	ldr	r1, [pc, #88]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	490e      	ldr	r1, [pc, #56]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002206:	f000 f821 	bl	800224c <HAL_RCC_GetSysClockFreq>
 800220a:	4602      	mov	r2, r0
 800220c:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	490a      	ldr	r1, [pc, #40]	@ (8002240 <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	5ccb      	ldrb	r3, [r1, r3]
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	4a09      	ldr	r2, [pc, #36]	@ (8002244 <HAL_RCC_ClockConfig+0x1cc>)
 8002220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002222:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_RCC_ClockConfig+0x1d0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fe5e 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40022000 	.word	0x40022000
 800223c:	40021000 	.word	0x40021000
 8002240:	08006f60 	.word	0x08006f60
 8002244:	20000000 	.word	0x20000000
 8002248:	20000004 	.word	0x20000004

0800224c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002266:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b04      	cmp	r3, #4
 8002274:	d002      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x30>
 8002276:	2b08      	cmp	r3, #8
 8002278:	d003      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x36>
 800227a:	e027      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800227c:	4b19      	ldr	r3, [pc, #100]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800227e:	613b      	str	r3, [r7, #16]
      break;
 8002280:	e027      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	0c9b      	lsrs	r3, r3, #18
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	4a17      	ldr	r2, [pc, #92]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d010      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800229a:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	0c5b      	lsrs	r3, r3, #17
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	4a11      	ldr	r2, [pc, #68]	@ (80022ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ae:	fb03 f202 	mul.w	r2, r3, r2
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e004      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a0c      	ldr	r2, [pc, #48]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	613b      	str	r3, [r7, #16]
      break;
 80022ca:	e002      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ce:	613b      	str	r3, [r7, #16]
      break;
 80022d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d2:	693b      	ldr	r3, [r7, #16]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	007a1200 	.word	0x007a1200
 80022e8:	08006f78 	.word	0x08006f78
 80022ec:	08006f88 	.word	0x08006f88
 80022f0:	003d0900 	.word	0x003d0900

080022f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f8:	4b02      	ldr	r3, [pc, #8]	@ (8002304 <HAL_RCC_GetHCLKFreq+0x10>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	20000000 	.word	0x20000000

08002308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800230c:	f7ff fff2 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	4903      	ldr	r1, [pc, #12]	@ (800232c <HAL_RCC_GetPCLK1Freq+0x24>)
 800231e:	5ccb      	ldrb	r3, [r1, r3]
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	08006f70 	.word	0x08006f70

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002334:	f7ff ffde 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0adb      	lsrs	r3, r3, #11
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4903      	ldr	r1, [pc, #12]	@ (8002354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	08006f70 	.word	0x08006f70

08002358 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	220f      	movs	r2, #15
 8002366:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_RCC_GetClockConfig+0x58>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0203 	and.w	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002374:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <HAL_RCC_GetClockConfig+0x58>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <HAL_RCC_GetClockConfig+0x58>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800238c:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <HAL_RCC_GetClockConfig+0x58>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_RCC_GetClockConfig+0x5c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0207 	and.w	r2, r3, #7
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40022000 	.word	0x40022000

080023b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023c0:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <RCC_Delay+0x34>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <RCC_Delay+0x38>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0a5b      	lsrs	r3, r3, #9
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d4:	bf00      	nop
  }
  while (Delay --);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1e5a      	subs	r2, r3, #1
 80023da:	60fa      	str	r2, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <RCC_Delay+0x1c>
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	20000000 	.word	0x20000000
 80023f0:	10624dd3 	.word	0x10624dd3

080023f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e041      	b.n	800248a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f839 	bl	8002492 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f000 f9b4 	bl	80027a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d001      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e03a      	b.n	8002532 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a18      	ldr	r2, [pc, #96]	@ (800253c <HAL_TIM_Base_Start_IT+0x98>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00e      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x58>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024e6:	d009      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x58>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a14      	ldr	r2, [pc, #80]	@ (8002540 <HAL_TIM_Base_Start_IT+0x9c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x58>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a13      	ldr	r2, [pc, #76]	@ (8002544 <HAL_TIM_Base_Start_IT+0xa0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d111      	bne.n	8002520 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b06      	cmp	r3, #6
 800250c:	d010      	beq.n	8002530 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251e:	e007      	b.n	8002530 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	40012c00 	.word	0x40012c00
 8002540:	40000400 	.word	0x40000400
 8002544:	40000800 	.word	0x40000800

08002548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b02      	cmp	r3, #2
 800255c:	d122      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b02      	cmp	r3, #2
 800256a:	d11b      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0202 	mvn.w	r2, #2
 8002574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8ed 	bl	800276a <HAL_TIM_IC_CaptureCallback>
 8002590:	e005      	b.n	800259e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f8e0 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f8ef 	bl	800277c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d122      	bne.n	80025f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d11b      	bne.n	80025f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0204 	mvn.w	r2, #4
 80025c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8c3 	bl	800276a <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f8b6 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f8c5 	bl	800277c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b08      	cmp	r3, #8
 8002604:	d122      	bne.n	800264c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b08      	cmp	r3, #8
 8002612:	d11b      	bne.n	800264c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0208 	mvn.w	r2, #8
 800261c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2204      	movs	r2, #4
 8002622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f899 	bl	800276a <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f88c 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f89b 	bl	800277c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b10      	cmp	r3, #16
 8002658:	d122      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b10      	cmp	r3, #16
 8002666:	d11b      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0210 	mvn.w	r2, #16
 8002670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2208      	movs	r2, #8
 8002676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f86f 	bl	800276a <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f862 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f871 	bl	800277c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10e      	bne.n	80026cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d107      	bne.n	80026cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0201 	mvn.w	r2, #1
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7fd ff7a 	bl	80005c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d6:	2b80      	cmp	r3, #128	@ 0x80
 80026d8:	d10e      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e4:	2b80      	cmp	r3, #128	@ 0x80
 80026e6:	d107      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8bf 	bl	8002876 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002702:	2b40      	cmp	r3, #64	@ 0x40
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002710:	2b40      	cmp	r3, #64	@ 0x40
 8002712:	d107      	bne.n	8002724 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f835 	bl	800278e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b20      	cmp	r3, #32
 8002730:	d10e      	bne.n	8002750 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b20      	cmp	r3, #32
 800273e:	d107      	bne.n	8002750 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0220 	mvn.w	r2, #32
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f88a 	bl	8002864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a29      	ldr	r2, [pc, #164]	@ (8002858 <TIM_Base_SetConfig+0xb8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00b      	beq.n	80027d0 <TIM_Base_SetConfig+0x30>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027be:	d007      	beq.n	80027d0 <TIM_Base_SetConfig+0x30>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a26      	ldr	r2, [pc, #152]	@ (800285c <TIM_Base_SetConfig+0xbc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d003      	beq.n	80027d0 <TIM_Base_SetConfig+0x30>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a25      	ldr	r2, [pc, #148]	@ (8002860 <TIM_Base_SetConfig+0xc0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d108      	bne.n	80027e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002858 <TIM_Base_SetConfig+0xb8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00b      	beq.n	8002802 <TIM_Base_SetConfig+0x62>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f0:	d007      	beq.n	8002802 <TIM_Base_SetConfig+0x62>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a19      	ldr	r2, [pc, #100]	@ (800285c <TIM_Base_SetConfig+0xbc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d003      	beq.n	8002802 <TIM_Base_SetConfig+0x62>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a18      	ldr	r2, [pc, #96]	@ (8002860 <TIM_Base_SetConfig+0xc0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d108      	bne.n	8002814 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a07      	ldr	r2, [pc, #28]	@ (8002858 <TIM_Base_SetConfig+0xb8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d103      	bne.n	8002848 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	615a      	str	r2, [r3, #20]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40000400 	.word	0x40000400
 8002860:	40000800 	.word	0x40000800

08002864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e042      	b.n	8002920 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fa30 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2224      	movs	r2, #36	@ 0x24
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fe11 	bl	80034f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b20      	cmp	r3, #32
 8002940:	d112      	bne.n	8002968 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_UART_Receive_IT+0x26>
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e00b      	b.n	800296a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	461a      	mov	r2, r3
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fbcc 	bl	80030fc <UART_Start_Receive_IT>
 8002964:	4603      	mov	r3, r0
 8002966:	e000      	b.n	800296a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08c      	sub	sp, #48	@ 0x30
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b20      	cmp	r3, #32
 800298c:	d156      	bne.n	8002a3c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_UART_Transmit_DMA+0x26>
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e04f      	b.n	8002a3e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88fa      	ldrh	r2, [r7, #6]
 80029a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2221      	movs	r2, #33	@ 0x21
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c2:	4a21      	ldr	r2, [pc, #132]	@ (8002a48 <HAL_UART_Transmit_DMA+0xd4>)
 80029c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ca:	4a20      	ldr	r2, [pc, #128]	@ (8002a4c <HAL_UART_Transmit_DMA+0xd8>)
 80029cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a50 <HAL_UART_Transmit_DMA+0xdc>)
 80029d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029da:	2200      	movs	r2, #0
 80029dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80029de:	f107 0308 	add.w	r3, r7, #8
 80029e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80029e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3304      	adds	r3, #4
 80029f2:	461a      	mov	r2, r3
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	f7fe fcd9 	bl	80013ac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3314      	adds	r3, #20
 8002a0a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	617b      	str	r3, [r7, #20]
   return(result);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3314      	adds	r3, #20
 8002a22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a24:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a26:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	6a39      	ldr	r1, [r7, #32]
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a2c:	e841 2300 	strex	r3, r2, [r1]
 8002a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e5      	bne.n	8002a04 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3730      	adds	r7, #48	@ 0x30
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	08002fb3 	.word	0x08002fb3
 8002a4c:	0800304d 	.word	0x0800304d
 8002a50:	08003069 	.word	0x08003069

08002a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b0ba      	sub	sp, #232	@ 0xe8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_UART_IRQHandler+0x66>
 8002aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fc5f 	bl	8003376 <UART_Receive_IT>
      return;
 8002ab8:	e25b      	b.n	8002f72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80de 	beq.w	8002c80 <HAL_UART_IRQHandler+0x22c>
 8002ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ad4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80d1 	beq.w	8002c80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_UART_IRQHandler+0xae>
 8002aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_UART_IRQHandler+0xd2>
 8002b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	f043 0202 	orr.w	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_UART_IRQHandler+0xf6>
 8002b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d011      	beq.n	8002b7a <HAL_UART_IRQHandler+0x126>
 8002b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d105      	bne.n	8002b6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f043 0208 	orr.w	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 81f2 	beq.w	8002f68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x14e>
 8002b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fbea 	bl	8003376 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <HAL_UART_IRQHandler+0x17a>
 8002bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d04f      	beq.n	8002c6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 faf4 	bl	80031bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d041      	beq.n	8002c66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3314      	adds	r3, #20
 8002c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1d9      	bne.n	8002be2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d013      	beq.n	8002c5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e34 <HAL_UART_IRQHandler+0x3e0>)
 8002c3c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fc4e 	bl	80014e4 <HAL_DMA_Abort_IT>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	e00e      	b.n	8002c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f993 	bl	8002f8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	e00a      	b.n	8002c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f98f 	bl	8002f8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	e006      	b.n	8002c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f98b 	bl	8002f8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c7a:	e175      	b.n	8002f68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	bf00      	nop
    return;
 8002c7e:	e173      	b.n	8002f68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	f040 814f 	bne.w	8002f28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8148 	beq.w	8002f28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8141 	beq.w	8002f28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80b6 	beq.w	8002e38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8145 	beq.w	8002f6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cea:	429a      	cmp	r2, r3
 8002cec:	f080 813e 	bcs.w	8002f6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	f000 8088 	beq.w	8002e14 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d30:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d38:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1d9      	bne.n	8002d04 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3314      	adds	r3, #20
 8002d56:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d5a:	e853 3f00 	ldrex	r3, [r3]
 8002d5e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d74:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d78:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d80:	e841 2300 	strex	r3, r2, [r1]
 8002d84:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e1      	bne.n	8002d50 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3314      	adds	r3, #20
 8002d92:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d96:	e853 3f00 	ldrex	r3, [r3]
 8002d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002da2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3314      	adds	r3, #20
 8002dac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002db0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002db2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002db6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002dbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e3      	bne.n	8002d8c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002de4:	f023 0310 	bic.w	r3, r3, #16
 8002de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002df6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002df8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e3      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fb2c 	bl	800146c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8b6 	bl	8002f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e30:	e09c      	b.n	8002f6c <HAL_UART_IRQHandler+0x518>
 8002e32:	bf00      	nop
 8002e34:	08003281 	.word	0x08003281
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 808e 	beq.w	8002f70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8089 	beq.w	8002f70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e82:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e3      	bne.n	8002e5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3314      	adds	r3, #20
 8002eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002eba:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e3      	bne.n	8002e96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0310 	bic.w	r3, r3, #16
 8002ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f00:	61fa      	str	r2, [r7, #28]
 8002f02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	69b9      	ldr	r1, [r7, #24]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e3      	bne.n	8002edc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f83b 	bl	8002f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f26:	e023      	b.n	8002f70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <HAL_UART_IRQHandler+0x4f4>
 8002f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f9b1 	bl	80032a8 <UART_Transmit_IT>
    return;
 8002f46:	e014      	b.n	8002f72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00e      	beq.n	8002f72 <HAL_UART_IRQHandler+0x51e>
 8002f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f9f0 	bl	8003346 <UART_EndTransmit_IT>
    return;
 8002f66:	e004      	b.n	8002f72 <HAL_UART_IRQHandler+0x51e>
    return;
 8002f68:	bf00      	nop
 8002f6a:	e002      	b.n	8002f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f6c:	bf00      	nop
 8002f6e:	e000      	b.n	8002f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f70:	bf00      	nop
  }
}
 8002f72:	37e8      	adds	r7, #232	@ 0xe8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b090      	sub	sp, #64	@ 0x40
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d137      	bne.n	800303e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3314      	adds	r3, #20
 8002ff2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ff4:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ffc:	e841 2300 	strex	r3, r2, [r1]
 8003000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e5      	bne.n	8002fd4 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	60fb      	str	r3, [r7, #12]
   return(result);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003028:	61fa      	str	r2, [r7, #28]
 800302a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	69b9      	ldr	r1, [r7, #24]
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	617b      	str	r3, [r7, #20]
   return(result);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e5      	bne.n	8003008 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800303c:	e002      	b.n	8003044 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800303e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003040:	f7fd f886 	bl	8000150 <HAL_UART_TxCpltCallback>
}
 8003044:	bf00      	nop
 8003046:	3740      	adds	r7, #64	@ 0x40
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7ff ff8c 	bl	8002f78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b21      	cmp	r3, #33	@ 0x21
 800309a:	d108      	bne.n	80030ae <UART_DMAError+0x46>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2200      	movs	r2, #0
 80030a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80030a8:	68b8      	ldr	r0, [r7, #8]
 80030aa:	f000 f860 	bl	800316e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b22      	cmp	r3, #34	@ 0x22
 80030ce:	d108      	bne.n	80030e2 <UART_DMAError+0x7a>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80030dc:	68b8      	ldr	r0, [r7, #8]
 80030de:	f000 f86d 	bl	80031bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030ee:	68b8      	ldr	r0, [r7, #8]
 80030f0:	f7ff ff4b 	bl	8002f8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	88fa      	ldrh	r2, [r7, #6]
 800311a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2222      	movs	r2, #34	@ 0x22
 8003126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003140:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0201 	orr.w	r2, r2, #1
 8003150:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0220 	orr.w	r2, r2, #32
 8003160:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800316e:	b480      	push	{r7}
 8003170:	b089      	sub	sp, #36	@ 0x24
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	60bb      	str	r3, [r7, #8]
   return(result);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	61ba      	str	r2, [r7, #24]
 8003198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6979      	ldr	r1, [r7, #20]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	613b      	str	r3, [r7, #16]
   return(result);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e5      	bne.n	8003176 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80031b2:	bf00      	nop
 80031b4:	3724      	adds	r7, #36	@ 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b095      	sub	sp, #84	@ 0x54
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80031e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031ec:	e841 2300 	strex	r3, r2, [r1]
 80031f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e5      	bne.n	80031c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3314      	adds	r3, #20
 80031fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	e853 3f00 	ldrex	r3, [r3]
 8003206:	61fb      	str	r3, [r7, #28]
   return(result);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3314      	adds	r3, #20
 8003216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003218:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800321a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800321e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e5      	bne.n	80031f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	2b01      	cmp	r3, #1
 8003232:	d119      	bne.n	8003268 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	60bb      	str	r3, [r7, #8]
   return(result);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f023 0310 	bic.w	r3, r3, #16
 800324a:	647b      	str	r3, [r7, #68]	@ 0x44
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	330c      	adds	r3, #12
 8003252:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003254:	61ba      	str	r2, [r7, #24]
 8003256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	6979      	ldr	r1, [r7, #20]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	613b      	str	r3, [r7, #16]
   return(result);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e5      	bne.n	8003234 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003276:	bf00      	nop
 8003278:	3754      	adds	r7, #84	@ 0x54
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f7ff fe75 	bl	8002f8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b21      	cmp	r3, #33	@ 0x21
 80032ba:	d13e      	bne.n	800333a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032c4:	d114      	bne.n	80032f0 <UART_Transmit_IT+0x48>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d110      	bne.n	80032f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	1c9a      	adds	r2, r3, #2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	621a      	str	r2, [r3, #32]
 80032ee:	e008      	b.n	8003302 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	1c59      	adds	r1, r3, #1
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6211      	str	r1, [r2, #32]
 80032fa:	781a      	ldrb	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29b      	uxth	r3, r3
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4619      	mov	r1, r3
 8003310:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003324:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003334:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800335c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fc fef2 	bl	8000150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b08c      	sub	sp, #48	@ 0x30
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b22      	cmp	r3, #34	@ 0x22
 8003388:	f040 80ae 	bne.w	80034e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003394:	d117      	bne.n	80033c6 <UART_Receive_IT+0x50>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d113      	bne.n	80033c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	1c9a      	adds	r2, r3, #2
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80033c4:	e026      	b.n	8003414 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d8:	d007      	beq.n	80033ea <UART_Receive_IT+0x74>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <UART_Receive_IT+0x82>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e008      	b.n	800340a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003404:	b2da      	uxtb	r2, r3
 8003406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003408:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29b      	uxth	r3, r3
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4619      	mov	r1, r3
 8003422:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003424:	2b00      	cmp	r3, #0
 8003426:	d15d      	bne.n	80034e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0220 	bic.w	r2, r2, #32
 8003436:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0201 	bic.w	r2, r2, #1
 8003456:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	2b01      	cmp	r3, #1
 800346c:	d135      	bne.n	80034da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	613b      	str	r3, [r7, #16]
   return(result);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f023 0310 	bic.w	r3, r3, #16
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	330c      	adds	r3, #12
 8003492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003494:	623a      	str	r2, [r7, #32]
 8003496:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	69f9      	ldr	r1, [r7, #28]
 800349a:	6a3a      	ldr	r2, [r7, #32]
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e5      	bne.n	8003474 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d10a      	bne.n	80034cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034d0:	4619      	mov	r1, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fd62 	bl	8002f9c <HAL_UARTEx_RxEventCallback>
 80034d8:	e002      	b.n	80034e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fc fe48 	bl	8000170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e002      	b.n	80034ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e000      	b.n	80034ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3730      	adds	r7, #48	@ 0x30
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800352e:	f023 030c 	bic.w	r3, r3, #12
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	430b      	orrs	r3, r1
 800353a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2c      	ldr	r2, [pc, #176]	@ (8003608 <UART_SetConfig+0x114>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d103      	bne.n	8003564 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800355c:	f7fe fee8 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	e002      	b.n	800356a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003564:	f7fe fed0 	bl	8002308 <HAL_RCC_GetPCLK1Freq>
 8003568:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009a      	lsls	r2, r3, #2
 8003574:	441a      	add	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	4a22      	ldr	r2, [pc, #136]	@ (800360c <UART_SetConfig+0x118>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	0119      	lsls	r1, r3, #4
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009a      	lsls	r2, r3, #2
 8003594:	441a      	add	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a0:	4b1a      	ldr	r3, [pc, #104]	@ (800360c <UART_SetConfig+0x118>)
 80035a2:	fba3 0302 	umull	r0, r3, r3, r2
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2064      	movs	r0, #100	@ 0x64
 80035aa:	fb00 f303 	mul.w	r3, r0, r3
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	3332      	adds	r3, #50	@ 0x32
 80035b4:	4a15      	ldr	r2, [pc, #84]	@ (800360c <UART_SetConfig+0x118>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035c0:	4419      	add	r1, r3
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	009a      	lsls	r2, r3, #2
 80035cc:	441a      	add	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d8:	4b0c      	ldr	r3, [pc, #48]	@ (800360c <UART_SetConfig+0x118>)
 80035da:	fba3 0302 	umull	r0, r3, r3, r2
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	2064      	movs	r0, #100	@ 0x64
 80035e2:	fb00 f303 	mul.w	r3, r0, r3
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	3332      	adds	r3, #50	@ 0x32
 80035ec:	4a07      	ldr	r2, [pc, #28]	@ (800360c <UART_SetConfig+0x118>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	f003 020f 	and.w	r2, r3, #15
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	440a      	add	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40013800 	.word	0x40013800
 800360c:	51eb851f 	.word	0x51eb851f

08003610 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003616:	f3ef 8305 	mrs	r3, IPSR
 800361a:	60bb      	str	r3, [r7, #8]
  return(result);
 800361c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003622:	f3ef 8310 	mrs	r3, PRIMASK
 8003626:	607b      	str	r3, [r7, #4]
  return(result);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <osKernelInitialize+0x32>
 800362e:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <osKernelInitialize+0x60>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d109      	bne.n	800364a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003636:	f3ef 8311 	mrs	r3, BASEPRI
 800363a:	603b      	str	r3, [r7, #0]
  return(result);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003642:	f06f 0305 	mvn.w	r3, #5
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e00c      	b.n	8003664 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800364a:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <osKernelInitialize+0x60>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d105      	bne.n	800365e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003652:	4b07      	ldr	r3, [pc, #28]	@ (8003670 <osKernelInitialize+0x60>)
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	e002      	b.n	8003664 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
 8003662:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003664:	68fb      	ldr	r3, [r7, #12]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	200001f4 	.word	0x200001f4

08003674 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800367a:	f3ef 8305 	mrs	r3, IPSR
 800367e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003680:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003686:	f3ef 8310 	mrs	r3, PRIMASK
 800368a:	607b      	str	r3, [r7, #4]
  return(result);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <osKernelStart+0x32>
 8003692:	4b11      	ldr	r3, [pc, #68]	@ (80036d8 <osKernelStart+0x64>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d109      	bne.n	80036ae <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800369a:	f3ef 8311 	mrs	r3, BASEPRI
 800369e:	603b      	str	r3, [r7, #0]
  return(result);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80036a6:	f06f 0305 	mvn.w	r3, #5
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e00e      	b.n	80036cc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80036ae:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <osKernelStart+0x64>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80036b6:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <osKernelStart+0x64>)
 80036b8:	2202      	movs	r2, #2
 80036ba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80036bc:	f001 fcd6 	bl	800506c <vTaskStartScheduler>
      stat = osOK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e002      	b.n	80036cc <osKernelStart+0x58>
    } else {
      stat = osError;
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80036cc:	68fb      	ldr	r3, [r7, #12]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	200001f4 	.word	0x200001f4

080036dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b092      	sub	sp, #72	@ 0x48
 80036e0:	af04      	add	r7, sp, #16
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036ec:	f3ef 8305 	mrs	r3, IPSR
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f040 8095 	bne.w	8003824 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fa:	f3ef 8310 	mrs	r3, PRIMASK
 80036fe:	623b      	str	r3, [r7, #32]
  return(result);
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 808e 	bne.w	8003824 <osThreadNew+0x148>
 8003708:	4b49      	ldr	r3, [pc, #292]	@ (8003830 <osThreadNew+0x154>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d106      	bne.n	800371e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003710:	f3ef 8311 	mrs	r3, BASEPRI
 8003714:	61fb      	str	r3, [r7, #28]
  return(result);
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 8083 	bne.w	8003824 <osThreadNew+0x148>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d07f      	beq.n	8003824 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8003724:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003728:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800372a:	2318      	movs	r3, #24
 800372c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800372e:	2300      	movs	r3, #0
 8003730:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003732:	f107 031b 	add.w	r3, r7, #27
 8003736:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d045      	beq.n	80037d0 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <osThreadNew+0x76>
        name = attr->name;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <osThreadNew+0x9c>
 8003766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003768:	2b38      	cmp	r3, #56	@ 0x38
 800376a:	d805      	bhi.n	8003778 <osThreadNew+0x9c>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <osThreadNew+0xa0>
        return (NULL);
 8003778:	2300      	movs	r3, #0
 800377a:	e054      	b.n	8003826 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <osThreadNew+0xd6>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2ba7      	cmp	r3, #167	@ 0xa7
 800379a:	d90a      	bls.n	80037b2 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d006      	beq.n	80037b2 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <osThreadNew+0xd6>
        mem = 1;
 80037ac:	2301      	movs	r3, #1
 80037ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037b0:	e010      	b.n	80037d4 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <osThreadNew+0xf8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d108      	bne.n	80037d4 <osThreadNew+0xf8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d104      	bne.n	80037d4 <osThreadNew+0xf8>
          mem = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ce:	e001      	b.n	80037d4 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d110      	bne.n	80037fc <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037e2:	9202      	str	r2, [sp, #8]
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f001 fa87 	bl	8004d04 <xTaskCreateStatic>
 80037f6:	4603      	mov	r3, r0
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	e013      	b.n	8003824 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 80037fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d110      	bne.n	8003824 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	b29a      	uxth	r2, r3
 8003806:	f107 0314 	add.w	r3, r7, #20
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f001 fad4 	bl	8004dc2 <xTaskCreate>
 800381a:	4603      	mov	r3, r0
 800381c:	2b01      	cmp	r3, #1
 800381e:	d001      	beq.n	8003824 <osThreadNew+0x148>
          hTask = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003824:	697b      	ldr	r3, [r7, #20]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3738      	adds	r7, #56	@ 0x38
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200001f4 	.word	0x200001f4

08003834 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b08c      	sub	sp, #48	@ 0x30
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003844:	f3ef 8305 	mrs	r3, IPSR
 8003848:	61bb      	str	r3, [r7, #24]
  return(result);
 800384a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800384c:	2b00      	cmp	r3, #0
 800384e:	f040 8086 	bne.w	800395e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003852:	f3ef 8310 	mrs	r3, PRIMASK
 8003856:	617b      	str	r3, [r7, #20]
  return(result);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d17f      	bne.n	800395e <osSemaphoreNew+0x12a>
 800385e:	4b42      	ldr	r3, [pc, #264]	@ (8003968 <osSemaphoreNew+0x134>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d105      	bne.n	8003872 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003866:	f3ef 8311 	mrs	r3, BASEPRI
 800386a:	613b      	str	r3, [r7, #16]
  return(result);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d175      	bne.n	800395e <osSemaphoreNew+0x12a>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d072      	beq.n	800395e <osSemaphoreNew+0x12a>
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	429a      	cmp	r2, r3
 800387e:	d86e      	bhi.n	800395e <osSemaphoreNew+0x12a>
    mem = -1;
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
 8003884:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d015      	beq.n	80038b8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <osSemaphoreNew+0x6e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b4f      	cmp	r3, #79	@ 0x4f
 800389a:	d902      	bls.n	80038a2 <osSemaphoreNew+0x6e>
        mem = 1;
 800389c:	2301      	movs	r3, #1
 800389e:	623b      	str	r3, [r7, #32]
 80038a0:	e00c      	b.n	80038bc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d108      	bne.n	80038bc <osSemaphoreNew+0x88>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <osSemaphoreNew+0x88>
          mem = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]
 80038b6:	e001      	b.n	80038bc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d04c      	beq.n	800395e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d128      	bne.n	800391c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10a      	bne.n	80038e6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2203      	movs	r2, #3
 80038d6:	9200      	str	r2, [sp, #0]
 80038d8:	2200      	movs	r2, #0
 80038da:	2100      	movs	r1, #0
 80038dc:	2001      	movs	r0, #1
 80038de:	f000 fa51 	bl	8003d84 <xQueueGenericCreateStatic>
 80038e2:	6278      	str	r0, [r7, #36]	@ 0x24
 80038e4:	e005      	b.n	80038f2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80038e6:	2203      	movs	r2, #3
 80038e8:	2100      	movs	r1, #0
 80038ea:	2001      	movs	r0, #1
 80038ec:	f000 fac6 	bl	8003e7c <xQueueGenericCreate>
 80038f0:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d022      	beq.n	800393e <osSemaphoreNew+0x10a>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01f      	beq.n	800393e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80038fe:	2300      	movs	r3, #0
 8003900:	2200      	movs	r2, #0
 8003902:	2100      	movs	r1, #0
 8003904:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003906:	f000 fb89 	bl	800401c <xQueueGenericSend>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d016      	beq.n	800393e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8003910:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003912:	f001 f825 	bl	8004960 <vQueueDelete>
            hSemaphore = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
 800391a:	e010      	b.n	800393e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d108      	bne.n	8003934 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	461a      	mov	r2, r3
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fb08 	bl	8003f40 <xQueueCreateCountingSemaphoreStatic>
 8003930:	6278      	str	r0, [r7, #36]	@ 0x24
 8003932:	e004      	b.n	800393e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fb3b 	bl	8003fb2 <xQueueCreateCountingSemaphore>
 800393c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00c      	beq.n	800395e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <osSemaphoreNew+0x11e>
          name = attr->name;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e001      	b.n	8003956 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003956:	69f9      	ldr	r1, [r7, #28]
 8003958:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800395a:	f001 f94d 	bl	8004bf8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003960:	4618      	mov	r0, r3
 8003962:	3728      	adds	r7, #40	@ 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200001f4 	.word	0x200001f4

0800396c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003984:	f06f 0303 	mvn.w	r3, #3
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e04b      	b.n	8003a24 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800398c:	f3ef 8305 	mrs	r3, IPSR
 8003990:	617b      	str	r3, [r7, #20]
  return(result);
 8003992:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10f      	bne.n	80039b8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003998:	f3ef 8310 	mrs	r3, PRIMASK
 800399c:	613b      	str	r3, [r7, #16]
  return(result);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <osSemaphoreAcquire+0x4c>
 80039a4:	4b22      	ldr	r3, [pc, #136]	@ (8003a30 <osSemaphoreAcquire+0xc4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d128      	bne.n	80039fe <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039ac:	f3ef 8311 	mrs	r3, BASEPRI
 80039b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d022      	beq.n	80039fe <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80039be:	f06f 0303 	mvn.w	r3, #3
 80039c2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80039c4:	e02d      	b.n	8003a22 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	461a      	mov	r2, r3
 80039d0:	2100      	movs	r1, #0
 80039d2:	69b8      	ldr	r0, [r7, #24]
 80039d4:	f000 ff42 	bl	800485c <xQueueReceiveFromISR>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d003      	beq.n	80039e6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80039de:	f06f 0302 	mvn.w	r3, #2
 80039e2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80039e4:	e01d      	b.n	8003a22 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01a      	beq.n	8003a22 <osSemaphoreAcquire+0xb6>
 80039ec:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <osSemaphoreAcquire+0xc8>)
 80039ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80039fc:	e011      	b.n	8003a22 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80039fe:	6839      	ldr	r1, [r7, #0]
 8003a00:	69b8      	ldr	r0, [r7, #24]
 8003a02:	f000 fe1b 	bl	800463c <xQueueSemaphoreTake>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d00b      	beq.n	8003a24 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003a12:	f06f 0301 	mvn.w	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	e004      	b.n	8003a24 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003a1a:	f06f 0302 	mvn.w	r3, #2
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	e000      	b.n	8003a24 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003a22:	bf00      	nop
      }
    }
  }

  return (stat);
 8003a24:	69fb      	ldr	r3, [r7, #28]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200001f4 	.word	0x200001f4
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003a4e:	f06f 0303 	mvn.w	r3, #3
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	e03e      	b.n	8003ad4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a56:	f3ef 8305 	mrs	r3, IPSR
 8003a5a:	617b      	str	r3, [r7, #20]
  return(result);
 8003a5c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a62:	f3ef 8310 	mrs	r3, PRIMASK
 8003a66:	613b      	str	r3, [r7, #16]
  return(result);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <osSemaphoreRelease+0x4a>
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ae0 <osSemaphoreRelease+0xa8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d120      	bne.n	8003ab8 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a76:	f3ef 8311 	mrs	r3, BASEPRI
 8003a7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01a      	beq.n	8003ab8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	69b8      	ldr	r0, [r7, #24]
 8003a8e:	f000 fc62 	bl	8004356 <xQueueGiveFromISR>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d003      	beq.n	8003aa0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003a98:	f06f 0302 	mvn.w	r3, #2
 8003a9c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003a9e:	e018      	b.n	8003ad2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d015      	beq.n	8003ad2 <osSemaphoreRelease+0x9a>
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae4 <osSemaphoreRelease+0xac>)
 8003aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003ab6:	e00c      	b.n	8003ad2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2200      	movs	r2, #0
 8003abc:	2100      	movs	r1, #0
 8003abe:	69b8      	ldr	r0, [r7, #24]
 8003ac0:	f000 faac 	bl	800401c <xQueueGenericSend>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d004      	beq.n	8003ad4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003aca:	f06f 0302 	mvn.w	r3, #2
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	e000      	b.n	8003ad4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003ad2:	bf00      	nop
    }
  }

  return (stat);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200001f4 	.word	0x200001f4
 8003ae4:	e000ed04 	.word	0xe000ed04

08003ae8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a07      	ldr	r2, [pc, #28]	@ (8003b14 <vApplicationGetIdleTaskMemory+0x2c>)
 8003af8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4a06      	ldr	r2, [pc, #24]	@ (8003b18 <vApplicationGetIdleTaskMemory+0x30>)
 8003afe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b06:	601a      	str	r2, [r3, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	200001f8 	.word	0x200001f8
 8003b18:	200002a0 	.word	0x200002a0

08003b1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a07      	ldr	r2, [pc, #28]	@ (8003b48 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4a06      	ldr	r2, [pc, #24]	@ (8003b4c <vApplicationGetTimerTaskMemory+0x30>)
 8003b32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b3a:	601a      	str	r2, [r3, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000aa0 	.word	0x20000aa0
 8003b4c:	20000b48 	.word	0x20000b48

08003b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f103 0208 	add.w	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f103 0208 	add.w	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f103 0208 	add.w	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d103      	bne.n	8003c0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e00c      	b.n	8003c26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e002      	b.n	8003c1a <vListInsert+0x2e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d2f6      	bcs.n	8003c14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	601a      	str	r2, [r3, #0]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6892      	ldr	r2, [r2, #8]
 8003c72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6852      	ldr	r2, [r2, #4]
 8003c7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d103      	bne.n	8003c90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	1e5a      	subs	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
	...

08003cb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003cdc:	f002 fc2e 	bl	800653c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce8:	68f9      	ldr	r1, [r7, #12]
 8003cea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	441a      	add	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	441a      	add	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	22ff      	movs	r2, #255	@ 0xff
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	22ff      	movs	r2, #255	@ 0xff
 8003d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d114      	bne.n	8003d5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01a      	beq.n	8003d70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 fc34 	bl	80055ac <xTaskRemoveFromEventList>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d012      	beq.n	8003d70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d80 <xQueueGenericReset+0xd0>)
 8003d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	e009      	b.n	8003d70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3310      	adds	r3, #16
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fef5 	bl	8003b50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3324      	adds	r3, #36	@ 0x24
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fef0 	bl	8003b50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d70:	f002 fc14 	bl	800659c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d74:	2301      	movs	r3, #1
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08e      	sub	sp, #56	@ 0x38
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10b      	bne.n	8003db0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
 8003dae:	e7fd      	b.n	8003dac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	e7fd      	b.n	8003dca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <xQueueGenericCreateStatic+0x56>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <xQueueGenericCreateStatic+0x5a>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <xQueueGenericCreateStatic+0x5c>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	623b      	str	r3, [r7, #32]
}
 8003df6:	bf00      	nop
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <xQueueGenericCreateStatic+0x84>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <xQueueGenericCreateStatic+0x88>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <xQueueGenericCreateStatic+0x8a>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	61fb      	str	r3, [r7, #28]
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	e7fd      	b.n	8003e26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e2a:	2350      	movs	r3, #80	@ 0x50
 8003e2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b50      	cmp	r3, #80	@ 0x50
 8003e32:	d00b      	beq.n	8003e4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	61bb      	str	r3, [r7, #24]
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e5e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f844 	bl	8003efa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3730      	adds	r7, #48	@ 0x30
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	@ 0x28
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	613b      	str	r3, [r7, #16]
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	e004      	b.n	8003ebe <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3350      	adds	r3, #80	@ 0x50
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f002 fc3c 	bl	8006740 <pvPortMalloc>
 8003ec8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00f      	beq.n	8003ef0 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	3350      	adds	r3, #80	@ 0x50
 8003ed4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ede:	79fa      	ldrb	r2, [r7, #7]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f805 	bl	8003efa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
	}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e002      	b.n	8003f1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f28:	2101      	movs	r1, #1
 8003f2a:	69b8      	ldr	r0, [r7, #24]
 8003f2c:	f7ff fec0 	bl	8003cb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	61bb      	str	r3, [r7, #24]
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	e7fd      	b.n	8003f66 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d90b      	bls.n	8003f8a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	617b      	str	r3, [r7, #20]
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	e7fd      	b.n	8003f86 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2100      	movs	r1, #0
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff fef5 	bl	8003d84 <xQueueGenericCreateStatic>
 8003f9a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
	}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b086      	sub	sp, #24
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	613b      	str	r3, [r7, #16]
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d90b      	bls.n	8003ffa <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	60fb      	str	r3, [r7, #12]
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	e7fd      	b.n	8003ff6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff ff3c 	bl	8003e7c <xQueueGenericCreate>
 8004004:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004012:	697b      	ldr	r3, [r7, #20]
	}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08e      	sub	sp, #56	@ 0x38
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800402a:	2300      	movs	r3, #0
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10b      	bne.n	8004050 <xQueueGenericSend+0x34>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	e7fd      	b.n	800404c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <xQueueGenericSend+0x42>
 8004056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <xQueueGenericSend+0x46>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <xQueueGenericSend+0x48>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <xQueueGenericSend+0x64>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	e7fd      	b.n	800407c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d103      	bne.n	800408e <xQueueGenericSend+0x72>
 8004086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <xQueueGenericSend+0x76>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <xQueueGenericSend+0x78>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <xQueueGenericSend+0x94>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	623b      	str	r3, [r7, #32]
}
 80040aa:	bf00      	nop
 80040ac:	bf00      	nop
 80040ae:	e7fd      	b.n	80040ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040b0:	f001 fc46 	bl	8005940 <xTaskGetSchedulerState>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <xQueueGenericSend+0xa4>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <xQueueGenericSend+0xa8>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <xQueueGenericSend+0xaa>
 80040c4:	2300      	movs	r3, #0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	61fb      	str	r3, [r7, #28]
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	e7fd      	b.n	80040de <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040e2:	f002 fa2b 	bl	800653c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <xQueueGenericSend+0xdc>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d129      	bne.n	800414c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040fe:	f000 fc6a 	bl	80049d6 <prvCopyDataToQueue>
 8004102:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d010      	beq.n	800412e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410e:	3324      	adds	r3, #36	@ 0x24
 8004110:	4618      	mov	r0, r3
 8004112:	f001 fa4b 	bl	80055ac <xTaskRemoveFromEventList>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d013      	beq.n	8004144 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800411c:	4b3f      	ldr	r3, [pc, #252]	@ (800421c <xQueueGenericSend+0x200>)
 800411e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	e00a      	b.n	8004144 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800412e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004134:	4b39      	ldr	r3, [pc, #228]	@ (800421c <xQueueGenericSend+0x200>)
 8004136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004144:	f002 fa2a 	bl	800659c <vPortExitCritical>
				return pdPASS;
 8004148:	2301      	movs	r3, #1
 800414a:	e063      	b.n	8004214 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d103      	bne.n	800415a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004152:	f002 fa23 	bl	800659c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004156:	2300      	movs	r3, #0
 8004158:	e05c      	b.n	8004214 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800415a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004160:	f107 0314 	add.w	r3, r7, #20
 8004164:	4618      	mov	r0, r3
 8004166:	f001 fa85 	bl	8005674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800416a:	2301      	movs	r3, #1
 800416c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800416e:	f002 fa15 	bl	800659c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004172:	f000 ffeb 	bl	800514c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004176:	f002 f9e1 	bl	800653c <vPortEnterCritical>
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004180:	b25b      	sxtb	r3, r3
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d103      	bne.n	8004190 <xQueueGenericSend+0x174>
 8004188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d103      	bne.n	80041a6 <xQueueGenericSend+0x18a>
 800419e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041a6:	f002 f9f9 	bl	800659c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041aa:	1d3a      	adds	r2, r7, #4
 80041ac:	f107 0314 	add.w	r3, r7, #20
 80041b0:	4611      	mov	r1, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 fa74 	bl	80056a0 <xTaskCheckForTimeOut>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d124      	bne.n	8004208 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041c0:	f000 fd01 	bl	8004bc6 <prvIsQueueFull>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d018      	beq.n	80041fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041cc:	3310      	adds	r3, #16
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f001 f998 	bl	8005508 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041da:	f000 fc8c 	bl	8004af6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041de:	f000 ffc3 	bl	8005168 <xTaskResumeAll>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f47f af7c 	bne.w	80040e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80041ea:	4b0c      	ldr	r3, [pc, #48]	@ (800421c <xQueueGenericSend+0x200>)
 80041ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	e772      	b.n	80040e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041fe:	f000 fc7a 	bl	8004af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004202:	f000 ffb1 	bl	8005168 <xTaskResumeAll>
 8004206:	e76c      	b.n	80040e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800420a:	f000 fc74 	bl	8004af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800420e:	f000 ffab 	bl	8005168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004212:	2300      	movs	r3, #0
		}
	}
}
 8004214:	4618      	mov	r0, r3
 8004216:	3738      	adds	r7, #56	@ 0x38
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08e      	sub	sp, #56	@ 0x38
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800424a:	bf00      	nop
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <xQueueGenericSendFromISR+0x3e>
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <xQueueGenericSendFromISR+0x42>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueGenericSendFromISR+0x44>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	623b      	str	r3, [r7, #32]
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d103      	bne.n	800428e <xQueueGenericSendFromISR+0x6e>
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <xQueueGenericSendFromISR+0x72>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <xQueueGenericSendFromISR+0x74>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	61fb      	str	r3, [r7, #28]
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	e7fd      	b.n	80042ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042b0:	f002 fa06 	bl	80066c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042b4:	f3ef 8211 	mrs	r2, BASEPRI
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	61ba      	str	r2, [r7, #24]
 80042ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d8:	429a      	cmp	r2, r3
 80042da:	d302      	bcc.n	80042e2 <xQueueGenericSendFromISR+0xc2>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d12c      	bne.n	800433c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042f2:	f000 fb70 	bl	80049d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fe:	d112      	bne.n	8004326 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d016      	beq.n	8004336 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	3324      	adds	r3, #36	@ 0x24
 800430c:	4618      	mov	r0, r3
 800430e:	f001 f94d 	bl	80055ac <xTaskRemoveFromEventList>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00e      	beq.n	8004336 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e007      	b.n	8004336 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004326:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800432a:	3301      	adds	r3, #1
 800432c:	b2db      	uxtb	r3, r3
 800432e:	b25a      	sxtb	r2, r3
 8004330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004336:	2301      	movs	r3, #1
 8004338:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800433a:	e001      	b.n	8004340 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800433c:	2300      	movs	r3, #0
 800433e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004342:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800434a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800434c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800434e:	4618      	mov	r0, r3
 8004350:	3738      	adds	r7, #56	@ 0x38
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b08e      	sub	sp, #56	@ 0x38
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10b      	bne.n	8004382 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	623b      	str	r3, [r7, #32]
}
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	e7fd      	b.n	800437e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00b      	beq.n	80043a2 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	61fb      	str	r3, [r7, #28]
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	e7fd      	b.n	800439e <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80043a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <xQueueGiveFromISR+0x5c>
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <xQueueGiveFromISR+0x60>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <xQueueGiveFromISR+0x62>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	61bb      	str	r3, [r7, #24]
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043d4:	f002 f974 	bl	80066c0 <vPortValidateInterruptPriority>
	__asm volatile
 80043d8:	f3ef 8211 	mrs	r2, BASEPRI
 80043dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	617a      	str	r2, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80043f0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80043fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004400:	429a      	cmp	r2, r3
 8004402:	d22b      	bcs.n	800445c <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800440a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004416:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d112      	bne.n	8004446 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d016      	beq.n	8004456 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442a:	3324      	adds	r3, #36	@ 0x24
 800442c:	4618      	mov	r0, r3
 800442e:	f001 f8bd 	bl	80055ac <xTaskRemoveFromEventList>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e007      	b.n	8004456 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004446:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800444a:	3301      	adds	r3, #1
 800444c:	b2db      	uxtb	r3, r3
 800444e:	b25a      	sxtb	r2, r3
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004456:	2301      	movs	r3, #1
 8004458:	637b      	str	r3, [r7, #52]	@ 0x34
 800445a:	e001      	b.n	8004460 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800445c:	2300      	movs	r3, #0
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004462:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f383 8811 	msr	BASEPRI, r3
}
 800446a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800446c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800446e:	4618      	mov	r0, r3
 8004470:	3738      	adds	r7, #56	@ 0x38
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08c      	sub	sp, #48	@ 0x30
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800448c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <xQueueReceive+0x32>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	623b      	str	r3, [r7, #32]
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	e7fd      	b.n	80044a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <xQueueReceive+0x40>
 80044b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <xQueueReceive+0x44>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <xQueueReceive+0x46>
 80044bc:	2300      	movs	r3, #0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <xQueueReceive+0x62>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	61fb      	str	r3, [r7, #28]
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044da:	f001 fa31 	bl	8005940 <xTaskGetSchedulerState>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <xQueueReceive+0x72>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <xQueueReceive+0x76>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <xQueueReceive+0x78>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <xQueueReceive+0x94>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	61bb      	str	r3, [r7, #24]
}
 8004506:	bf00      	nop
 8004508:	bf00      	nop
 800450a:	e7fd      	b.n	8004508 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800450c:	f002 f816 	bl	800653c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01f      	beq.n	800455c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004520:	f000 fac3 	bl	8004aaa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	1e5a      	subs	r2, r3, #1
 8004528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800452c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00f      	beq.n	8004554 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004536:	3310      	adds	r3, #16
 8004538:	4618      	mov	r0, r3
 800453a:	f001 f837 	bl	80055ac <xTaskRemoveFromEventList>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004544:	4b3c      	ldr	r3, [pc, #240]	@ (8004638 <xQueueReceive+0x1c0>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004554:	f002 f822 	bl	800659c <vPortExitCritical>
				return pdPASS;
 8004558:	2301      	movs	r3, #1
 800455a:	e069      	b.n	8004630 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004562:	f002 f81b 	bl	800659c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004566:	2300      	movs	r3, #0
 8004568:	e062      	b.n	8004630 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800456a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d106      	bne.n	800457e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004570:	f107 0310 	add.w	r3, r7, #16
 8004574:	4618      	mov	r0, r3
 8004576:	f001 f87d 	bl	8005674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800457a:	2301      	movs	r3, #1
 800457c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800457e:	f002 f80d 	bl	800659c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004582:	f000 fde3 	bl	800514c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004586:	f001 ffd9 	bl	800653c <vPortEnterCritical>
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004590:	b25b      	sxtb	r3, r3
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d103      	bne.n	80045a0 <xQueueReceive+0x128>
 8004598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045a6:	b25b      	sxtb	r3, r3
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d103      	bne.n	80045b6 <xQueueReceive+0x13e>
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045b6:	f001 fff1 	bl	800659c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045ba:	1d3a      	adds	r2, r7, #4
 80045bc:	f107 0310 	add.w	r3, r7, #16
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f001 f86c 	bl	80056a0 <xTaskCheckForTimeOut>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d123      	bne.n	8004616 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045d0:	f000 fae3 	bl	8004b9a <prvIsQueueEmpty>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d017      	beq.n	800460a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045dc:	3324      	adds	r3, #36	@ 0x24
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	4611      	mov	r1, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 ff90 	bl	8005508 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045ea:	f000 fa84 	bl	8004af6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045ee:	f000 fdbb 	bl	8005168 <xTaskResumeAll>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d189      	bne.n	800450c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80045f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004638 <xQueueReceive+0x1c0>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	e780      	b.n	800450c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800460a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800460c:	f000 fa73 	bl	8004af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004610:	f000 fdaa 	bl	8005168 <xTaskResumeAll>
 8004614:	e77a      	b.n	800450c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004618:	f000 fa6d 	bl	8004af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800461c:	f000 fda4 	bl	8005168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004622:	f000 faba 	bl	8004b9a <prvIsQueueEmpty>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	f43f af6f 	beq.w	800450c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800462e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004630:	4618      	mov	r0, r3
 8004632:	3730      	adds	r7, #48	@ 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08e      	sub	sp, #56	@ 0x38
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004646:	2300      	movs	r3, #0
 8004648:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800464e:	2300      	movs	r3, #0
 8004650:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10b      	bne.n	8004670 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	623b      	str	r3, [r7, #32]
}
 800466a:	bf00      	nop
 800466c:	bf00      	nop
 800466e:	e7fd      	b.n	800466c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	61fb      	str	r3, [r7, #28]
}
 800468a:	bf00      	nop
 800468c:	bf00      	nop
 800468e:	e7fd      	b.n	800468c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004690:	f001 f956 	bl	8005940 <xTaskGetSchedulerState>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <xQueueSemaphoreTake+0x64>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <xQueueSemaphoreTake+0x68>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <xQueueSemaphoreTake+0x6a>
 80046a4:	2300      	movs	r3, #0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	61bb      	str	r3, [r7, #24]
}
 80046bc:	bf00      	nop
 80046be:	bf00      	nop
 80046c0:	e7fd      	b.n	80046be <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80046c2:	f001 ff3b 	bl	800653c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d024      	beq.n	800471c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80046d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d4:	1e5a      	subs	r2, r3, #1
 80046d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d104      	bne.n	80046ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80046e2:	f001 fab1 	bl	8005c48 <pvTaskIncrementMutexHeldCount>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ea:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00f      	beq.n	8004714 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f6:	3310      	adds	r3, #16
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 ff57 	bl	80055ac <xTaskRemoveFromEventList>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004704:	4b54      	ldr	r3, [pc, #336]	@ (8004858 <xQueueSemaphoreTake+0x21c>)
 8004706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004714:	f001 ff42 	bl	800659c <vPortExitCritical>
				return pdPASS;
 8004718:	2301      	movs	r3, #1
 800471a:	e098      	b.n	800484e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d112      	bne.n	8004748 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	617b      	str	r3, [r7, #20]
}
 800473a:	bf00      	nop
 800473c:	bf00      	nop
 800473e:	e7fd      	b.n	800473c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004740:	f001 ff2c 	bl	800659c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004744:	2300      	movs	r3, #0
 8004746:	e082      	b.n	800484e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800474e:	f107 030c 	add.w	r3, r7, #12
 8004752:	4618      	mov	r0, r3
 8004754:	f000 ff8e 	bl	8005674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004758:	2301      	movs	r3, #1
 800475a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800475c:	f001 ff1e 	bl	800659c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004760:	f000 fcf4 	bl	800514c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004764:	f001 feea 	bl	800653c <vPortEnterCritical>
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800476e:	b25b      	sxtb	r3, r3
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d103      	bne.n	800477e <xQueueSemaphoreTake+0x142>
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800477e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004780:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004784:	b25b      	sxtb	r3, r3
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d103      	bne.n	8004794 <xQueueSemaphoreTake+0x158>
 800478c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004794:	f001 ff02 	bl	800659c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004798:	463a      	mov	r2, r7
 800479a:	f107 030c 	add.w	r3, r7, #12
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 ff7d 	bl	80056a0 <xTaskCheckForTimeOut>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d132      	bne.n	8004812 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80047ae:	f000 f9f4 	bl	8004b9a <prvIsQueueEmpty>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d026      	beq.n	8004806 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d109      	bne.n	80047d4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80047c0:	f001 febc 	bl	800653c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80047c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 f8d7 	bl	800597c <xTaskPriorityInherit>
 80047ce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80047d0:	f001 fee4 	bl	800659c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d6:	3324      	adds	r3, #36	@ 0x24
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	4611      	mov	r1, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fe93 	bl	8005508 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80047e4:	f000 f987 	bl	8004af6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047e8:	f000 fcbe 	bl	8005168 <xTaskResumeAll>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f47f af67 	bne.w	80046c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80047f4:	4b18      	ldr	r3, [pc, #96]	@ (8004858 <xQueueSemaphoreTake+0x21c>)
 80047f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	e75d      	b.n	80046c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004806:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004808:	f000 f975 	bl	8004af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800480c:	f000 fcac 	bl	8005168 <xTaskResumeAll>
 8004810:	e757      	b.n	80046c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004812:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004814:	f000 f96f 	bl	8004af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004818:	f000 fca6 	bl	8005168 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800481c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800481e:	f000 f9bc 	bl	8004b9a <prvIsQueueEmpty>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	f43f af4c 	beq.w	80046c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004830:	f001 fe84 	bl	800653c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004834:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004836:	f000 f8b7 	bl	80049a8 <prvGetDisinheritPriorityAfterTimeout>
 800483a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004842:	4618      	mov	r0, r3
 8004844:	f001 f978 	bl	8005b38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004848:	f001 fea8 	bl	800659c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800484c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800484e:	4618      	mov	r0, r3
 8004850:	3738      	adds	r7, #56	@ 0x38
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08e      	sub	sp, #56	@ 0x38
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	623b      	str	r3, [r7, #32]
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <xQueueReceiveFromISR+0x3c>
 8004890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <xQueueReceiveFromISR+0x40>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <xQueueReceiveFromISR+0x42>
 800489c:	2300      	movs	r3, #0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	61fb      	str	r3, [r7, #28]
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	e7fd      	b.n	80048b6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048ba:	f001 ff01 	bl	80066c0 <vPortValidateInterruptPriority>
	__asm volatile
 80048be:	f3ef 8211 	mrs	r2, BASEPRI
 80048c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	61ba      	str	r2, [r7, #24]
 80048d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80048d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d02f      	beq.n	8004946 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80048e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048f4:	f000 f8d9 	bl	8004aaa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004900:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d112      	bne.n	8004930 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800490a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d016      	beq.n	8004940 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004914:	3310      	adds	r3, #16
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fe48 	bl	80055ac <xTaskRemoveFromEventList>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00e      	beq.n	8004940 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00b      	beq.n	8004940 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e007      	b.n	8004940 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004934:	3301      	adds	r3, #1
 8004936:	b2db      	uxtb	r3, r3
 8004938:	b25a      	sxtb	r2, r3
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004940:	2301      	movs	r3, #1
 8004942:	637b      	str	r3, [r7, #52]	@ 0x34
 8004944:	e001      	b.n	800494a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004946:	2300      	movs	r3, #0
 8004948:	637b      	str	r3, [r7, #52]	@ 0x34
 800494a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f383 8811 	msr	BASEPRI, r3
}
 8004954:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004958:	4618      	mov	r0, r3
 800495a:	3738      	adds	r7, #56	@ 0x38
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10b      	bne.n	800498a <vQueueDelete+0x2a>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	60bb      	str	r3, [r7, #8]
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	e7fd      	b.n	8004986 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f95c 	bl	8004c48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f001 ff98 	bl	80068d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d006      	beq.n	80049c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e001      	b.n	80049ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80049ca:	68fb      	ldr	r3, [r7, #12]
	}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b086      	sub	sp, #24
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10d      	bne.n	8004a10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d14d      	bne.n	8004a98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 f829 	bl	8005a58 <xTaskPriorityDisinherit>
 8004a06:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	e043      	b.n	8004a98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d119      	bne.n	8004a4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6898      	ldr	r0, [r3, #8]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	f002 f8ef 	bl	8006c04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	441a      	add	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d32b      	bcc.n	8004a98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]
 8004a48:	e026      	b.n	8004a98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68d8      	ldr	r0, [r3, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	461a      	mov	r2, r3
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	f002 f8d5 	bl	8006c04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	425b      	negs	r3, r3
 8004a64:	441a      	add	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d207      	bcs.n	8004a86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	425b      	negs	r3, r3
 8004a80:	441a      	add	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d105      	bne.n	8004a98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004aa0:	697b      	ldr	r3, [r7, #20]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d018      	beq.n	8004aee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac4:	441a      	add	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d303      	bcc.n	8004ade <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68d9      	ldr	r1, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	6838      	ldr	r0, [r7, #0]
 8004aea:	f002 f88b 	bl	8006c04 <memcpy>
	}
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004afe:	f001 fd1d 	bl	800653c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b0a:	e011      	b.n	8004b30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d012      	beq.n	8004b3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3324      	adds	r3, #36	@ 0x24
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fd47 	bl	80055ac <xTaskRemoveFromEventList>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b24:	f000 fe20 	bl	8005768 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	dce9      	bgt.n	8004b0c <prvUnlockQueue+0x16>
 8004b38:	e000      	b.n	8004b3c <prvUnlockQueue+0x46>
					break;
 8004b3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	22ff      	movs	r2, #255	@ 0xff
 8004b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004b44:	f001 fd2a 	bl	800659c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b48:	f001 fcf8 	bl	800653c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b54:	e011      	b.n	8004b7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d012      	beq.n	8004b84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3310      	adds	r3, #16
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fd22 	bl	80055ac <xTaskRemoveFromEventList>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b6e:	f000 fdfb 	bl	8005768 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b72:	7bbb      	ldrb	r3, [r7, #14]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	dce9      	bgt.n	8004b56 <prvUnlockQueue+0x60>
 8004b82:	e000      	b.n	8004b86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	22ff      	movs	r2, #255	@ 0xff
 8004b8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004b8e:	f001 fd05 	bl	800659c <vPortExitCritical>
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ba2:	f001 fccb 	bl	800653c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d102      	bne.n	8004bb4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e001      	b.n	8004bb8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bb8:	f001 fcf0 	bl	800659c <vPortExitCritical>

	return xReturn;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bce:	f001 fcb5 	bl	800653c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d102      	bne.n	8004be4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bde:	2301      	movs	r3, #1
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	e001      	b.n	8004be8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004be8:	f001 fcd8 	bl	800659c <vPortExitCritical>

	return xReturn;
 8004bec:	68fb      	ldr	r3, [r7, #12]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	e014      	b.n	8004c32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c08:	4a0e      	ldr	r2, [pc, #56]	@ (8004c44 <vQueueAddToRegistry+0x4c>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c14:	490b      	ldr	r1, [pc, #44]	@ (8004c44 <vQueueAddToRegistry+0x4c>)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c1e:	4a09      	ldr	r2, [pc, #36]	@ (8004c44 <vQueueAddToRegistry+0x4c>)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4413      	add	r3, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c2a:	e006      	b.n	8004c3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b07      	cmp	r3, #7
 8004c36:	d9e7      	bls.n	8004c08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr
 8004c44:	20001b48 	.word	0x20001b48

08004c48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e016      	b.n	8004c84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004c56:	4a10      	ldr	r2, [pc, #64]	@ (8004c98 <vQueueUnregisterQueue+0x50>)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d10b      	bne.n	8004c7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004c66:	4a0c      	ldr	r2, [pc, #48]	@ (8004c98 <vQueueUnregisterQueue+0x50>)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004c70:	4a09      	ldr	r2, [pc, #36]	@ (8004c98 <vQueueUnregisterQueue+0x50>)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4413      	add	r3, r2
 8004c78:	2200      	movs	r2, #0
 8004c7a:	605a      	str	r2, [r3, #4]
				break;
 8004c7c:	e006      	b.n	8004c8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b07      	cmp	r3, #7
 8004c88:	d9e5      	bls.n	8004c56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004c8a:	bf00      	nop
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20001b48 	.word	0x20001b48

08004c9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cac:	f001 fc46 	bl	800653c <vPortEnterCritical>
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cb6:	b25b      	sxtb	r3, r3
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d103      	bne.n	8004cc6 <vQueueWaitForMessageRestricted+0x2a>
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ccc:	b25b      	sxtb	r3, r3
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd2:	d103      	bne.n	8004cdc <vQueueWaitForMessageRestricted+0x40>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cdc:	f001 fc5e 	bl	800659c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3324      	adds	r3, #36	@ 0x24
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fc2f 	bl	8005554 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004cf6:	6978      	ldr	r0, [r7, #20]
 8004cf8:	f7ff fefd 	bl	8004af6 <prvUnlockQueue>
	}
 8004cfc:	bf00      	nop
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08e      	sub	sp, #56	@ 0x38
 8004d08:	af04      	add	r7, sp, #16
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10b      	bne.n	8004d30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	623b      	str	r3, [r7, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	e7fd      	b.n	8004d2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10b      	bne.n	8004d4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	61fb      	str	r3, [r7, #28]
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d4e:	23a8      	movs	r3, #168	@ 0xa8
 8004d50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2ba8      	cmp	r3, #168	@ 0xa8
 8004d56:	d00b      	beq.n	8004d70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	61bb      	str	r3, [r7, #24]
}
 8004d6a:	bf00      	nop
 8004d6c:	bf00      	nop
 8004d6e:	e7fd      	b.n	8004d6c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01e      	beq.n	8004db4 <xTaskCreateStatic+0xb0>
 8004d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01b      	beq.n	8004db4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d84:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9303      	str	r3, [sp, #12]
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	9302      	str	r3, [sp, #8]
 8004d96:	f107 0314 	add.w	r3, r7, #20
 8004d9a:	9301      	str	r3, [sp, #4]
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f850 	bl	8004e4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dae:	f000 f8ed 	bl	8004f8c <prvAddNewTaskToReadyList>
 8004db2:	e001      	b.n	8004db8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004db8:	697b      	ldr	r3, [r7, #20]
	}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3728      	adds	r7, #40	@ 0x28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b08c      	sub	sp, #48	@ 0x30
 8004dc6:	af04      	add	r7, sp, #16
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 fcb2 	bl	8006740 <pvPortMalloc>
 8004ddc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00e      	beq.n	8004e02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004de4:	20a8      	movs	r0, #168	@ 0xa8
 8004de6:	f001 fcab 	bl	8006740 <pvPortMalloc>
 8004dea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004df8:	e005      	b.n	8004e06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004dfa:	6978      	ldr	r0, [r7, #20]
 8004dfc:	f001 fd68 	bl	80068d0 <vPortFree>
 8004e00:	e001      	b.n	8004e06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d017      	beq.n	8004e3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e14:	88fa      	ldrh	r2, [r7, #6]
 8004e16:	2300      	movs	r3, #0
 8004e18:	9303      	str	r3, [sp, #12]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	9302      	str	r3, [sp, #8]
 8004e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f80e 	bl	8004e4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e30:	69f8      	ldr	r0, [r7, #28]
 8004e32:	f000 f8ab 	bl	8004f8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e36:	2301      	movs	r3, #1
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	e002      	b.n	8004e42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e42:	69bb      	ldr	r3, [r7, #24]
	}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3720      	adds	r7, #32
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	461a      	mov	r2, r3
 8004e64:	21a5      	movs	r1, #165	@ 0xa5
 8004e66:	f001 fe49 	bl	8006afc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e74:	3b01      	subs	r3, #1
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f023 0307 	bic.w	r3, r3, #7
 8004e82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	617b      	str	r3, [r7, #20]
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	e7fd      	b.n	8004ea2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	e012      	b.n	8004ed2 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	7819      	ldrb	r1, [r3, #0]
 8004eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	3334      	adds	r3, #52	@ 0x34
 8004ebc:	460a      	mov	r2, r1
 8004ebe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d006      	beq.n	8004eda <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2b0f      	cmp	r3, #15
 8004ed6:	d9e9      	bls.n	8004eac <prvInitialiseNewTask+0x60>
 8004ed8:	e000      	b.n	8004edc <prvInitialiseNewTask+0x90>
		{
			break;
 8004eda:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee6:	2b37      	cmp	r3, #55	@ 0x37
 8004ee8:	d901      	bls.n	8004eee <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004eea:	2337      	movs	r3, #55	@ 0x37
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ef8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	2200      	movs	r2, #0
 8004efe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f02:	3304      	adds	r3, #4
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe fe42 	bl	8003b8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	3318      	adds	r3, #24
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe fe3d 	bl	8003b8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f28:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	3354      	adds	r3, #84	@ 0x54
 8004f3e:	224c      	movs	r2, #76	@ 0x4c
 8004f40:	2100      	movs	r1, #0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 fdda 	bl	8006afc <memset>
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f80 <prvInitialiseNewTask+0x134>)
 8004f4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f50:	4a0c      	ldr	r2, [pc, #48]	@ (8004f84 <prvInitialiseNewTask+0x138>)
 8004f52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f56:	4a0c      	ldr	r2, [pc, #48]	@ (8004f88 <prvInitialiseNewTask+0x13c>)
 8004f58:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	68f9      	ldr	r1, [r7, #12]
 8004f5e:	69b8      	ldr	r0, [r7, #24]
 8004f60:	f001 f9fa 	bl	8006358 <pxPortInitialiseStack>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f76:	bf00      	nop
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	200041d4 	.word	0x200041d4
 8004f84:	2000423c 	.word	0x2000423c
 8004f88:	200042a4 	.word	0x200042a4

08004f8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f94:	f001 fad2 	bl	800653c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f98:	4b2d      	ldr	r3, [pc, #180]	@ (8005050 <prvAddNewTaskToReadyList+0xc4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005050 <prvAddNewTaskToReadyList+0xc4>)
 8004fa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004faa:	4a2a      	ldr	r2, [pc, #168]	@ (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fb0:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <prvAddNewTaskToReadyList+0xc4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d110      	bne.n	8004fda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fb8:	f000 fbfa 	bl	80057b0 <prvInitialiseTaskLists>
 8004fbc:	e00d      	b.n	8004fda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fbe:	4b26      	ldr	r3, [pc, #152]	@ (8005058 <prvAddNewTaskToReadyList+0xcc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fc6:	4b23      	ldr	r3, [pc, #140]	@ (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d802      	bhi.n	8004fda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fda:	4b20      	ldr	r3, [pc, #128]	@ (800505c <prvAddNewTaskToReadyList+0xd0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800505c <prvAddNewTaskToReadyList+0xd0>)
 8004fe2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800505c <prvAddNewTaskToReadyList+0xd0>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8005060 <prvAddNewTaskToReadyList+0xd4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d903      	bls.n	8005000 <prvAddNewTaskToReadyList+0x74>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	4a18      	ldr	r2, [pc, #96]	@ (8005060 <prvAddNewTaskToReadyList+0xd4>)
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4a15      	ldr	r2, [pc, #84]	@ (8005064 <prvAddNewTaskToReadyList+0xd8>)
 800500e:	441a      	add	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f7fe fdc5 	bl	8003ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800501c:	f001 fabe 	bl	800659c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005020:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <prvAddNewTaskToReadyList+0xcc>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00e      	beq.n	8005046 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005028:	4b0a      	ldr	r3, [pc, #40]	@ (8005054 <prvAddNewTaskToReadyList+0xc8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005032:	429a      	cmp	r2, r3
 8005034:	d207      	bcs.n	8005046 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005036:	4b0c      	ldr	r3, [pc, #48]	@ (8005068 <prvAddNewTaskToReadyList+0xdc>)
 8005038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	2000205c 	.word	0x2000205c
 8005054:	20001b88 	.word	0x20001b88
 8005058:	20002068 	.word	0x20002068
 800505c:	20002078 	.word	0x20002078
 8005060:	20002064 	.word	0x20002064
 8005064:	20001b8c 	.word	0x20001b8c
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	@ 0x28
 8005070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800507a:	463a      	mov	r2, r7
 800507c:	1d39      	adds	r1, r7, #4
 800507e:	f107 0308 	add.w	r3, r7, #8
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe fd30 	bl	8003ae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	9202      	str	r2, [sp, #8]
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	2300      	movs	r3, #0
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	2300      	movs	r3, #0
 8005098:	460a      	mov	r2, r1
 800509a:	4924      	ldr	r1, [pc, #144]	@ (800512c <vTaskStartScheduler+0xc0>)
 800509c:	4824      	ldr	r0, [pc, #144]	@ (8005130 <vTaskStartScheduler+0xc4>)
 800509e:	f7ff fe31 	bl	8004d04 <xTaskCreateStatic>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4a23      	ldr	r2, [pc, #140]	@ (8005134 <vTaskStartScheduler+0xc8>)
 80050a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050a8:	4b22      	ldr	r3, [pc, #136]	@ (8005134 <vTaskStartScheduler+0xc8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050b0:	2301      	movs	r3, #1
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	e001      	b.n	80050ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d102      	bne.n	80050c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050c0:	f000 fe2a 	bl	8005d18 <xTimerCreateTimerTask>
 80050c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d11b      	bne.n	8005104 <vTaskStartScheduler+0x98>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	613b      	str	r3, [r7, #16]
}
 80050de:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050e0:	4b15      	ldr	r3, [pc, #84]	@ (8005138 <vTaskStartScheduler+0xcc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3354      	adds	r3, #84	@ 0x54
 80050e6:	4a15      	ldr	r2, [pc, #84]	@ (800513c <vTaskStartScheduler+0xd0>)
 80050e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050ea:	4b15      	ldr	r3, [pc, #84]	@ (8005140 <vTaskStartScheduler+0xd4>)
 80050ec:	f04f 32ff 	mov.w	r2, #4294967295
 80050f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050f2:	4b14      	ldr	r3, [pc, #80]	@ (8005144 <vTaskStartScheduler+0xd8>)
 80050f4:	2201      	movs	r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80050f8:	4b13      	ldr	r3, [pc, #76]	@ (8005148 <vTaskStartScheduler+0xdc>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050fe:	f001 f9ab 	bl	8006458 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005102:	e00f      	b.n	8005124 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510a:	d10b      	bne.n	8005124 <vTaskStartScheduler+0xb8>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	60fb      	str	r3, [r7, #12]
}
 800511e:	bf00      	nop
 8005120:	bf00      	nop
 8005122:	e7fd      	b.n	8005120 <vTaskStartScheduler+0xb4>
}
 8005124:	bf00      	nop
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	08006d00 	.word	0x08006d00
 8005130:	08005781 	.word	0x08005781
 8005134:	20002080 	.word	0x20002080
 8005138:	20001b88 	.word	0x20001b88
 800513c:	20000010 	.word	0x20000010
 8005140:	2000207c 	.word	0x2000207c
 8005144:	20002068 	.word	0x20002068
 8005148:	20002060 	.word	0x20002060

0800514c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005150:	4b04      	ldr	r3, [pc, #16]	@ (8005164 <vTaskSuspendAll+0x18>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	4a03      	ldr	r2, [pc, #12]	@ (8005164 <vTaskSuspendAll+0x18>)
 8005158:	6013      	str	r3, [r2, #0]
}
 800515a:	bf00      	nop
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20002084 	.word	0x20002084

08005168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005172:	2300      	movs	r3, #0
 8005174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005176:	4b42      	ldr	r3, [pc, #264]	@ (8005280 <xTaskResumeAll+0x118>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <xTaskResumeAll+0x2e>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	603b      	str	r3, [r7, #0]
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	e7fd      	b.n	8005192 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005196:	f001 f9d1 	bl	800653c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800519a:	4b39      	ldr	r3, [pc, #228]	@ (8005280 <xTaskResumeAll+0x118>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3b01      	subs	r3, #1
 80051a0:	4a37      	ldr	r2, [pc, #220]	@ (8005280 <xTaskResumeAll+0x118>)
 80051a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051a4:	4b36      	ldr	r3, [pc, #216]	@ (8005280 <xTaskResumeAll+0x118>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d162      	bne.n	8005272 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051ac:	4b35      	ldr	r3, [pc, #212]	@ (8005284 <xTaskResumeAll+0x11c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d05e      	beq.n	8005272 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051b4:	e02f      	b.n	8005216 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80051b6:	4b34      	ldr	r3, [pc, #208]	@ (8005288 <xTaskResumeAll+0x120>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3318      	adds	r3, #24
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fe fd4a 	bl	8003c5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fe fd45 	bl	8003c5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d6:	4b2d      	ldr	r3, [pc, #180]	@ (800528c <xTaskResumeAll+0x124>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d903      	bls.n	80051e6 <xTaskResumeAll+0x7e>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	4a2a      	ldr	r2, [pc, #168]	@ (800528c <xTaskResumeAll+0x124>)
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4a27      	ldr	r2, [pc, #156]	@ (8005290 <xTaskResumeAll+0x128>)
 80051f4:	441a      	add	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4619      	mov	r1, r3
 80051fc:	4610      	mov	r0, r2
 80051fe:	f7fe fcd2 	bl	8003ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005206:	4b23      	ldr	r3, [pc, #140]	@ (8005294 <xTaskResumeAll+0x12c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005210:	4b21      	ldr	r3, [pc, #132]	@ (8005298 <xTaskResumeAll+0x130>)
 8005212:	2201      	movs	r2, #1
 8005214:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005216:	4b1c      	ldr	r3, [pc, #112]	@ (8005288 <xTaskResumeAll+0x120>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1cb      	bne.n	80051b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005224:	f000 fb68 	bl	80058f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005228:	4b1c      	ldr	r3, [pc, #112]	@ (800529c <xTaskResumeAll+0x134>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d010      	beq.n	8005256 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005234:	f000 f844 	bl	80052c0 <xTaskIncrementTick>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800523e:	4b16      	ldr	r3, [pc, #88]	@ (8005298 <xTaskResumeAll+0x130>)
 8005240:	2201      	movs	r2, #1
 8005242:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3b01      	subs	r3, #1
 8005248:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f1      	bne.n	8005234 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005250:	4b12      	ldr	r3, [pc, #72]	@ (800529c <xTaskResumeAll+0x134>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005256:	4b10      	ldr	r3, [pc, #64]	@ (8005298 <xTaskResumeAll+0x130>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800525e:	2301      	movs	r3, #1
 8005260:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005262:	4b0f      	ldr	r3, [pc, #60]	@ (80052a0 <xTaskResumeAll+0x138>)
 8005264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005272:	f001 f993 	bl	800659c <vPortExitCritical>

	return xAlreadyYielded;
 8005276:	68bb      	ldr	r3, [r7, #8]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20002084 	.word	0x20002084
 8005284:	2000205c 	.word	0x2000205c
 8005288:	2000201c 	.word	0x2000201c
 800528c:	20002064 	.word	0x20002064
 8005290:	20001b8c 	.word	0x20001b8c
 8005294:	20001b88 	.word	0x20001b88
 8005298:	20002070 	.word	0x20002070
 800529c:	2000206c 	.word	0x2000206c
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052aa:	4b04      	ldr	r3, [pc, #16]	@ (80052bc <xTaskGetTickCount+0x18>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052b0:	687b      	ldr	r3, [r7, #4]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	20002060 	.word	0x20002060

080052c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ca:	4b52      	ldr	r3, [pc, #328]	@ (8005414 <xTaskIncrementTick+0x154>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f040 808f 	bne.w	80053f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052d4:	4b50      	ldr	r3, [pc, #320]	@ (8005418 <xTaskIncrementTick+0x158>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3301      	adds	r3, #1
 80052da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052dc:	4a4e      	ldr	r2, [pc, #312]	@ (8005418 <xTaskIncrementTick+0x158>)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d121      	bne.n	800532c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80052e8:	4b4c      	ldr	r3, [pc, #304]	@ (800541c <xTaskIncrementTick+0x15c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <xTaskIncrementTick+0x4a>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	603b      	str	r3, [r7, #0]
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop
 8005308:	e7fd      	b.n	8005306 <xTaskIncrementTick+0x46>
 800530a:	4b44      	ldr	r3, [pc, #272]	@ (800541c <xTaskIncrementTick+0x15c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	4b43      	ldr	r3, [pc, #268]	@ (8005420 <xTaskIncrementTick+0x160>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a41      	ldr	r2, [pc, #260]	@ (800541c <xTaskIncrementTick+0x15c>)
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	4a41      	ldr	r2, [pc, #260]	@ (8005420 <xTaskIncrementTick+0x160>)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	4b41      	ldr	r3, [pc, #260]	@ (8005424 <xTaskIncrementTick+0x164>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3301      	adds	r3, #1
 8005324:	4a3f      	ldr	r2, [pc, #252]	@ (8005424 <xTaskIncrementTick+0x164>)
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	f000 fae6 	bl	80058f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800532c:	4b3e      	ldr	r3, [pc, #248]	@ (8005428 <xTaskIncrementTick+0x168>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	429a      	cmp	r2, r3
 8005334:	d34e      	bcc.n	80053d4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005336:	4b39      	ldr	r3, [pc, #228]	@ (800541c <xTaskIncrementTick+0x15c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <xTaskIncrementTick+0x84>
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <xTaskIncrementTick+0x86>
 8005344:	2300      	movs	r3, #0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d004      	beq.n	8005354 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534a:	4b37      	ldr	r3, [pc, #220]	@ (8005428 <xTaskIncrementTick+0x168>)
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	601a      	str	r2, [r3, #0]
					break;
 8005352:	e03f      	b.n	80053d4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005354:	4b31      	ldr	r3, [pc, #196]	@ (800541c <xTaskIncrementTick+0x15c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	429a      	cmp	r2, r3
 800536a:	d203      	bcs.n	8005374 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800536c:	4a2e      	ldr	r2, [pc, #184]	@ (8005428 <xTaskIncrementTick+0x168>)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6013      	str	r3, [r2, #0]
						break;
 8005372:	e02f      	b.n	80053d4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	3304      	adds	r3, #4
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe fc6f 	bl	8003c5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	3318      	adds	r3, #24
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fc66 	bl	8003c5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005394:	4b25      	ldr	r3, [pc, #148]	@ (800542c <xTaskIncrementTick+0x16c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d903      	bls.n	80053a4 <xTaskIncrementTick+0xe4>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	4a22      	ldr	r2, [pc, #136]	@ (800542c <xTaskIncrementTick+0x16c>)
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005430 <xTaskIncrementTick+0x170>)
 80053b2:	441a      	add	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f7fe fbf3 	bl	8003ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005434 <xTaskIncrementTick+0x174>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d3b3      	bcc.n	8005336 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80053ce:	2301      	movs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d2:	e7b0      	b.n	8005336 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053d4:	4b17      	ldr	r3, [pc, #92]	@ (8005434 <xTaskIncrementTick+0x174>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053da:	4915      	ldr	r1, [pc, #84]	@ (8005430 <xTaskIncrementTick+0x170>)
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d907      	bls.n	80053fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80053ec:	2301      	movs	r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e004      	b.n	80053fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053f2:	4b11      	ldr	r3, [pc, #68]	@ (8005438 <xTaskIncrementTick+0x178>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3301      	adds	r3, #1
 80053f8:	4a0f      	ldr	r2, [pc, #60]	@ (8005438 <xTaskIncrementTick+0x178>)
 80053fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053fc:	4b0f      	ldr	r3, [pc, #60]	@ (800543c <xTaskIncrementTick+0x17c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005408:	697b      	ldr	r3, [r7, #20]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20002084 	.word	0x20002084
 8005418:	20002060 	.word	0x20002060
 800541c:	20002014 	.word	0x20002014
 8005420:	20002018 	.word	0x20002018
 8005424:	20002074 	.word	0x20002074
 8005428:	2000207c 	.word	0x2000207c
 800542c:	20002064 	.word	0x20002064
 8005430:	20001b8c 	.word	0x20001b8c
 8005434:	20001b88 	.word	0x20001b88
 8005438:	2000206c 	.word	0x2000206c
 800543c:	20002070 	.word	0x20002070

08005440 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005446:	4b2a      	ldr	r3, [pc, #168]	@ (80054f0 <vTaskSwitchContext+0xb0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800544e:	4b29      	ldr	r3, [pc, #164]	@ (80054f4 <vTaskSwitchContext+0xb4>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005454:	e047      	b.n	80054e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005456:	4b27      	ldr	r3, [pc, #156]	@ (80054f4 <vTaskSwitchContext+0xb4>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800545c:	4b26      	ldr	r3, [pc, #152]	@ (80054f8 <vTaskSwitchContext+0xb8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e011      	b.n	8005488 <vTaskSwitchContext+0x48>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <vTaskSwitchContext+0x42>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	607b      	str	r3, [r7, #4]
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <vTaskSwitchContext+0x3e>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3b01      	subs	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	491c      	ldr	r1, [pc, #112]	@ (80054fc <vTaskSwitchContext+0xbc>)
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0e3      	beq.n	8005464 <vTaskSwitchContext+0x24>
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4a15      	ldr	r2, [pc, #84]	@ (80054fc <vTaskSwitchContext+0xbc>)
 80054a8:	4413      	add	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3308      	adds	r3, #8
 80054be:	429a      	cmp	r2, r3
 80054c0:	d104      	bne.n	80054cc <vTaskSwitchContext+0x8c>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	605a      	str	r2, [r3, #4]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	4a0b      	ldr	r2, [pc, #44]	@ (8005500 <vTaskSwitchContext+0xc0>)
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4a08      	ldr	r2, [pc, #32]	@ (80054f8 <vTaskSwitchContext+0xb8>)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054dc:	4b08      	ldr	r3, [pc, #32]	@ (8005500 <vTaskSwitchContext+0xc0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3354      	adds	r3, #84	@ 0x54
 80054e2:	4a08      	ldr	r2, [pc, #32]	@ (8005504 <vTaskSwitchContext+0xc4>)
 80054e4:	6013      	str	r3, [r2, #0]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	20002084 	.word	0x20002084
 80054f4:	20002070 	.word	0x20002070
 80054f8:	20002064 	.word	0x20002064
 80054fc:	20001b8c 	.word	0x20001b8c
 8005500:	20001b88 	.word	0x20001b88
 8005504:	20000010 	.word	0x20000010

08005508 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10b      	bne.n	8005530 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	60fb      	str	r3, [r7, #12]
}
 800552a:	bf00      	nop
 800552c:	bf00      	nop
 800552e:	e7fd      	b.n	800552c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005530:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <vTaskPlaceOnEventList+0x48>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3318      	adds	r3, #24
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fe fb57 	bl	8003bec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800553e:	2101      	movs	r1, #1
 8005540:	6838      	ldr	r0, [r7, #0]
 8005542:	f000 fb95 	bl	8005c70 <prvAddCurrentTaskToDelayedList>
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20001b88 	.word	0x20001b88

08005554 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	617b      	str	r3, [r7, #20]
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	e7fd      	b.n	800557a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800557e:	4b0a      	ldr	r3, [pc, #40]	@ (80055a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3318      	adds	r3, #24
 8005584:	4619      	mov	r1, r3
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7fe fb0d 	bl	8003ba6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005592:	f04f 33ff 	mov.w	r3, #4294967295
 8005596:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	68b8      	ldr	r0, [r7, #8]
 800559c:	f000 fb68 	bl	8005c70 <prvAddCurrentTaskToDelayedList>
	}
 80055a0:	bf00      	nop
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20001b88 	.word	0x20001b88

080055ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	60fb      	str	r3, [r7, #12]
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	3318      	adds	r3, #24
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe fb3c 	bl	8003c5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e4:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <xTaskRemoveFromEventList+0xb0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11d      	bne.n	8005628 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fe fb33 	bl	8003c5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fa:	4b19      	ldr	r3, [pc, #100]	@ (8005660 <xTaskRemoveFromEventList+0xb4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d903      	bls.n	800560a <xTaskRemoveFromEventList+0x5e>
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	4a16      	ldr	r2, [pc, #88]	@ (8005660 <xTaskRemoveFromEventList+0xb4>)
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4a13      	ldr	r2, [pc, #76]	@ (8005664 <xTaskRemoveFromEventList+0xb8>)
 8005618:	441a      	add	r2, r3
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	3304      	adds	r3, #4
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f7fe fac0 	bl	8003ba6 <vListInsertEnd>
 8005626:	e005      	b.n	8005634 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	3318      	adds	r3, #24
 800562c:	4619      	mov	r1, r3
 800562e:	480e      	ldr	r0, [pc, #56]	@ (8005668 <xTaskRemoveFromEventList+0xbc>)
 8005630:	f7fe fab9 	bl	8003ba6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005638:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <xTaskRemoveFromEventList+0xc0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563e:	429a      	cmp	r2, r3
 8005640:	d905      	bls.n	800564e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005642:	2301      	movs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005646:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <xTaskRemoveFromEventList+0xc4>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	e001      	b.n	8005652 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005652:	697b      	ldr	r3, [r7, #20]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20002084 	.word	0x20002084
 8005660:	20002064 	.word	0x20002064
 8005664:	20001b8c 	.word	0x20001b8c
 8005668:	2000201c 	.word	0x2000201c
 800566c:	20001b88 	.word	0x20001b88
 8005670:	20002070 	.word	0x20002070

08005674 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800567c:	4b06      	ldr	r3, [pc, #24]	@ (8005698 <vTaskInternalSetTimeOutState+0x24>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005684:	4b05      	ldr	r3, [pc, #20]	@ (800569c <vTaskInternalSetTimeOutState+0x28>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	605a      	str	r2, [r3, #4]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20002074 	.word	0x20002074
 800569c:	20002060 	.word	0x20002060

080056a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	613b      	str	r3, [r7, #16]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	60fb      	str	r3, [r7, #12]
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80056e6:	f000 ff29 	bl	800653c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005760 <xTaskCheckForTimeOut+0xc0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d102      	bne.n	800570a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005704:	2300      	movs	r3, #0
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	e023      	b.n	8005752 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4b15      	ldr	r3, [pc, #84]	@ (8005764 <xTaskCheckForTimeOut+0xc4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d007      	beq.n	8005726 <xTaskCheckForTimeOut+0x86>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	429a      	cmp	r2, r3
 800571e:	d302      	bcc.n	8005726 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005720:	2301      	movs	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	e015      	b.n	8005752 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	429a      	cmp	r2, r3
 800572e:	d20b      	bcs.n	8005748 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1ad2      	subs	r2, r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff ff99 	bl	8005674 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	e004      	b.n	8005752 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800574e:	2301      	movs	r3, #1
 8005750:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005752:	f000 ff23 	bl	800659c <vPortExitCritical>

	return xReturn;
 8005756:	69fb      	ldr	r3, [r7, #28]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20002060 	.word	0x20002060
 8005764:	20002074 	.word	0x20002074

08005768 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800576c:	4b03      	ldr	r3, [pc, #12]	@ (800577c <vTaskMissedYield+0x14>)
 800576e:	2201      	movs	r2, #1
 8005770:	601a      	str	r2, [r3, #0]
}
 8005772:	bf00      	nop
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20002070 	.word	0x20002070

08005780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005788:	f000 f852 	bl	8005830 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800578c:	4b06      	ldr	r3, [pc, #24]	@ (80057a8 <prvIdleTask+0x28>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d9f9      	bls.n	8005788 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005794:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <prvIdleTask+0x2c>)
 8005796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057a4:	e7f0      	b.n	8005788 <prvIdleTask+0x8>
 80057a6:	bf00      	nop
 80057a8:	20001b8c 	.word	0x20001b8c
 80057ac:	e000ed04 	.word	0xe000ed04

080057b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057b6:	2300      	movs	r3, #0
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	e00c      	b.n	80057d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4a12      	ldr	r2, [pc, #72]	@ (8005810 <prvInitialiseTaskLists+0x60>)
 80057c8:	4413      	add	r3, r2
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe f9c0 	bl	8003b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3301      	adds	r3, #1
 80057d4:	607b      	str	r3, [r7, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b37      	cmp	r3, #55	@ 0x37
 80057da:	d9ef      	bls.n	80057bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057dc:	480d      	ldr	r0, [pc, #52]	@ (8005814 <prvInitialiseTaskLists+0x64>)
 80057de:	f7fe f9b7 	bl	8003b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057e2:	480d      	ldr	r0, [pc, #52]	@ (8005818 <prvInitialiseTaskLists+0x68>)
 80057e4:	f7fe f9b4 	bl	8003b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057e8:	480c      	ldr	r0, [pc, #48]	@ (800581c <prvInitialiseTaskLists+0x6c>)
 80057ea:	f7fe f9b1 	bl	8003b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057ee:	480c      	ldr	r0, [pc, #48]	@ (8005820 <prvInitialiseTaskLists+0x70>)
 80057f0:	f7fe f9ae 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057f4:	480b      	ldr	r0, [pc, #44]	@ (8005824 <prvInitialiseTaskLists+0x74>)
 80057f6:	f7fe f9ab 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005828 <prvInitialiseTaskLists+0x78>)
 80057fc:	4a05      	ldr	r2, [pc, #20]	@ (8005814 <prvInitialiseTaskLists+0x64>)
 80057fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005800:	4b0a      	ldr	r3, [pc, #40]	@ (800582c <prvInitialiseTaskLists+0x7c>)
 8005802:	4a05      	ldr	r2, [pc, #20]	@ (8005818 <prvInitialiseTaskLists+0x68>)
 8005804:	601a      	str	r2, [r3, #0]
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20001b8c 	.word	0x20001b8c
 8005814:	20001fec 	.word	0x20001fec
 8005818:	20002000 	.word	0x20002000
 800581c:	2000201c 	.word	0x2000201c
 8005820:	20002030 	.word	0x20002030
 8005824:	20002048 	.word	0x20002048
 8005828:	20002014 	.word	0x20002014
 800582c:	20002018 	.word	0x20002018

08005830 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005836:	e019      	b.n	800586c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005838:	f000 fe80 	bl	800653c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800583c:	4b10      	ldr	r3, [pc, #64]	@ (8005880 <prvCheckTasksWaitingTermination+0x50>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3304      	adds	r3, #4
 8005848:	4618      	mov	r0, r3
 800584a:	f7fe fa07 	bl	8003c5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800584e:	4b0d      	ldr	r3, [pc, #52]	@ (8005884 <prvCheckTasksWaitingTermination+0x54>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3b01      	subs	r3, #1
 8005854:	4a0b      	ldr	r2, [pc, #44]	@ (8005884 <prvCheckTasksWaitingTermination+0x54>)
 8005856:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005858:	4b0b      	ldr	r3, [pc, #44]	@ (8005888 <prvCheckTasksWaitingTermination+0x58>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3b01      	subs	r3, #1
 800585e:	4a0a      	ldr	r2, [pc, #40]	@ (8005888 <prvCheckTasksWaitingTermination+0x58>)
 8005860:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005862:	f000 fe9b 	bl	800659c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f810 	bl	800588c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800586c:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <prvCheckTasksWaitingTermination+0x58>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e1      	bne.n	8005838 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20002030 	.word	0x20002030
 8005884:	2000205c 	.word	0x2000205c
 8005888:	20002044 	.word	0x20002044

0800588c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3354      	adds	r3, #84	@ 0x54
 8005898:	4618      	mov	r0, r3
 800589a:	f001 f937 	bl	8006b0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d108      	bne.n	80058ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 f80f 	bl	80068d0 <vPortFree>
				vPortFree( pxTCB );
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 f80c 	bl	80068d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058b8:	e019      	b.n	80058ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d103      	bne.n	80058cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 f803 	bl	80068d0 <vPortFree>
	}
 80058ca:	e010      	b.n	80058ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d00b      	beq.n	80058ee <prvDeleteTCB+0x62>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	60fb      	str	r3, [r7, #12]
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	e7fd      	b.n	80058ea <prvDeleteTCB+0x5e>
	}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005938 <prvResetNextTaskUnblockTime+0x40>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <prvResetNextTaskUnblockTime+0x14>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <prvResetNextTaskUnblockTime+0x16>
 800590c:	2300      	movs	r3, #0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d004      	beq.n	800591c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005912:	4b0a      	ldr	r3, [pc, #40]	@ (800593c <prvResetNextTaskUnblockTime+0x44>)
 8005914:	f04f 32ff 	mov.w	r2, #4294967295
 8005918:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800591a:	e008      	b.n	800592e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800591c:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <prvResetNextTaskUnblockTime+0x40>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	4a04      	ldr	r2, [pc, #16]	@ (800593c <prvResetNextTaskUnblockTime+0x44>)
 800592c:	6013      	str	r3, [r2, #0]
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	20002014 	.word	0x20002014
 800593c:	2000207c 	.word	0x2000207c

08005940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005946:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <xTaskGetSchedulerState+0x34>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800594e:	2301      	movs	r3, #1
 8005950:	607b      	str	r3, [r7, #4]
 8005952:	e008      	b.n	8005966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005954:	4b08      	ldr	r3, [pc, #32]	@ (8005978 <xTaskGetSchedulerState+0x38>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800595c:	2302      	movs	r3, #2
 800595e:	607b      	str	r3, [r7, #4]
 8005960:	e001      	b.n	8005966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005962:	2300      	movs	r3, #0
 8005964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005966:	687b      	ldr	r3, [r7, #4]
	}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20002068 	.word	0x20002068
 8005978:	20002084 	.word	0x20002084

0800597c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d056      	beq.n	8005a40 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005996:	4b2d      	ldr	r3, [pc, #180]	@ (8005a4c <xTaskPriorityInherit+0xd0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599c:	429a      	cmp	r2, r3
 800599e:	d246      	bcs.n	8005a2e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	db06      	blt.n	80059b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a8:	4b28      	ldr	r3, [pc, #160]	@ (8005a4c <xTaskPriorityInherit+0xd0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6959      	ldr	r1, [r3, #20]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4a22      	ldr	r2, [pc, #136]	@ (8005a50 <xTaskPriorityInherit+0xd4>)
 80059c8:	4413      	add	r3, r2
 80059ca:	4299      	cmp	r1, r3
 80059cc:	d101      	bne.n	80059d2 <xTaskPriorityInherit+0x56>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <xTaskPriorityInherit+0x58>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d022      	beq.n	8005a1e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	3304      	adds	r3, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe f93d 	bl	8003c5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059e2:	4b1a      	ldr	r3, [pc, #104]	@ (8005a4c <xTaskPriorityInherit+0xd0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f0:	4b18      	ldr	r3, [pc, #96]	@ (8005a54 <xTaskPriorityInherit+0xd8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d903      	bls.n	8005a00 <xTaskPriorityInherit+0x84>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fc:	4a15      	ldr	r2, [pc, #84]	@ (8005a54 <xTaskPriorityInherit+0xd8>)
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4a10      	ldr	r2, [pc, #64]	@ (8005a50 <xTaskPriorityInherit+0xd4>)
 8005a0e:	441a      	add	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f7fe f8c5 	bl	8003ba6 <vListInsertEnd>
 8005a1c:	e004      	b.n	8005a28 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a4c <xTaskPriorityInherit+0xd0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	e008      	b.n	8005a40 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a32:	4b06      	ldr	r3, [pc, #24]	@ (8005a4c <xTaskPriorityInherit+0xd0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d201      	bcs.n	8005a40 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a40:	68fb      	ldr	r3, [r7, #12]
	}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20001b88 	.word	0x20001b88
 8005a50:	20001b8c 	.word	0x20001b8c
 8005a54:	20002064 	.word	0x20002064

08005a58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d058      	beq.n	8005b20 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b2c <xTaskPriorityDisinherit+0xd4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d00b      	beq.n	8005a90 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	60fb      	str	r3, [r7, #12]
}
 8005a8a:	bf00      	nop
 8005a8c:	bf00      	nop
 8005a8e:	e7fd      	b.n	8005a8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10b      	bne.n	8005ab0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	60bb      	str	r3, [r7, #8]
}
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
 8005aae:	e7fd      	b.n	8005aac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab4:	1e5a      	subs	r2, r3, #1
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d02c      	beq.n	8005b20 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d128      	bne.n	8005b20 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe f8c2 	bl	8003c5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af0:	4b0f      	ldr	r3, [pc, #60]	@ (8005b30 <xTaskPriorityDisinherit+0xd8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d903      	bls.n	8005b00 <xTaskPriorityDisinherit+0xa8>
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afc:	4a0c      	ldr	r2, [pc, #48]	@ (8005b30 <xTaskPriorityDisinherit+0xd8>)
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4a09      	ldr	r2, [pc, #36]	@ (8005b34 <xTaskPriorityDisinherit+0xdc>)
 8005b0e:	441a      	add	r2, r3
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7fe f845 	bl	8003ba6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b20:	697b      	ldr	r3, [r7, #20]
	}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20001b88 	.word	0x20001b88
 8005b30:	20002064 	.word	0x20002064
 8005b34:	20001b8c 	.word	0x20001b8c

08005b38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b46:	2301      	movs	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d071      	beq.n	8005c34 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10b      	bne.n	8005b70 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	60fb      	str	r3, [r7, #12]
}
 8005b6a:	bf00      	nop
 8005b6c:	bf00      	nop
 8005b6e:	e7fd      	b.n	8005b6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d902      	bls.n	8005b80 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	e002      	b.n	8005b86 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b84:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d051      	beq.n	8005c34 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d14c      	bne.n	8005c34 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b9a:	4b28      	ldr	r3, [pc, #160]	@ (8005c3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d10b      	bne.n	8005bbc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	60bb      	str	r3, [r7, #8]
}
 8005bb6:	bf00      	nop
 8005bb8:	bf00      	nop
 8005bba:	e7fd      	b.n	8005bb8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	db04      	blt.n	8005bda <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	6959      	ldr	r1, [r3, #20]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4a15      	ldr	r2, [pc, #84]	@ (8005c40 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005bea:	4413      	add	r3, r2
 8005bec:	4299      	cmp	r1, r3
 8005bee:	d101      	bne.n	8005bf4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01c      	beq.n	8005c34 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe f82c 	bl	8003c5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c08:	4b0e      	ldr	r3, [pc, #56]	@ (8005c44 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d903      	bls.n	8005c18 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	4a0b      	ldr	r2, [pc, #44]	@ (8005c44 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4a06      	ldr	r2, [pc, #24]	@ (8005c40 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005c26:	441a      	add	r2, r3
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7fd ffb9 	bl	8003ba6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c34:	bf00      	nop
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	20001b88 	.word	0x20001b88
 8005c40:	20001b8c 	.word	0x20001b8c
 8005c44:	20002064 	.word	0x20002064

08005c48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c4c:	4b07      	ldr	r3, [pc, #28]	@ (8005c6c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d004      	beq.n	8005c5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c54:	4b05      	ldr	r3, [pc, #20]	@ (8005c6c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c5a:	3201      	adds	r2, #1
 8005c5c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005c5e:	4b03      	ldr	r3, [pc, #12]	@ (8005c6c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c60:	681b      	ldr	r3, [r3, #0]
	}
 8005c62:	4618      	mov	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20001b88 	.word	0x20001b88

08005c70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c7a:	4b21      	ldr	r3, [pc, #132]	@ (8005d00 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c80:	4b20      	ldr	r3, [pc, #128]	@ (8005d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3304      	adds	r3, #4
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fd ffe8 	bl	8003c5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c92:	d10a      	bne.n	8005caa <prvAddCurrentTaskToDelayedList+0x3a>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8005d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4819      	ldr	r0, [pc, #100]	@ (8005d08 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ca4:	f7fd ff7f 	bl	8003ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ca8:	e026      	b.n	8005cf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4413      	add	r3, r2
 8005cb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cb2:	4b14      	ldr	r3, [pc, #80]	@ (8005d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d209      	bcs.n	8005cd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cc2:	4b12      	ldr	r3, [pc, #72]	@ (8005d0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7fd ff8c 	bl	8003bec <vListInsert>
}
 8005cd4:	e010      	b.n	8005cf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b0a      	ldr	r3, [pc, #40]	@ (8005d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f7fd ff82 	bl	8003bec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8005d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d202      	bcs.n	8005cf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cf2:	4a08      	ldr	r2, [pc, #32]	@ (8005d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	6013      	str	r3, [r2, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20002060 	.word	0x20002060
 8005d04:	20001b88 	.word	0x20001b88
 8005d08:	20002048 	.word	0x20002048
 8005d0c:	20002018 	.word	0x20002018
 8005d10:	20002014 	.word	0x20002014
 8005d14:	2000207c 	.word	0x2000207c

08005d18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	@ 0x28
 8005d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d22:	f000 fad9 	bl	80062d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d26:	4b1d      	ldr	r3, [pc, #116]	@ (8005d9c <xTimerCreateTimerTask+0x84>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d021      	beq.n	8005d72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d36:	1d3a      	adds	r2, r7, #4
 8005d38:	f107 0108 	add.w	r1, r7, #8
 8005d3c:	f107 030c 	add.w	r3, r7, #12
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fd feeb 	bl	8003b1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	9202      	str	r2, [sp, #8]
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	2302      	movs	r3, #2
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	2300      	movs	r3, #0
 8005d56:	460a      	mov	r2, r1
 8005d58:	4911      	ldr	r1, [pc, #68]	@ (8005da0 <xTimerCreateTimerTask+0x88>)
 8005d5a:	4812      	ldr	r0, [pc, #72]	@ (8005da4 <xTimerCreateTimerTask+0x8c>)
 8005d5c:	f7fe ffd2 	bl	8004d04 <xTaskCreateStatic>
 8005d60:	4603      	mov	r3, r0
 8005d62:	4a11      	ldr	r2, [pc, #68]	@ (8005da8 <xTimerCreateTimerTask+0x90>)
 8005d64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d66:	4b10      	ldr	r3, [pc, #64]	@ (8005da8 <xTimerCreateTimerTask+0x90>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10b      	bne.n	8005d90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	613b      	str	r3, [r7, #16]
}
 8005d8a:	bf00      	nop
 8005d8c:	bf00      	nop
 8005d8e:	e7fd      	b.n	8005d8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d90:	697b      	ldr	r3, [r7, #20]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	200020b8 	.word	0x200020b8
 8005da0:	08006d08 	.word	0x08006d08
 8005da4:	08005ecd 	.word	0x08005ecd
 8005da8:	200020bc 	.word	0x200020bc

08005dac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08a      	sub	sp, #40	@ 0x28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10b      	bne.n	8005ddc <xTimerGenericCommand+0x30>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	623b      	str	r3, [r7, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ddc:	4b19      	ldr	r3, [pc, #100]	@ (8005e44 <xTimerGenericCommand+0x98>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d02a      	beq.n	8005e3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	dc18      	bgt.n	8005e28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005df6:	f7ff fda3 	bl	8005940 <xTaskGetSchedulerState>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d109      	bne.n	8005e14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e00:	4b10      	ldr	r3, [pc, #64]	@ (8005e44 <xTimerGenericCommand+0x98>)
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	f107 0110 	add.w	r1, r7, #16
 8005e08:	2300      	movs	r3, #0
 8005e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e0c:	f7fe f906 	bl	800401c <xQueueGenericSend>
 8005e10:	6278      	str	r0, [r7, #36]	@ 0x24
 8005e12:	e012      	b.n	8005e3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e14:	4b0b      	ldr	r3, [pc, #44]	@ (8005e44 <xTimerGenericCommand+0x98>)
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	f107 0110 	add.w	r1, r7, #16
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f7fe f8fc 	bl	800401c <xQueueGenericSend>
 8005e24:	6278      	str	r0, [r7, #36]	@ 0x24
 8005e26:	e008      	b.n	8005e3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e28:	4b06      	ldr	r3, [pc, #24]	@ (8005e44 <xTimerGenericCommand+0x98>)
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	f107 0110 	add.w	r1, r7, #16
 8005e30:	2300      	movs	r3, #0
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	f7fe f9f4 	bl	8004220 <xQueueGenericSendFromISR>
 8005e38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3728      	adds	r7, #40	@ 0x28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	200020b8 	.word	0x200020b8

08005e48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e52:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec8 <prvProcessExpiredTimer+0x80>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fd fefb 	bl	8003c5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d123      	bne.n	8005eb6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	18d1      	adds	r1, r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	6978      	ldr	r0, [r7, #20]
 8005e7c:	f000 f8cc 	bl	8006018 <prvInsertTimerInActiveList>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d017      	beq.n	8005eb6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	2100      	movs	r1, #0
 8005e90:	6978      	ldr	r0, [r7, #20]
 8005e92:	f7ff ff8b 	bl	8005dac <xTimerGenericCommand>
 8005e96:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10b      	bne.n	8005eb6 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	60fb      	str	r3, [r7, #12]
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	e7fd      	b.n	8005eb2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	6978      	ldr	r0, [r7, #20]
 8005ebc:	4798      	blx	r3
}
 8005ebe:	bf00      	nop
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	200020b0 	.word	0x200020b0

08005ecc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ed4:	f107 0308 	add.w	r3, r7, #8
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 f859 	bl	8005f90 <prvGetNextExpireTime>
 8005ede:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 f805 	bl	8005ef4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005eea:	f000 f8d7 	bl	800609c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eee:	bf00      	nop
 8005ef0:	e7f0      	b.n	8005ed4 <prvTimerTask+0x8>
	...

08005ef4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005efe:	f7ff f925 	bl	800514c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f02:	f107 0308 	add.w	r3, r7, #8
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f866 	bl	8005fd8 <prvSampleTimeNow>
 8005f0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d130      	bne.n	8005f76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <prvProcessTimerOrBlockTask+0x3c>
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d806      	bhi.n	8005f30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f22:	f7ff f921 	bl	8005168 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff8d 	bl	8005e48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f2e:	e024      	b.n	8005f7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d008      	beq.n	8005f48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f36:	4b13      	ldr	r3, [pc, #76]	@ (8005f84 <prvProcessTimerOrBlockTask+0x90>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf0c      	ite	eq
 8005f40:	2301      	moveq	r3, #1
 8005f42:	2300      	movne	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f48:	4b0f      	ldr	r3, [pc, #60]	@ (8005f88 <prvProcessTimerOrBlockTask+0x94>)
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	4619      	mov	r1, r3
 8005f56:	f7fe fea1 	bl	8004c9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f5a:	f7ff f905 	bl	8005168 <xTaskResumeAll>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f64:	4b09      	ldr	r3, [pc, #36]	@ (8005f8c <prvProcessTimerOrBlockTask+0x98>)
 8005f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	f3bf 8f6f 	isb	sy
}
 8005f74:	e001      	b.n	8005f7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f76:	f7ff f8f7 	bl	8005168 <xTaskResumeAll>
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	200020b4 	.word	0x200020b4
 8005f88:	200020b8 	.word	0x200020b8
 8005f8c:	e000ed04 	.word	0xe000ed04

08005f90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f98:	4b0e      	ldr	r3, [pc, #56]	@ (8005fd4 <prvGetNextExpireTime+0x44>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fb6:	4b07      	ldr	r3, [pc, #28]	@ (8005fd4 <prvGetNextExpireTime+0x44>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e001      	b.n	8005fc6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	200020b0 	.word	0x200020b0

08005fd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fe0:	f7ff f960 	bl	80052a4 <xTaskGetTickCount>
 8005fe4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8006014 <prvSampleTimeNow+0x3c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d205      	bcs.n	8005ffc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ff0:	f000 f910 	bl	8006214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	e002      	b.n	8006002 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006002:	4a04      	ldr	r2, [pc, #16]	@ (8006014 <prvSampleTimeNow+0x3c>)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006008:	68fb      	ldr	r3, [r7, #12]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	200020c0 	.word	0x200020c0

08006018 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	429a      	cmp	r2, r3
 800603c:	d812      	bhi.n	8006064 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	1ad2      	subs	r2, r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	429a      	cmp	r2, r3
 800604a:	d302      	bcc.n	8006052 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e01b      	b.n	800608a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006052:	4b10      	ldr	r3, [pc, #64]	@ (8006094 <prvInsertTimerInActiveList+0x7c>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3304      	adds	r3, #4
 800605a:	4619      	mov	r1, r3
 800605c:	4610      	mov	r0, r2
 800605e:	f7fd fdc5 	bl	8003bec <vListInsert>
 8006062:	e012      	b.n	800608a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d206      	bcs.n	800607a <prvInsertTimerInActiveList+0x62>
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d302      	bcc.n	800607a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006074:	2301      	movs	r3, #1
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	e007      	b.n	800608a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800607a:	4b07      	ldr	r3, [pc, #28]	@ (8006098 <prvInsertTimerInActiveList+0x80>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3304      	adds	r3, #4
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f7fd fdb1 	bl	8003bec <vListInsert>
		}
	}

	return xProcessTimerNow;
 800608a:	697b      	ldr	r3, [r7, #20]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	200020b4 	.word	0x200020b4
 8006098:	200020b0 	.word	0x200020b0

0800609c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08e      	sub	sp, #56	@ 0x38
 80060a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060a2:	e0a5      	b.n	80061f0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da19      	bge.n	80060de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	3304      	adds	r3, #4
 80060ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80060b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10b      	bne.n	80060ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	61fb      	str	r3, [r7, #28]
}
 80060c8:	bf00      	nop
 80060ca:	bf00      	nop
 80060cc:	e7fd      	b.n	80060ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060d4:	6850      	ldr	r0, [r2, #4]
 80060d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060d8:	6892      	ldr	r2, [r2, #8]
 80060da:	4611      	mov	r1, r2
 80060dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f2c0 8085 	blt.w	80061f0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d004      	beq.n	80060fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f4:	3304      	adds	r3, #4
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fd fdb0 	bl	8003c5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060fc:	463b      	mov	r3, r7
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff ff6a 	bl	8005fd8 <prvSampleTimeNow>
 8006104:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b09      	cmp	r3, #9
 800610a:	d86c      	bhi.n	80061e6 <prvProcessReceivedCommands+0x14a>
 800610c:	a201      	add	r2, pc, #4	@ (adr r2, 8006114 <prvProcessReceivedCommands+0x78>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	0800613d 	.word	0x0800613d
 8006118:	0800613d 	.word	0x0800613d
 800611c:	0800613d 	.word	0x0800613d
 8006120:	080061e7 	.word	0x080061e7
 8006124:	0800619b 	.word	0x0800619b
 8006128:	080061d5 	.word	0x080061d5
 800612c:	0800613d 	.word	0x0800613d
 8006130:	0800613d 	.word	0x0800613d
 8006134:	080061e7 	.word	0x080061e7
 8006138:	0800619b 	.word	0x0800619b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	18d1      	adds	r1, r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800614a:	f7ff ff65 	bl	8006018 <prvInsertTimerInActiveList>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d04a      	beq.n	80061ea <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006158:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800615a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800615c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d142      	bne.n	80061ea <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	441a      	add	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2300      	movs	r3, #0
 8006172:	2100      	movs	r1, #0
 8006174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006176:	f7ff fe19 	bl	8005dac <xTimerGenericCommand>
 800617a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d133      	bne.n	80061ea <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	61bb      	str	r3, [r7, #24]
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	e7fd      	b.n	8006196 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	617b      	str	r3, [r7, #20]
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c2:	699a      	ldr	r2, [r3, #24]
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	18d1      	adds	r1, r2, r3
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061ce:	f7ff ff23 	bl	8006018 <prvInsertTimerInActiveList>
					break;
 80061d2:	e00d      	b.n	80061f0 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80061d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d107      	bne.n	80061ee <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80061de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061e0:	f000 fb76 	bl	80068d0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061e4:	e003      	b.n	80061ee <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80061e6:	bf00      	nop
 80061e8:	e002      	b.n	80061f0 <prvProcessReceivedCommands+0x154>
					break;
 80061ea:	bf00      	nop
 80061ec:	e000      	b.n	80061f0 <prvProcessReceivedCommands+0x154>
					break;
 80061ee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061f0:	4b07      	ldr	r3, [pc, #28]	@ (8006210 <prvProcessReceivedCommands+0x174>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	1d39      	adds	r1, r7, #4
 80061f6:	2200      	movs	r2, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe f93d 	bl	8004478 <xQueueReceive>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	f47f af4f 	bne.w	80060a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	3730      	adds	r7, #48	@ 0x30
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	200020b8 	.word	0x200020b8

08006214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800621a:	e046      	b.n	80062aa <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800621c:	4b2c      	ldr	r3, [pc, #176]	@ (80062d0 <prvSwitchTimerLists+0xbc>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006226:	4b2a      	ldr	r3, [pc, #168]	@ (80062d0 <prvSwitchTimerLists+0xbc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3304      	adds	r3, #4
 8006234:	4618      	mov	r0, r3
 8006236:	f7fd fd11 	bl	8003c5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d12f      	bne.n	80062aa <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4413      	add	r3, r2
 8006252:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	429a      	cmp	r2, r3
 800625a:	d90e      	bls.n	800627a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006268:	4b19      	ldr	r3, [pc, #100]	@ (80062d0 <prvSwitchTimerLists+0xbc>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f7fd fcba 	bl	8003bec <vListInsert>
 8006278:	e017      	b.n	80062aa <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800627a:	2300      	movs	r3, #0
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	2300      	movs	r3, #0
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	2100      	movs	r1, #0
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fd91 	bl	8005dac <xTimerGenericCommand>
 800628a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10b      	bne.n	80062aa <prvSwitchTimerLists+0x96>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	603b      	str	r3, [r7, #0]
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	e7fd      	b.n	80062a6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062aa:	4b09      	ldr	r3, [pc, #36]	@ (80062d0 <prvSwitchTimerLists+0xbc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1b3      	bne.n	800621c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062b4:	4b06      	ldr	r3, [pc, #24]	@ (80062d0 <prvSwitchTimerLists+0xbc>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062ba:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <prvSwitchTimerLists+0xc0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a04      	ldr	r2, [pc, #16]	@ (80062d0 <prvSwitchTimerLists+0xbc>)
 80062c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062c2:	4a04      	ldr	r2, [pc, #16]	@ (80062d4 <prvSwitchTimerLists+0xc0>)
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	6013      	str	r3, [r2, #0]
}
 80062c8:	bf00      	nop
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	200020b0 	.word	0x200020b0
 80062d4:	200020b4 	.word	0x200020b4

080062d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062de:	f000 f92d 	bl	800653c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062e2:	4b15      	ldr	r3, [pc, #84]	@ (8006338 <prvCheckForValidListAndQueue+0x60>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d120      	bne.n	800632c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062ea:	4814      	ldr	r0, [pc, #80]	@ (800633c <prvCheckForValidListAndQueue+0x64>)
 80062ec:	f7fd fc30 	bl	8003b50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062f0:	4813      	ldr	r0, [pc, #76]	@ (8006340 <prvCheckForValidListAndQueue+0x68>)
 80062f2:	f7fd fc2d 	bl	8003b50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062f6:	4b13      	ldr	r3, [pc, #76]	@ (8006344 <prvCheckForValidListAndQueue+0x6c>)
 80062f8:	4a10      	ldr	r2, [pc, #64]	@ (800633c <prvCheckForValidListAndQueue+0x64>)
 80062fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062fc:	4b12      	ldr	r3, [pc, #72]	@ (8006348 <prvCheckForValidListAndQueue+0x70>)
 80062fe:	4a10      	ldr	r2, [pc, #64]	@ (8006340 <prvCheckForValidListAndQueue+0x68>)
 8006300:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006302:	2300      	movs	r3, #0
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	4b11      	ldr	r3, [pc, #68]	@ (800634c <prvCheckForValidListAndQueue+0x74>)
 8006308:	4a11      	ldr	r2, [pc, #68]	@ (8006350 <prvCheckForValidListAndQueue+0x78>)
 800630a:	2110      	movs	r1, #16
 800630c:	200a      	movs	r0, #10
 800630e:	f7fd fd39 	bl	8003d84 <xQueueGenericCreateStatic>
 8006312:	4603      	mov	r3, r0
 8006314:	4a08      	ldr	r2, [pc, #32]	@ (8006338 <prvCheckForValidListAndQueue+0x60>)
 8006316:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006318:	4b07      	ldr	r3, [pc, #28]	@ (8006338 <prvCheckForValidListAndQueue+0x60>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006320:	4b05      	ldr	r3, [pc, #20]	@ (8006338 <prvCheckForValidListAndQueue+0x60>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	490b      	ldr	r1, [pc, #44]	@ (8006354 <prvCheckForValidListAndQueue+0x7c>)
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fc66 	bl	8004bf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800632c:	f000 f936 	bl	800659c <vPortExitCritical>
}
 8006330:	bf00      	nop
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	200020b8 	.word	0x200020b8
 800633c:	20002088 	.word	0x20002088
 8006340:	2000209c 	.word	0x2000209c
 8006344:	200020b0 	.word	0x200020b0
 8006348:	200020b4 	.word	0x200020b4
 800634c:	20002164 	.word	0x20002164
 8006350:	200020c4 	.word	0x200020c4
 8006354:	08006d10 	.word	0x08006d10

08006358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b04      	subs	r3, #4
 8006368:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b04      	subs	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b04      	subs	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006388:	4a08      	ldr	r2, [pc, #32]	@ (80063ac <pxPortInitialiseStack+0x54>)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b14      	subs	r3, #20
 8006392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b20      	subs	r3, #32
 800639e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr
 80063ac:	080063b1 	.word	0x080063b1

080063b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ba:	4b12      	ldr	r3, [pc, #72]	@ (8006404 <prvTaskExitError+0x54>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d00b      	beq.n	80063dc <prvTaskExitError+0x2c>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	60fb      	str	r3, [r7, #12]
}
 80063d6:	bf00      	nop
 80063d8:	bf00      	nop
 80063da:	e7fd      	b.n	80063d8 <prvTaskExitError+0x28>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	60bb      	str	r3, [r7, #8]
}
 80063ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063f0:	bf00      	nop
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0fc      	beq.n	80063f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr
 8006404:	2000000c 	.word	0x2000000c
	...

08006410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006410:	4b07      	ldr	r3, [pc, #28]	@ (8006430 <pxCurrentTCBConst2>)
 8006412:	6819      	ldr	r1, [r3, #0]
 8006414:	6808      	ldr	r0, [r1, #0]
 8006416:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800641a:	f380 8809 	msr	PSP, r0
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f380 8811 	msr	BASEPRI, r0
 800642a:	f04e 0e0d 	orr.w	lr, lr, #13
 800642e:	4770      	bx	lr

08006430 <pxCurrentTCBConst2>:
 8006430:	20001b88 	.word	0x20001b88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop

08006438 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006438:	4806      	ldr	r0, [pc, #24]	@ (8006454 <prvPortStartFirstTask+0x1c>)
 800643a:	6800      	ldr	r0, [r0, #0]
 800643c:	6800      	ldr	r0, [r0, #0]
 800643e:	f380 8808 	msr	MSP, r0
 8006442:	b662      	cpsie	i
 8006444:	b661      	cpsie	f
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	df00      	svc	0
 8006450:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006452:	bf00      	nop
 8006454:	e000ed08 	.word	0xe000ed08

08006458 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800645e:	4b32      	ldr	r3, [pc, #200]	@ (8006528 <xPortStartScheduler+0xd0>)
 8006460:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	22ff      	movs	r2, #255	@ 0xff
 800646e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006480:	b2da      	uxtb	r2, r3
 8006482:	4b2a      	ldr	r3, [pc, #168]	@ (800652c <xPortStartScheduler+0xd4>)
 8006484:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006486:	4b2a      	ldr	r3, [pc, #168]	@ (8006530 <xPortStartScheduler+0xd8>)
 8006488:	2207      	movs	r2, #7
 800648a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800648c:	e009      	b.n	80064a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800648e:	4b28      	ldr	r3, [pc, #160]	@ (8006530 <xPortStartScheduler+0xd8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3b01      	subs	r3, #1
 8006494:	4a26      	ldr	r2, [pc, #152]	@ (8006530 <xPortStartScheduler+0xd8>)
 8006496:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064aa:	2b80      	cmp	r3, #128	@ 0x80
 80064ac:	d0ef      	beq.n	800648e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064ae:	4b20      	ldr	r3, [pc, #128]	@ (8006530 <xPortStartScheduler+0xd8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f1c3 0307 	rsb	r3, r3, #7
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d00b      	beq.n	80064d2 <xPortStartScheduler+0x7a>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	60bb      	str	r3, [r7, #8]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064d2:	4b17      	ldr	r3, [pc, #92]	@ (8006530 <xPortStartScheduler+0xd8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	021b      	lsls	r3, r3, #8
 80064d8:	4a15      	ldr	r2, [pc, #84]	@ (8006530 <xPortStartScheduler+0xd8>)
 80064da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064dc:	4b14      	ldr	r3, [pc, #80]	@ (8006530 <xPortStartScheduler+0xd8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064e4:	4a12      	ldr	r2, [pc, #72]	@ (8006530 <xPortStartScheduler+0xd8>)
 80064e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064f0:	4b10      	ldr	r3, [pc, #64]	@ (8006534 <xPortStartScheduler+0xdc>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a0f      	ldr	r2, [pc, #60]	@ (8006534 <xPortStartScheduler+0xdc>)
 80064f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80064fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006534 <xPortStartScheduler+0xdc>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0c      	ldr	r2, [pc, #48]	@ (8006534 <xPortStartScheduler+0xdc>)
 8006502:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006506:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006508:	f000 f8b8 	bl	800667c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800650c:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <xPortStartScheduler+0xe0>)
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006512:	f7ff ff91 	bl	8006438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006516:	f7fe ff93 	bl	8005440 <vTaskSwitchContext>
	prvTaskExitError();
 800651a:	f7ff ff49 	bl	80063b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	e000e400 	.word	0xe000e400
 800652c:	200021b4 	.word	0x200021b4
 8006530:	200021b8 	.word	0x200021b8
 8006534:	e000ed20 	.word	0xe000ed20
 8006538:	2000000c 	.word	0x2000000c

0800653c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	607b      	str	r3, [r7, #4]
}
 8006554:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006556:	4b0f      	ldr	r3, [pc, #60]	@ (8006594 <vPortEnterCritical+0x58>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3301      	adds	r3, #1
 800655c:	4a0d      	ldr	r2, [pc, #52]	@ (8006594 <vPortEnterCritical+0x58>)
 800655e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006560:	4b0c      	ldr	r3, [pc, #48]	@ (8006594 <vPortEnterCritical+0x58>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d110      	bne.n	800658a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006568:	4b0b      	ldr	r3, [pc, #44]	@ (8006598 <vPortEnterCritical+0x5c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00b      	beq.n	800658a <vPortEnterCritical+0x4e>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	603b      	str	r3, [r7, #0]
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop
 8006588:	e7fd      	b.n	8006586 <vPortEnterCritical+0x4a>
	}
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr
 8006594:	2000000c 	.word	0x2000000c
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065a2:	4b12      	ldr	r3, [pc, #72]	@ (80065ec <vPortExitCritical+0x50>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <vPortExitCritical+0x26>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	607b      	str	r3, [r7, #4]
}
 80065bc:	bf00      	nop
 80065be:	bf00      	nop
 80065c0:	e7fd      	b.n	80065be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065c2:	4b0a      	ldr	r3, [pc, #40]	@ (80065ec <vPortExitCritical+0x50>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	4a08      	ldr	r2, [pc, #32]	@ (80065ec <vPortExitCritical+0x50>)
 80065ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065cc:	4b07      	ldr	r3, [pc, #28]	@ (80065ec <vPortExitCritical+0x50>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <vPortExitCritical+0x44>
 80065d4:	2300      	movs	r3, #0
 80065d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	f383 8811 	msr	BASEPRI, r3
}
 80065de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	2000000c 	.word	0x2000000c

080065f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065f0:	f3ef 8009 	mrs	r0, PSP
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006630 <pxCurrentTCBConst>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006600:	6010      	str	r0, [r2, #0]
 8006602:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006606:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800660a:	f380 8811 	msr	BASEPRI, r0
 800660e:	f7fe ff17 	bl	8005440 <vTaskSwitchContext>
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8811 	msr	BASEPRI, r0
 800661a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800661e:	6819      	ldr	r1, [r3, #0]
 8006620:	6808      	ldr	r0, [r1, #0]
 8006622:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006626:	f380 8809 	msr	PSP, r0
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	4770      	bx	lr

08006630 <pxCurrentTCBConst>:
 8006630:	20001b88 	.word	0x20001b88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop

08006638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	607b      	str	r3, [r7, #4]
}
 8006650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006652:	f7fe fe35 	bl	80052c0 <xTaskIncrementTick>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800665c:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <SysTick_Handler+0x40>)
 800665e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	2300      	movs	r3, #0
 8006666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f383 8811 	msr	BASEPRI, r3
}
 800666e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	e000ed04 	.word	0xe000ed04

0800667c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006680:	4b0a      	ldr	r3, [pc, #40]	@ (80066ac <vPortSetupTimerInterrupt+0x30>)
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006686:	4b0a      	ldr	r3, [pc, #40]	@ (80066b0 <vPortSetupTimerInterrupt+0x34>)
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800668c:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <vPortSetupTimerInterrupt+0x38>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a09      	ldr	r2, [pc, #36]	@ (80066b8 <vPortSetupTimerInterrupt+0x3c>)
 8006692:	fba2 2303 	umull	r2, r3, r2, r3
 8006696:	099b      	lsrs	r3, r3, #6
 8006698:	4a08      	ldr	r2, [pc, #32]	@ (80066bc <vPortSetupTimerInterrupt+0x40>)
 800669a:	3b01      	subs	r3, #1
 800669c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800669e:	4b03      	ldr	r3, [pc, #12]	@ (80066ac <vPortSetupTimerInterrupt+0x30>)
 80066a0:	2207      	movs	r2, #7
 80066a2:	601a      	str	r2, [r3, #0]
}
 80066a4:	bf00      	nop
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr
 80066ac:	e000e010 	.word	0xe000e010
 80066b0:	e000e018 	.word	0xe000e018
 80066b4:	20000000 	.word	0x20000000
 80066b8:	10624dd3 	.word	0x10624dd3
 80066bc:	e000e014 	.word	0xe000e014

080066c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066c6:	f3ef 8305 	mrs	r3, IPSR
 80066ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b0f      	cmp	r3, #15
 80066d0:	d915      	bls.n	80066fe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066d2:	4a17      	ldr	r2, [pc, #92]	@ (8006730 <vPortValidateInterruptPriority+0x70>)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066dc:	4b15      	ldr	r3, [pc, #84]	@ (8006734 <vPortValidateInterruptPriority+0x74>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	7afa      	ldrb	r2, [r7, #11]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d20b      	bcs.n	80066fe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	607b      	str	r3, [r7, #4]
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	e7fd      	b.n	80066fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006738 <vPortValidateInterruptPriority+0x78>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006706:	4b0d      	ldr	r3, [pc, #52]	@ (800673c <vPortValidateInterruptPriority+0x7c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d90b      	bls.n	8006726 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	603b      	str	r3, [r7, #0]
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	e7fd      	b.n	8006722 <vPortValidateInterruptPriority+0x62>
	}
 8006726:	bf00      	nop
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr
 8006730:	e000e3f0 	.word	0xe000e3f0
 8006734:	200021b4 	.word	0x200021b4
 8006738:	e000ed0c 	.word	0xe000ed0c
 800673c:	200021b8 	.word	0x200021b8

08006740 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	@ 0x28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006748:	2300      	movs	r3, #0
 800674a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800674c:	f7fe fcfe 	bl	800514c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006750:	4b5a      	ldr	r3, [pc, #360]	@ (80068bc <pvPortMalloc+0x17c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006758:	f000 f916 	bl	8006988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800675c:	4b58      	ldr	r3, [pc, #352]	@ (80068c0 <pvPortMalloc+0x180>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	f040 8090 	bne.w	800688a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01e      	beq.n	80067ae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006770:	2208      	movs	r2, #8
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4413      	add	r3, r2
 8006776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	2b00      	cmp	r3, #0
 8006780:	d015      	beq.n	80067ae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f023 0307 	bic.w	r3, r3, #7
 8006788:	3308      	adds	r3, #8
 800678a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00b      	beq.n	80067ae <pvPortMalloc+0x6e>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	617b      	str	r3, [r7, #20]
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	e7fd      	b.n	80067aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d06a      	beq.n	800688a <pvPortMalloc+0x14a>
 80067b4:	4b43      	ldr	r3, [pc, #268]	@ (80068c4 <pvPortMalloc+0x184>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d865      	bhi.n	800688a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067be:	4b42      	ldr	r3, [pc, #264]	@ (80068c8 <pvPortMalloc+0x188>)
 80067c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067c2:	4b41      	ldr	r3, [pc, #260]	@ (80068c8 <pvPortMalloc+0x188>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067c8:	e004      	b.n	80067d4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d903      	bls.n	80067e6 <pvPortMalloc+0xa6>
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f1      	bne.n	80067ca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067e6:	4b35      	ldr	r3, [pc, #212]	@ (80068bc <pvPortMalloc+0x17c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d04c      	beq.n	800688a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2208      	movs	r2, #8
 80067f6:	4413      	add	r3, r2
 80067f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	1ad2      	subs	r2, r2, r3
 800680a:	2308      	movs	r3, #8
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	429a      	cmp	r2, r3
 8006810:	d920      	bls.n	8006854 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4413      	add	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00b      	beq.n	800683c <pvPortMalloc+0xfc>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	613b      	str	r3, [r7, #16]
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	e7fd      	b.n	8006838 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800683c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	1ad2      	subs	r2, r2, r3
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800684e:	69b8      	ldr	r0, [r7, #24]
 8006850:	f000 f8fc 	bl	8006a4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006854:	4b1b      	ldr	r3, [pc, #108]	@ (80068c4 <pvPortMalloc+0x184>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	4a19      	ldr	r2, [pc, #100]	@ (80068c4 <pvPortMalloc+0x184>)
 8006860:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006862:	4b18      	ldr	r3, [pc, #96]	@ (80068c4 <pvPortMalloc+0x184>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4b19      	ldr	r3, [pc, #100]	@ (80068cc <pvPortMalloc+0x18c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d203      	bcs.n	8006876 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800686e:	4b15      	ldr	r3, [pc, #84]	@ (80068c4 <pvPortMalloc+0x184>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a16      	ldr	r2, [pc, #88]	@ (80068cc <pvPortMalloc+0x18c>)
 8006874:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	4b11      	ldr	r3, [pc, #68]	@ (80068c0 <pvPortMalloc+0x180>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	431a      	orrs	r2, r3
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800688a:	f7fe fc6d 	bl	8005168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <pvPortMalloc+0x170>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60fb      	str	r3, [r7, #12]
}
 80068aa:	bf00      	nop
 80068ac:	bf00      	nop
 80068ae:	e7fd      	b.n	80068ac <pvPortMalloc+0x16c>
	return pvReturn;
 80068b0:	69fb      	ldr	r3, [r7, #28]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3728      	adds	r7, #40	@ 0x28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	200041c4 	.word	0x200041c4
 80068c0:	200041d0 	.word	0x200041d0
 80068c4:	200041c8 	.word	0x200041c8
 80068c8:	200041bc 	.word	0x200041bc
 80068cc:	200041cc 	.word	0x200041cc

080068d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d04a      	beq.n	8006978 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068e2:	2308      	movs	r3, #8
 80068e4:	425b      	negs	r3, r3
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4413      	add	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	4b22      	ldr	r3, [pc, #136]	@ (8006980 <vPortFree+0xb0>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10b      	bne.n	8006916 <vPortFree+0x46>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	60fb      	str	r3, [r7, #12]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <vPortFree+0x66>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	60bb      	str	r3, [r7, #8]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	4b11      	ldr	r3, [pc, #68]	@ (8006980 <vPortFree+0xb0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4013      	ands	r3, r2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d019      	beq.n	8006978 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d115      	bne.n	8006978 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	4b0b      	ldr	r3, [pc, #44]	@ (8006980 <vPortFree+0xb0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	43db      	mvns	r3, r3
 8006956:	401a      	ands	r2, r3
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800695c:	f7fe fbf6 	bl	800514c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	4b07      	ldr	r3, [pc, #28]	@ (8006984 <vPortFree+0xb4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4413      	add	r3, r2
 800696a:	4a06      	ldr	r2, [pc, #24]	@ (8006984 <vPortFree+0xb4>)
 800696c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800696e:	6938      	ldr	r0, [r7, #16]
 8006970:	f000 f86c 	bl	8006a4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006974:	f7fe fbf8 	bl	8005168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006978:	bf00      	nop
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	200041d0 	.word	0x200041d0
 8006984:	200041c8 	.word	0x200041c8

08006988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800698e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006994:	4b27      	ldr	r3, [pc, #156]	@ (8006a34 <prvHeapInit+0xac>)
 8006996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00c      	beq.n	80069bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3307      	adds	r3, #7
 80069a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0307 	bic.w	r3, r3, #7
 80069ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006a34 <prvHeapInit+0xac>)
 80069b8:	4413      	add	r3, r2
 80069ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a38 <prvHeapInit+0xb0>)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006a38 <prvHeapInit+0xb0>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069d4:	2208      	movs	r2, #8
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0307 	bic.w	r3, r3, #7
 80069e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4a15      	ldr	r2, [pc, #84]	@ (8006a3c <prvHeapInit+0xb4>)
 80069e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069ea:	4b14      	ldr	r3, [pc, #80]	@ (8006a3c <prvHeapInit+0xb4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069f2:	4b12      	ldr	r3, [pc, #72]	@ (8006a3c <prvHeapInit+0xb4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	1ad2      	subs	r2, r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a08:	4b0c      	ldr	r3, [pc, #48]	@ (8006a3c <prvHeapInit+0xb4>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	4a0a      	ldr	r2, [pc, #40]	@ (8006a40 <prvHeapInit+0xb8>)
 8006a16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	4a09      	ldr	r2, [pc, #36]	@ (8006a44 <prvHeapInit+0xbc>)
 8006a1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a20:	4b09      	ldr	r3, [pc, #36]	@ (8006a48 <prvHeapInit+0xc0>)
 8006a22:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006a26:	601a      	str	r2, [r3, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	200021bc 	.word	0x200021bc
 8006a38:	200041bc 	.word	0x200041bc
 8006a3c:	200041c4 	.word	0x200041c4
 8006a40:	200041cc 	.word	0x200041cc
 8006a44:	200041c8 	.word	0x200041c8
 8006a48:	200041d0 	.word	0x200041d0

08006a4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a54:	4b27      	ldr	r3, [pc, #156]	@ (8006af4 <prvInsertBlockIntoFreeList+0xa8>)
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e002      	b.n	8006a60 <prvInsertBlockIntoFreeList+0x14>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d8f7      	bhi.n	8006a5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	4413      	add	r3, r2
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d108      	bne.n	8006a8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	441a      	add	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	441a      	add	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d118      	bne.n	8006ad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b14      	ldr	r3, [pc, #80]	@ (8006af8 <prvInsertBlockIntoFreeList+0xac>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d00d      	beq.n	8006aca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	441a      	add	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	e008      	b.n	8006adc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006aca:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <prvInsertBlockIntoFreeList+0xac>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e003      	b.n	8006adc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d002      	beq.n	8006aea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr
 8006af4:	200041bc 	.word	0x200041bc
 8006af8:	200041c4 	.word	0x200041c4

08006afc <memset>:
 8006afc:	4603      	mov	r3, r0
 8006afe:	4402      	add	r2, r0
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d100      	bne.n	8006b06 <memset+0xa>
 8006b04:	4770      	bx	lr
 8006b06:	f803 1b01 	strb.w	r1, [r3], #1
 8006b0a:	e7f9      	b.n	8006b00 <memset+0x4>

08006b0c <_reclaim_reent>:
 8006b0c:	4b29      	ldr	r3, [pc, #164]	@ (8006bb4 <_reclaim_reent+0xa8>)
 8006b0e:	b570      	push	{r4, r5, r6, lr}
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4604      	mov	r4, r0
 8006b14:	4283      	cmp	r3, r0
 8006b16:	d04b      	beq.n	8006bb0 <_reclaim_reent+0xa4>
 8006b18:	69c3      	ldr	r3, [r0, #28]
 8006b1a:	b1ab      	cbz	r3, 8006b48 <_reclaim_reent+0x3c>
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	b16b      	cbz	r3, 8006b3c <_reclaim_reent+0x30>
 8006b20:	2500      	movs	r5, #0
 8006b22:	69e3      	ldr	r3, [r4, #28]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	5959      	ldr	r1, [r3, r5]
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	d13b      	bne.n	8006ba4 <_reclaim_reent+0x98>
 8006b2c:	3504      	adds	r5, #4
 8006b2e:	2d80      	cmp	r5, #128	@ 0x80
 8006b30:	d1f7      	bne.n	8006b22 <_reclaim_reent+0x16>
 8006b32:	69e3      	ldr	r3, [r4, #28]
 8006b34:	4620      	mov	r0, r4
 8006b36:	68d9      	ldr	r1, [r3, #12]
 8006b38:	f000 f872 	bl	8006c20 <_free_r>
 8006b3c:	69e3      	ldr	r3, [r4, #28]
 8006b3e:	6819      	ldr	r1, [r3, #0]
 8006b40:	b111      	cbz	r1, 8006b48 <_reclaim_reent+0x3c>
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 f86c 	bl	8006c20 <_free_r>
 8006b48:	6961      	ldr	r1, [r4, #20]
 8006b4a:	b111      	cbz	r1, 8006b52 <_reclaim_reent+0x46>
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f000 f867 	bl	8006c20 <_free_r>
 8006b52:	69e1      	ldr	r1, [r4, #28]
 8006b54:	b111      	cbz	r1, 8006b5c <_reclaim_reent+0x50>
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 f862 	bl	8006c20 <_free_r>
 8006b5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006b5e:	b111      	cbz	r1, 8006b66 <_reclaim_reent+0x5a>
 8006b60:	4620      	mov	r0, r4
 8006b62:	f000 f85d 	bl	8006c20 <_free_r>
 8006b66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b68:	b111      	cbz	r1, 8006b70 <_reclaim_reent+0x64>
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 f858 	bl	8006c20 <_free_r>
 8006b70:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006b72:	b111      	cbz	r1, 8006b7a <_reclaim_reent+0x6e>
 8006b74:	4620      	mov	r0, r4
 8006b76:	f000 f853 	bl	8006c20 <_free_r>
 8006b7a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006b7c:	b111      	cbz	r1, 8006b84 <_reclaim_reent+0x78>
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 f84e 	bl	8006c20 <_free_r>
 8006b84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006b86:	b111      	cbz	r1, 8006b8e <_reclaim_reent+0x82>
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 f849 	bl	8006c20 <_free_r>
 8006b8e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006b90:	b111      	cbz	r1, 8006b98 <_reclaim_reent+0x8c>
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 f844 	bl	8006c20 <_free_r>
 8006b98:	6a23      	ldr	r3, [r4, #32]
 8006b9a:	b14b      	cbz	r3, 8006bb0 <_reclaim_reent+0xa4>
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ba2:	4718      	bx	r3
 8006ba4:	680e      	ldr	r6, [r1, #0]
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 f83a 	bl	8006c20 <_free_r>
 8006bac:	4631      	mov	r1, r6
 8006bae:	e7bb      	b.n	8006b28 <_reclaim_reent+0x1c>
 8006bb0:	bd70      	pop	{r4, r5, r6, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000010 	.word	0x20000010

08006bb8 <__libc_init_array>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	2600      	movs	r6, #0
 8006bbc:	4d0c      	ldr	r5, [pc, #48]	@ (8006bf0 <__libc_init_array+0x38>)
 8006bbe:	4c0d      	ldr	r4, [pc, #52]	@ (8006bf4 <__libc_init_array+0x3c>)
 8006bc0:	1b64      	subs	r4, r4, r5
 8006bc2:	10a4      	asrs	r4, r4, #2
 8006bc4:	42a6      	cmp	r6, r4
 8006bc6:	d109      	bne.n	8006bdc <__libc_init_array+0x24>
 8006bc8:	f000 f87e 	bl	8006cc8 <_init>
 8006bcc:	2600      	movs	r6, #0
 8006bce:	4d0a      	ldr	r5, [pc, #40]	@ (8006bf8 <__libc_init_array+0x40>)
 8006bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8006bfc <__libc_init_array+0x44>)
 8006bd2:	1b64      	subs	r4, r4, r5
 8006bd4:	10a4      	asrs	r4, r4, #2
 8006bd6:	42a6      	cmp	r6, r4
 8006bd8:	d105      	bne.n	8006be6 <__libc_init_array+0x2e>
 8006bda:	bd70      	pop	{r4, r5, r6, pc}
 8006bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be0:	4798      	blx	r3
 8006be2:	3601      	adds	r6, #1
 8006be4:	e7ee      	b.n	8006bc4 <__libc_init_array+0xc>
 8006be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bea:	4798      	blx	r3
 8006bec:	3601      	adds	r6, #1
 8006bee:	e7f2      	b.n	8006bd6 <__libc_init_array+0x1e>
 8006bf0:	08006f8c 	.word	0x08006f8c
 8006bf4:	08006f8c 	.word	0x08006f8c
 8006bf8:	08006f8c 	.word	0x08006f8c
 8006bfc:	08006f90 	.word	0x08006f90

08006c00 <__retarget_lock_acquire_recursive>:
 8006c00:	4770      	bx	lr

08006c02 <__retarget_lock_release_recursive>:
 8006c02:	4770      	bx	lr

08006c04 <memcpy>:
 8006c04:	440a      	add	r2, r1
 8006c06:	4291      	cmp	r1, r2
 8006c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c0c:	d100      	bne.n	8006c10 <memcpy+0xc>
 8006c0e:	4770      	bx	lr
 8006c10:	b510      	push	{r4, lr}
 8006c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c16:	4291      	cmp	r1, r2
 8006c18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c1c:	d1f9      	bne.n	8006c12 <memcpy+0xe>
 8006c1e:	bd10      	pop	{r4, pc}

08006c20 <_free_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4605      	mov	r5, r0
 8006c24:	2900      	cmp	r1, #0
 8006c26:	d040      	beq.n	8006caa <_free_r+0x8a>
 8006c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c2c:	1f0c      	subs	r4, r1, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	bfb8      	it	lt
 8006c32:	18e4      	addlt	r4, r4, r3
 8006c34:	f000 f83c 	bl	8006cb0 <__malloc_lock>
 8006c38:	4a1c      	ldr	r2, [pc, #112]	@ (8006cac <_free_r+0x8c>)
 8006c3a:	6813      	ldr	r3, [r2, #0]
 8006c3c:	b933      	cbnz	r3, 8006c4c <_free_r+0x2c>
 8006c3e:	6063      	str	r3, [r4, #4]
 8006c40:	6014      	str	r4, [r2, #0]
 8006c42:	4628      	mov	r0, r5
 8006c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c48:	f000 b838 	b.w	8006cbc <__malloc_unlock>
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	d908      	bls.n	8006c62 <_free_r+0x42>
 8006c50:	6820      	ldr	r0, [r4, #0]
 8006c52:	1821      	adds	r1, r4, r0
 8006c54:	428b      	cmp	r3, r1
 8006c56:	bf01      	itttt	eq
 8006c58:	6819      	ldreq	r1, [r3, #0]
 8006c5a:	685b      	ldreq	r3, [r3, #4]
 8006c5c:	1809      	addeq	r1, r1, r0
 8006c5e:	6021      	streq	r1, [r4, #0]
 8006c60:	e7ed      	b.n	8006c3e <_free_r+0x1e>
 8006c62:	461a      	mov	r2, r3
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	b10b      	cbz	r3, 8006c6c <_free_r+0x4c>
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	d9fa      	bls.n	8006c62 <_free_r+0x42>
 8006c6c:	6811      	ldr	r1, [r2, #0]
 8006c6e:	1850      	adds	r0, r2, r1
 8006c70:	42a0      	cmp	r0, r4
 8006c72:	d10b      	bne.n	8006c8c <_free_r+0x6c>
 8006c74:	6820      	ldr	r0, [r4, #0]
 8006c76:	4401      	add	r1, r0
 8006c78:	1850      	adds	r0, r2, r1
 8006c7a:	4283      	cmp	r3, r0
 8006c7c:	6011      	str	r1, [r2, #0]
 8006c7e:	d1e0      	bne.n	8006c42 <_free_r+0x22>
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	4408      	add	r0, r1
 8006c86:	6010      	str	r0, [r2, #0]
 8006c88:	6053      	str	r3, [r2, #4]
 8006c8a:	e7da      	b.n	8006c42 <_free_r+0x22>
 8006c8c:	d902      	bls.n	8006c94 <_free_r+0x74>
 8006c8e:	230c      	movs	r3, #12
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	e7d6      	b.n	8006c42 <_free_r+0x22>
 8006c94:	6820      	ldr	r0, [r4, #0]
 8006c96:	1821      	adds	r1, r4, r0
 8006c98:	428b      	cmp	r3, r1
 8006c9a:	bf01      	itttt	eq
 8006c9c:	6819      	ldreq	r1, [r3, #0]
 8006c9e:	685b      	ldreq	r3, [r3, #4]
 8006ca0:	1809      	addeq	r1, r1, r0
 8006ca2:	6021      	streq	r1, [r4, #0]
 8006ca4:	6063      	str	r3, [r4, #4]
 8006ca6:	6054      	str	r4, [r2, #4]
 8006ca8:	e7cb      	b.n	8006c42 <_free_r+0x22>
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	20004310 	.word	0x20004310

08006cb0 <__malloc_lock>:
 8006cb0:	4801      	ldr	r0, [pc, #4]	@ (8006cb8 <__malloc_lock+0x8>)
 8006cb2:	f7ff bfa5 	b.w	8006c00 <__retarget_lock_acquire_recursive>
 8006cb6:	bf00      	nop
 8006cb8:	2000430c 	.word	0x2000430c

08006cbc <__malloc_unlock>:
 8006cbc:	4801      	ldr	r0, [pc, #4]	@ (8006cc4 <__malloc_unlock+0x8>)
 8006cbe:	f7ff bfa0 	b.w	8006c02 <__retarget_lock_release_recursive>
 8006cc2:	bf00      	nop
 8006cc4:	2000430c 	.word	0x2000430c

08006cc8 <_init>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

08006cd4 <_fini>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr
