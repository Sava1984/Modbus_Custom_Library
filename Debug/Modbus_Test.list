
Modbus_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08006dd0  08006dd0  00007dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800709c  0800709c  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  0800709c  0800709c  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800709c  0800709c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800709c  0800709c  0000809c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070a0  080070a0  000080a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080070a4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042b8  20000060  08007104  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004318  08007104  00009318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018513  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fe  00000000  00000000  0002159c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00024da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa4  00000000  00000000  000261b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019884  00000000  00000000  0002715c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d50  00000000  00000000  000409e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e76  00000000  00000000  00058730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec5a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005654  00000000  00000000  000ec5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f1c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006db8 	.word	0x08006db8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006db8 	.word	0x08006db8

08000150 <HAL_UART_TxCpltCallback>:
//}



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000158:	2201      	movs	r2, #1
 800015a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800015e:	4803      	ldr	r0, [pc, #12]	@ (800016c <HAL_UART_TxCpltCallback+0x1c>)
 8000160:	f001 fd02 	bl	8001b68 <HAL_GPIO_WritePin>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	40011000 	.word	0x40011000

08000170 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]

	/* Modbus RTU RX callback BEGIN */
    if (UartHandle->Instance == USART1){
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a1a      	ldr	r2, [pc, #104]	@ (80001ec <HAL_UART_RxCpltCallback+0x7c>)
 8000182:	4293      	cmp	r3, r2
 8000184:	d114      	bne.n	80001b0 <HAL_UART_RxCpltCallback+0x40>

		RingAdd(&ctx->Buffer, dataRX);
 8000186:	4b1a      	ldr	r3, [pc, #104]	@ (80001f0 <HAL_UART_RxCpltCallback+0x80>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	33fc      	adds	r3, #252	@ 0xfc
 800018c:	4a19      	ldr	r2, [pc, #100]	@ (80001f4 <HAL_UART_RxCpltCallback+0x84>)
 800018e:	7812      	ldrb	r2, [r2, #0]
 8000190:	4611      	mov	r1, r2
 8000192:	4618      	mov	r0, r3
 8000194:	f000 fa3e 	bl	8000614 <RingAdd>
		HAL_UART_Receive_IT(&huart1, &dataRX, 1);
 8000198:	2201      	movs	r2, #1
 800019a:	4916      	ldr	r1, [pc, #88]	@ (80001f4 <HAL_UART_RxCpltCallback+0x84>)
 800019c:	4816      	ldr	r0, [pc, #88]	@ (80001f8 <HAL_UART_RxCpltCallback+0x88>)
 800019e:	f002 fbd5 	bl	800294c <HAL_UART_Receive_IT>
		osSemaphoreRelease(ctx->mSem);
 80001a2:	4b13      	ldr	r3, [pc, #76]	@ (80001f0 <HAL_UART_RxCpltCallback+0x80>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80001aa:	4618      	mov	r0, r3
 80001ac:	f003 fc84 	bl	8003ab8 <osSemaphoreRelease>
    }
    if (UartHandle->Instance == USART2){
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a11      	ldr	r2, [pc, #68]	@ (80001fc <HAL_UART_RxCpltCallback+0x8c>)
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d114      	bne.n	80001e4 <HAL_UART_RxCpltCallback+0x74>

		RingAdd(&ctx2->Buffer, dataRX2);
 80001ba:	4b11      	ldr	r3, [pc, #68]	@ (8000200 <HAL_UART_RxCpltCallback+0x90>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	33fc      	adds	r3, #252	@ 0xfc
 80001c0:	4a10      	ldr	r2, [pc, #64]	@ (8000204 <HAL_UART_RxCpltCallback+0x94>)
 80001c2:	7812      	ldrb	r2, [r2, #0]
 80001c4:	4611      	mov	r1, r2
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 fa24 	bl	8000614 <RingAdd>
		HAL_UART_Receive_IT(&huart2, &dataRX2, 1);
 80001cc:	2201      	movs	r2, #1
 80001ce:	490d      	ldr	r1, [pc, #52]	@ (8000204 <HAL_UART_RxCpltCallback+0x94>)
 80001d0:	480d      	ldr	r0, [pc, #52]	@ (8000208 <HAL_UART_RxCpltCallback+0x98>)
 80001d2:	f002 fbbb 	bl	800294c <HAL_UART_Receive_IT>
		osSemaphoreRelease(ctx2->mSem);
 80001d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000200 <HAL_UART_RxCpltCallback+0x90>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80001de:	4618      	mov	r0, r3
 80001e0:	f003 fc6a 	bl	8003ab8 <osSemaphoreRelease>
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 80001e4:	bf00      	nop
 80001e6:	3710      	adds	r7, #16
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40013800 	.word	0x40013800
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	200001a8 	.word	0x200001a8
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	40004400 	.word	0x40004400
 8000200:	200001a4 	.word	0x200001a4
 8000204:	200001a9 	.word	0x200001a9
 8000208:	200000c4 	.word	0x200000c4

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000210:	f000 ff72 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000214:	f000 f836 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000218:	f000 f8f4 	bl	8000404 <MX_GPIO_Init>
  MX_DMA_Init();
 800021c:	f000 f8cc 	bl	80003b8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000220:	f000 f876 	bl	8000310 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000224:	f000 f89e 	bl	8000364 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000228:	f003 fa04 	bl	8003634 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UsartRecieveSem */
  UsartRecieveSemHandle = osSemaphoreNew(1, 0, &UsartRecieveSem_attributes);
 800022c:	4a0d      	ldr	r2, [pc, #52]	@ (8000264 <main+0x58>)
 800022e:	2100      	movs	r1, #0
 8000230:	2001      	movs	r0, #1
 8000232:	f003 fb3f 	bl	80038b4 <osSemaphoreNew>
 8000236:	4603      	mov	r3, r0
 8000238:	4a0b      	ldr	r2, [pc, #44]	@ (8000268 <main+0x5c>)
 800023a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ModbusTask */
  ModbusTaskHandle = osThreadNew(StartModbusTask, NULL, &ModbusTask_attributes);
 800023c:	4a0b      	ldr	r2, [pc, #44]	@ (800026c <main+0x60>)
 800023e:	2100      	movs	r1, #0
 8000240:	480b      	ldr	r0, [pc, #44]	@ (8000270 <main+0x64>)
 8000242:	f003 fa5d 	bl	8003700 <osThreadNew>
 8000246:	4603      	mov	r3, r0
 8000248:	4a0a      	ldr	r2, [pc, #40]	@ (8000274 <main+0x68>)
 800024a:	6013      	str	r3, [r2, #0]

  /* creation of ModbusTask2 */
  ModbusTask2Handle = osThreadNew(StartModbusTask2, NULL, &ModbusTask2_attributes);
 800024c:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <main+0x6c>)
 800024e:	2100      	movs	r1, #0
 8000250:	480a      	ldr	r0, [pc, #40]	@ (800027c <main+0x70>)
 8000252:	f003 fa55 	bl	8003700 <osThreadNew>
 8000256:	4603      	mov	r3, r0
 8000258:	4a09      	ldr	r2, [pc, #36]	@ (8000280 <main+0x74>)
 800025a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800025c:	f003 fa1c 	bl	8003698 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000260:	bf00      	nop
 8000262:	e7fd      	b.n	8000260 <main+0x54>
 8000264:	08006e60 	.word	0x08006e60
 8000268:	2000019c 	.word	0x2000019c
 800026c:	08006e18 	.word	0x08006e18
 8000270:	080004b5 	.word	0x080004b5
 8000274:	20000194 	.word	0x20000194
 8000278:	08006e3c 	.word	0x08006e3c
 800027c:	08000559 	.word	0x08000559
 8000280:	20000198 	.word	0x20000198

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b090      	sub	sp, #64	@ 0x40
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2228      	movs	r2, #40	@ 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f006 fcaa 	bl	8006bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a6:	2301      	movs	r3, #1
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	2302      	movs	r3, #2
 80002ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 0318 	add.w	r3, r7, #24
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 fc63 	bl	8001b98 <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d8:	f000 f996 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	2302      	movs	r3, #2
 80002e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2102      	movs	r1, #2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fed0 	bl	800209c <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000302:	f000 f981 	bl	8000608 <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3740      	adds	r7, #64	@ 0x40
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000314:	4b11      	ldr	r3, [pc, #68]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000316:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <MX_USART1_UART_Init+0x50>)
 8000318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800031a:	4b10      	ldr	r3, [pc, #64]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800031c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b08      	ldr	r3, [pc, #32]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000346:	4805      	ldr	r0, [pc, #20]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000348:	f002 fab0 	bl	80028ac <HAL_UART_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000352:	f000 f959 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	2000007c 	.word	0x2000007c
 8000360:	40013800 	.word	0x40013800

08000364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000368:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <MX_USART2_UART_Init+0x4c>)
 800036a:	4a12      	ldr	r2, [pc, #72]	@ (80003b4 <MX_USART2_UART_Init+0x50>)
 800036c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800036e:	4b10      	ldr	r3, [pc, #64]	@ (80003b0 <MX_USART2_UART_Init+0x4c>)
 8000370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <MX_USART2_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <MX_USART2_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <MX_USART2_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <MX_USART2_UART_Init+0x4c>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <MX_USART2_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <MX_USART2_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800039a:	4805      	ldr	r0, [pc, #20]	@ (80003b0 <MX_USART2_UART_Init+0x4c>)
 800039c:	f002 fa86 	bl	80028ac <HAL_UART_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003a6:	f000 f92f 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200000c4 	.word	0x200000c4
 80003b4:	40004400 	.word	0x40004400

080003b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <MX_DMA_Init+0x48>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000400 <MX_DMA_Init+0x48>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <MX_DMA_Init+0x48>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2105      	movs	r1, #5
 80003da:	200e      	movs	r0, #14
 80003dc:	f000 ff73 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003e0:	200e      	movs	r0, #14
 80003e2:	f000 ff8c 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2105      	movs	r1, #5
 80003ea:	2011      	movs	r0, #17
 80003ec:	f000 ff6b 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003f0:	2011      	movs	r0, #17
 80003f2:	f000 ff84 	bl	80012fe <HAL_NVIC_EnableIRQ>

}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000418:	4b24      	ldr	r3, [pc, #144]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a23      	ldr	r2, [pc, #140]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800041e:	f043 0310 	orr.w	r3, r3, #16
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0310 	and.w	r3, r3, #16
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000430:	4b1e      	ldr	r3, [pc, #120]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a1d      	ldr	r2, [pc, #116]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0320 	and.w	r3, r3, #32
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000448:	4b18      	ldr	r3, [pc, #96]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a17      	ldr	r2, [pc, #92]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b15      	ldr	r3, [pc, #84]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0304 	and.w	r3, r3, #4
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000460:	4b12      	ldr	r3, [pc, #72]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a11      	ldr	r2, [pc, #68]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0308 	and.w	r3, r3, #8
 8000474:	603b      	str	r3, [r7, #0]
 8000476:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800047e:	480c      	ldr	r0, [pc, #48]	@ (80004b0 <MX_GPIO_Init+0xac>)
 8000480:	f001 fb72 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	2301      	movs	r3, #1
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000492:	2303      	movs	r3, #3
 8000494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	4804      	ldr	r0, [pc, #16]	@ (80004b0 <MX_GPIO_Init+0xac>)
 800049e:	f001 f9df 	bl	8001860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a2:	bf00      	nop
 80004a4:	3720      	adds	r7, #32
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40011000 	.word	0x40011000

080004b4 <StartModbusTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartModbusTask */
void StartModbusTask(void *argument)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b0b3      	sub	sp, #204	@ 0xcc
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t req[180];
	int rc;
	ctx = NULL;
 80004bc:	4b22      	ldr	r3, [pc, #136]	@ (8000548 <StartModbusTask+0x94>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
	ctx = pvPortMalloc(sizeof(ctx));
 80004c2:	2004      	movs	r0, #4
 80004c4:	f006 f9b4 	bl	8006830 <pvPortMalloc>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000548 <StartModbusTask+0x94>)
 80004cc:	6013      	str	r3, [r2, #0]
	ctx->mSem = osSemaphoreNew(1, 0, NULL);
 80004ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000548 <StartModbusTask+0x94>)
 80004d0:	681c      	ldr	r4, [r3, #0]
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	2001      	movs	r0, #1
 80004d8:	f003 f9ec 	bl	80038b4 <osSemaphoreNew>
 80004dc:	4603      	mov	r3, r0
 80004de:	f8c4 3200 	str.w	r3, [r4, #512]	@ 0x200
	ctx->response_timeout = 200;
 80004e2:	4b19      	ldr	r3, [pc, #100]	@ (8000548 <StartModbusTask+0x94>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	22c8      	movs	r2, #200	@ 0xc8
 80004e8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	ctx->slaveID = 2;
 80004ec:	4b16      	ldr	r3, [pc, #88]	@ (8000548 <StartModbusTask+0x94>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2202      	movs	r2, #2
 80004f2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &dataRX, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	4915      	ldr	r1, [pc, #84]	@ (800054c <StartModbusTask+0x98>)
 80004f8:	4815      	ldr	r0, [pc, #84]	@ (8000550 <StartModbusTask+0x9c>)
 80004fa:	f002 fa27 	bl	800294c <HAL_UART_Receive_IT>
	//memset(ctx->Holding_Regs,0,MAX_ADRESS*2);

	ctx->mbUart = &huart1;
 80004fe:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <StartModbusTask+0x94>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <StartModbusTask+0x9c>)
 8000504:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
//	for (int i=0;i<=32;i++)
//	{
//		ctx->Holding_Regs[i] = 0;
//	}
	ctx->Holding_Regs[0] = 0x55AA;
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <StartModbusTask+0x94>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f245 52aa 	movw	r2, #21930	@ 0x55aa
 8000510:	809a      	strh	r2, [r3, #4]
//	modbus_set_slave(ctx, 1);
//	modbus_set_byte_timeout(ctx, 0, 0);
//	modbus_set_response_timeout(ctx, 0, 0);
//	modbus_connect(ctx);
//	modbus_flush(ctx);
	uint8_t dat[5] = {1,2,3,4,5};
 8000512:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <StartModbusTask+0xa0>)
 8000514:	f107 0308 	add.w	r3, r7, #8
 8000518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051c:	6018      	str	r0, [r3, #0]
 800051e:	3304      	adds	r3, #4
 8000520:	7019      	strb	r1, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	rc = Modbus_Recieve(ctx);
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <StartModbusTask+0x94>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fac3 	bl	8000ab2 <Modbus_Recieve>
 800052c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
	ctx->Holding_Regs[1]++;
 8000530:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <StartModbusTask+0x94>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	88da      	ldrh	r2, [r3, #6]
 8000536:	3201      	adds	r2, #1
 8000538:	b292      	uxth	r2, r2
 800053a:	80da      	strh	r2, [r3, #6]
//		{
//			//modbus_reply(ctx, req, rc, modbus_map);
//		}
	 // HAL_UART_Transmit_DMA(&huart1, dat, 5);
		//modbus_map->tab_registers[1]+=1;
    osDelay(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f003 f98b 	bl	8003858 <osDelay>
	rc = Modbus_Recieve(ctx);
 8000542:	bf00      	nop
 8000544:	e7ed      	b.n	8000522 <StartModbusTask+0x6e>
 8000546:	bf00      	nop
 8000548:	200001a0 	.word	0x200001a0
 800054c:	200001a8 	.word	0x200001a8
 8000550:	2000007c 	.word	0x2000007c
 8000554:	08006df8 	.word	0x08006df8

08000558 <StartModbusTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartModbusTask2 */
void StartModbusTask2(void *argument)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartModbusTask2 */
	int rc;
	ctx2 = NULL;
 8000560:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <StartModbusTask2+0x80>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
	ctx2 = pvPortMalloc(sizeof(ctx2));
 8000566:	2004      	movs	r0, #4
 8000568:	f006 f962 	bl	8006830 <pvPortMalloc>
 800056c:	4603      	mov	r3, r0
 800056e:	4a1a      	ldr	r2, [pc, #104]	@ (80005d8 <StartModbusTask2+0x80>)
 8000570:	6013      	str	r3, [r2, #0]
	ctx2->mSem = osSemaphoreNew(1, 0, NULL);
 8000572:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <StartModbusTask2+0x80>)
 8000574:	681c      	ldr	r4, [r3, #0]
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	2001      	movs	r0, #1
 800057c:	f003 f99a 	bl	80038b4 <osSemaphoreNew>
 8000580:	4603      	mov	r3, r0
 8000582:	f8c4 3200 	str.w	r3, [r4, #512]	@ 0x200
	ctx2->response_timeout = 200;
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <StartModbusTask2+0x80>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	22c8      	movs	r2, #200	@ 0xc8
 800058c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	ctx2->slaveID = 3;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <StartModbusTask2+0x80>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2203      	movs	r2, #3
 8000596:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &dataRX2, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	4910      	ldr	r1, [pc, #64]	@ (80005dc <StartModbusTask2+0x84>)
 800059c:	4810      	ldr	r0, [pc, #64]	@ (80005e0 <StartModbusTask2+0x88>)
 800059e:	f002 f9d5 	bl	800294c <HAL_UART_Receive_IT>
	//memset(ctx->Holding_Regs,0,MAX_ADRESS*2);

	ctx2->mbUart = &huart2;
 80005a2:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <StartModbusTask2+0x80>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a0e      	ldr	r2, [pc, #56]	@ (80005e0 <StartModbusTask2+0x88>)
 80005a8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
	ctx2->Holding_Regs[0] = 0x3344;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <StartModbusTask2+0x80>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f243 3244 	movw	r2, #13124	@ 0x3344
 80005b4:	809a      	strh	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
	  rc = Modbus_Recieve(ctx2);
 80005b6:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <StartModbusTask2+0x80>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fa79 	bl	8000ab2 <Modbus_Recieve>
 80005c0:	60f8      	str	r0, [r7, #12]
	  ctx2->Holding_Regs[2]++;
 80005c2:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <StartModbusTask2+0x80>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	891a      	ldrh	r2, [r3, #8]
 80005c8:	3201      	adds	r2, #1
 80005ca:	b292      	uxth	r2, r2
 80005cc:	811a      	strh	r2, [r3, #8]
    osDelay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f003 f942 	bl	8003858 <osDelay>
	  rc = Modbus_Recieve(ctx2);
 80005d4:	bf00      	nop
 80005d6:	e7ee      	b.n	80005b6 <StartModbusTask2+0x5e>
 80005d8:	200001a4 	.word	0x200001a4
 80005dc:	200001a9 	.word	0x200001a9
 80005e0:	200000c4 	.word	0x200000c4

080005e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d101      	bne.n	80005fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005f6:	f000 fd95 	bl	8001124 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40000800 	.word	0x40000800

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <Error_Handler+0x8>

08000614 <RingAdd>:
#include "main.h"
#include "modbus.h"
#include "modbus_crc.h"

void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8000626:	4619      	mov	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	78fa      	ldrb	r2, [r7, #3]
 800062c:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8000634:	3301      	adds	r3, #1
 8000636:	425a      	negs	r2, r3
 8000638:	b2db      	uxtb	r3, r3
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	bf58      	it	pl
 800063e:	4253      	negpl	r3, r2
 8000640:	b2da      	uxtb	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
		xRingBuffer->overflow = true;
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
	}
	else
	{
		xRingBuffer->overflow = false;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
		xRingBuffer->u8available++;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8000656:	3301      	adds	r3, #1
 8000658:	b2da      	uxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
	}

}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <RingGetNBytes>:
{
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
}

uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	4613      	mov	r3, r2
 8000676:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <RingGetNBytes+0x1e>
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d101      	bne.n	800068c <RingGetNBytes+0x22>
 8000688:	2300      	movs	r3, #0
 800068a:	e037      	b.n	80006fc <RingGetNBytes+0x92>
	if(uNumber > MAX_BUFFER) return 0;

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800068c:	2300      	movs	r3, #0
 800068e:	75fb      	strb	r3, [r7, #23]
 8000690:	e019      	b.n	80006c6 <RingGetNBytes+0x5c>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8000698:	4619      	mov	r1, r3
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	4413      	add	r3, r2
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	5c52      	ldrb	r2, [r2, r1]
 80006a4:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80006ac:	3301      	adds	r3, #1
 80006ae:	425a      	negs	r2, r3
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	bf58      	it	pl
 80006b6:	4253      	negpl	r3, r2
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80006c0:	7dfb      	ldrb	r3, [r7, #23]
 80006c2:	3301      	adds	r3, #1
 80006c4:	75fb      	strb	r3, [r7, #23]
 80006c6:	7dfa      	ldrb	r2, [r7, #23]
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d205      	bcs.n	80006da <RingGetNBytes+0x70>
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80006d4:	7dfa      	ldrb	r2, [r7, #23]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3db      	bcc.n	8000692 <RingGetNBytes+0x28>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 80006e0:	7dfb      	ldrb	r3, [r7, #23]
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
	xRingBuffer->overflow = false;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
	RingClear(xRingBuffer);
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f000 f811 	bl	800071c <RingClear>

	return uCounter;
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <RingCountBytes>:

uint8_t RingCountBytes(modbusRingBuffer_t *xRingBuffer)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
return xRingBuffer->u8available;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <RingClear>:

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
xRingBuffer->u8end = 0;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
xRingBuffer->u8available = 0;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
xRingBuffer->overflow = false;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <WaitBytes>:
uint8_t WaitBytes(modbus *Handler,uint8_t ByteCount)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	460b      	mov	r3, r1
 8000758:	70fb      	strb	r3, [r7, #3]
	osStatus_t stat;
	while (RingCountBytes(&Handler->Buffer)<ByteCount)
 800075a:	e014      	b.n	8000786 <WaitBytes+0x38>
	{
		stat = osSemaphoreAcquire(Handler->mSem, Handler->response_timeout);//ждем пока придет нужное количество байт
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8000768:	4619      	mov	r1, r3
 800076a:	4610      	mov	r0, r2
 800076c:	f003 f93e 	bl	80039ec <osSemaphoreAcquire>
 8000770:	60f8      	str	r0, [r7, #12]
		if (stat != osOK)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d006      	beq.n	8000786 <WaitBytes+0x38>
		 {
			RingClear(&Handler->Buffer);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	33fc      	adds	r3, #252	@ 0xfc
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ffcd 	bl	800071c <RingClear>
			return 0;
 8000782:	2300      	movs	r3, #0
 8000784:	e00a      	b.n	800079c <WaitBytes+0x4e>
	while (RingCountBytes(&Handler->Buffer)<ByteCount)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	33fc      	adds	r3, #252	@ 0xfc
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffba 	bl	8000704 <RingCountBytes>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	4293      	cmp	r3, r2
 8000798:	d8e0      	bhi.n	800075c <WaitBytes+0xe>
		 }
	}
	return 1;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <BuildResponse>:
uint8_t BuildResponse(modbus *Handler,uint8_t cmd)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
	//uint16_t crc;

	switch (cmd)
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	f200 813d 	bhi.w	8000a32 <BuildResponse+0x28e>
 80007b8:	a201      	add	r2, pc, #4	@ (adr r2, 80007c0 <BuildResponse+0x1c>)
 80007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007be:	bf00      	nop
 80007c0:	080007d1 	.word	0x080007d1
 80007c4:	080008c1 	.word	0x080008c1
 80007c8:	0800095f 	.word	0x0800095f
 80007cc:	080009c9 	.word	0x080009c9
	{
	case MODBUS_HOLDING:
		Handler->ResponseBuffer[0] = Handler->slaveID;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	781a      	ldrb	r2, [r3, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		Handler->ResponseBuffer[1] = 0x03;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2203      	movs	r2, #3
 80007de:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		Handler->ResponseBuffer[2] = Handler->regcount*2;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	789b      	ldrb	r3, [r3, #2]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		int j=3;
 80007f0:	2303      	movs	r3, #3
 80007f2:	60fb      	str	r3, [r7, #12]
		for (int i =0;i<Handler->regcount;i++)			//переворачиваем байты, чтобы на мастере было удобно
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	e020      	b.n	800083c <BuildResponse+0x98>
		{
			Handler->ResponseBuffer[j++] = Handler->Holding_Regs[i]>>8;
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	889b      	ldrh	r3, [r3, #4]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	b299      	uxth	r1, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	60fa      	str	r2, [r7, #12]
 800080e:	b2c9      	uxtb	r1, r1
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4413      	add	r3, r2
 8000814:	460a      	mov	r2, r1
 8000816:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			Handler->ResponseBuffer[j++] = Handler->Holding_Regs[i];
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	8899      	ldrh	r1, [r3, #4]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60fa      	str	r2, [r7, #12]
 800082a:	b2c9      	uxtb	r1, r1
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	460a      	mov	r2, r1
 8000832:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		for (int i =0;i<Handler->regcount;i++)			//переворачиваем байты, чтобы на мастере было удобно
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3301      	adds	r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	461a      	mov	r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	4293      	cmp	r3, r2
 8000846:	dbd8      	blt.n	80007fa <BuildResponse+0x56>

		}
		//memcpy(Handler->ResponseBuffer+3,&Handler->Holding_Regs+Handler->offset,Handler->regcount*2);
		Handler->crc = crc16(Handler->ResponseBuffer,(Handler->regcount*2)+3);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	789b      	ldrb	r3, [r3, #2]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	b29b      	uxth	r3, r3
 8000856:	3303      	adds	r3, #3
 8000858:	b29b      	uxth	r3, r3
 800085a:	4619      	mov	r1, r3
 800085c:	4610      	mov	r0, r2
 800085e:	f000 f9fd 	bl	8000c5c <crc16>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
		Handler->ResponseBuffer[(Handler->regcount*2)+3] = ((uint8_t*)&Handler->crc)[1];
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	33f4      	adds	r3, #244	@ 0xf4
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	789b      	ldrb	r3, [r3, #2]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	3303      	adds	r3, #3
 800087a:	7811      	ldrb	r1, [r2, #0]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	4413      	add	r3, r2
 8000880:	460a      	mov	r2, r1
 8000882:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		Handler->ResponseBuffer[(Handler->regcount*2)+4] = ((uint8_t*)&Handler->crc)[0];
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	789b      	ldrb	r3, [r3, #2]
 8000890:	3302      	adds	r3, #2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	7811      	ldrb	r1, [r2, #0]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	460a      	mov	r2, r1
 800089c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		HAL_UART_Transmit_DMA(Handler->mbUart, Handler->ResponseBuffer, (Handler->regcount*2+5));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f8d3 0304 	ldr.w	r0, [r3, #772]	@ 0x304
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f503 7101 	add.w	r1, r3, #516	@ 0x204
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	789b      	ldrb	r3, [r3, #2]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	3305      	adds	r3, #5
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	461a      	mov	r2, r3
 80008ba:	f002 f86d 	bl	8002998 <HAL_UART_Transmit_DMA>
		break;
 80008be:	e0b8      	b.n	8000a32 <BuildResponse+0x28e>
	case MODBUS_WRITE_HOLDING:
		Handler->ResponseBuffer[0] = Handler->slaveID;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		Handler->ResponseBuffer[1] = 0x06;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2206      	movs	r2, #6
 80008ce:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		Handler->ResponseBuffer[2] = Handler->offset>>8;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	78db      	ldrb	r3, [r3, #3]
 80008d6:	121b      	asrs	r3, r3, #8
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		Handler->ResponseBuffer[3] = Handler->offset;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	78da      	ldrb	r2, [r3, #3]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
		Handler->ResponseBuffer[4] = Handler->Holding_Regs[Handler->offset]>>8;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	78db      	ldrb	r3, [r3, #3]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	0a1b      	lsrs	r3, r3, #8
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		Handler->ResponseBuffer[5] = Handler->Holding_Regs[Handler->offset];
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	78db      	ldrb	r3, [r3, #3]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	889b      	ldrh	r3, [r3, #4]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
		Handler->crc = crc16(Handler->ResponseBuffer,6);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800091c:	2106      	movs	r1, #6
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f99c 	bl	8000c5c <crc16>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
		Handler->ResponseBuffer[6] = ((uint8_t*)&Handler->crc)[1];
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	33f4      	adds	r3, #244	@ 0xf4
 8000932:	3301      	adds	r3, #1
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
		Handler->ResponseBuffer[7] = ((uint8_t*)&Handler->crc)[0];
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	33f4      	adds	r3, #244	@ 0xf4
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f883 220b 	strb.w	r2, [r3, #523]	@ 0x20b
		HAL_UART_Transmit_DMA(Handler->mbUart, Handler->ResponseBuffer, 8);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f8d3 0304 	ldr.w	r0, [r3, #772]	@ 0x304
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000954:	2208      	movs	r2, #8
 8000956:	4619      	mov	r1, r3
 8000958:	f002 f81e 	bl	8002998 <HAL_UART_Transmit_DMA>
		break;
 800095c:	e069      	b.n	8000a32 <BuildResponse+0x28e>
	case MODBUS_ERROR://illegal function
		Handler->ResponseBuffer[0] = Handler->slaveID;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		Handler->ResponseBuffer[1] = Handler->func|0x80;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	785b      	ldrb	r3, [r3, #1]
 800096c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000970:	b2da      	uxtb	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		Handler->ResponseBuffer[2] = 0x01;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2201      	movs	r2, #1
 800097c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		Handler->crc = crc16(Handler->ResponseBuffer,3);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000986:	2103      	movs	r1, #3
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f967 	bl	8000c5c <crc16>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
		Handler->ResponseBuffer[3] = ((uint8_t*)&Handler->crc)[1];
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	33f4      	adds	r3, #244	@ 0xf4
 800099c:	3301      	adds	r3, #1
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
		Handler->ResponseBuffer[4] = ((uint8_t*)&Handler->crc)[0];
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	33f4      	adds	r3, #244	@ 0xf4
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		HAL_UART_Transmit_DMA(Handler->mbUart, Handler->ResponseBuffer, 5);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f8d3 0304 	ldr.w	r0, [r3, #772]	@ 0x304
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80009be:	2205      	movs	r2, #5
 80009c0:	4619      	mov	r1, r3
 80009c2:	f001 ffe9 	bl	8002998 <HAL_UART_Transmit_DMA>
		break;
 80009c6:	e034      	b.n	8000a32 <BuildResponse+0x28e>
	case MODBUS_ERROR_ADRESS:	//illegal adress
		Handler->ResponseBuffer[0] = Handler->slaveID;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	781a      	ldrb	r2, [r3, #0]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		Handler->ResponseBuffer[1] = Handler->func|0x80;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	785b      	ldrb	r3, [r3, #1]
 80009d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		Handler->ResponseBuffer[2] = 0x02;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2202      	movs	r2, #2
 80009e6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		Handler->crc = crc16(Handler->ResponseBuffer,3);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80009f0:	2103      	movs	r1, #3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f932 	bl	8000c5c <crc16>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
		Handler->ResponseBuffer[3] = ((uint8_t*)&Handler->crc)[1];
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	33f4      	adds	r3, #244	@ 0xf4
 8000a06:	3301      	adds	r3, #1
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
		Handler->ResponseBuffer[4] = ((uint8_t*)&Handler->crc)[0];
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	33f4      	adds	r3, #244	@ 0xf4
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		HAL_UART_Transmit_DMA(Handler->mbUart, Handler->ResponseBuffer, 5);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f8d3 0304 	ldr.w	r0, [r3, #772]	@ 0x304
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000a28:	2205      	movs	r2, #5
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f001 ffb4 	bl	8002998 <HAL_UART_Transmit_DMA>
		break;
 8000a30:	bf00      	nop
	}

	//HAL_UART_Transmit_DMA(&huart1, Handler->ResponseBuffer, (Handler->regcount*2+5));
}
 8000a32:	bf00      	nop
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <Parse_Command>:
uint8_t Parse_Command (modbus *Handler,uint8_t *buf)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	 RingGetNBytes(&Handler->Buffer,buf+2,4);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f103 00fc 	add.w	r0, r3, #252	@ 0xfc
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	3302      	adds	r3, #2
 8000a50:	2204      	movs	r2, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	f7ff fe09 	bl	800066a <RingGetNBytes>
	Handler->offset = buf[3];
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	78da      	ldrb	r2, [r3, #3]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	70da      	strb	r2, [r3, #3]
	Handler->offset |= buf[2]<<8;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	78db      	ldrb	r3, [r3, #3]
 8000a64:	b25a      	sxtb	r2, r3
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	3302      	adds	r3, #2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	021b      	lsls	r3, r3, #8
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	70da      	strb	r2, [r3, #3]
	Handler->regcount = buf[5];
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	795a      	ldrb	r2, [r3, #5]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	709a      	strb	r2, [r3, #2]
	Handler->regcount |= buf[4];
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	789a      	ldrb	r2, [r3, #2]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	709a      	strb	r2, [r3, #2]
	if ((Handler->offset+Handler->regcount)>(START_ADRESS+MAX_ADRESS))
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	78db      	ldrb	r3, [r3, #3]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	789b      	ldrb	r3, [r3, #2]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2b20      	cmp	r3, #32
 8000aa2:	dd01      	ble.n	8000aa8 <Parse_Command+0x6c>
		{
			return 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e000      	b.n	8000aaa <Parse_Command+0x6e>
		}
	return 1;
 8000aa8:	2301      	movs	r3, #1
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <Modbus_Recieve>:
int32_t Modbus_Recieve (modbus *Handler)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	Handler->length_to_read = 2;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2202      	movs	r2, #2
 8000abe:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
	if (!WaitBytes(Handler,Handler->length_to_read))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4619      	mov	r1, r3
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff fe3e 	bl	800074e <WaitBytes>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <Modbus_Recieve+0x2a>
	{
		return 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e0ba      	b.n	8000c52 <Modbus_Recieve+0x1a0>
	}
	RingGetNBytes(&Handler->Buffer,Handler->recv,2);	// начинаем обработку если пришло хотя бы 2 байта
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f103 00fc 	add.w	r0, r3, #252	@ 0xfc
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8000ae8:	2202      	movs	r2, #2
 8000aea:	4619      	mov	r1, r3
 8000aec:	f7ff fdbd 	bl	800066a <RingGetNBytes>
	if (Handler->recv[0] != Handler->slaveID)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 230c 	ldrb.w	r2, [r3, #780]	@ 0x30c
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d006      	beq.n	8000b0c <Modbus_Recieve+0x5a>
		 {
			RingClear(&Handler->Buffer);	//не наш ID
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	33fc      	adds	r3, #252	@ 0xfc
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe0a 	bl	800071c <RingClear>
			return MODBUS_ERROR;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e0a2      	b.n	8000c52 <Modbus_Recieve+0x1a0>
		 }
	Handler->length_to_read += 2;					// если пришло для нас, читаем еоманду и параметры
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 8000b12:	1c9a      	adds	r2, r3, #2
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
	if (!WaitBytes(Handler,Handler->length_to_read))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4619      	mov	r1, r3
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fe12 	bl	800074e <WaitBytes>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <Modbus_Recieve+0x82>
		{
			return MODBUS_ERROR;
 8000b30:	2302      	movs	r3, #2
 8000b32:	e08e      	b.n	8000c52 <Modbus_Recieve+0x1a0>
		}
	if (!Parse_Command(Handler,Handler->recv))	// проверяем, что в запросе не превышен лимит регистров
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff7d 	bl	8000a3c <Parse_Command>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10a      	bne.n	8000b5e <Modbus_Recieve+0xac>
	{
		Handler->func = Handler->recv[1];
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 230d 	ldrb.w	r2, [r3, #781]	@ 0x30d
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	705a      	strb	r2, [r3, #1]
		BuildResponse(Handler,MODBUS_ERROR_ADRESS);
 8000b52:	2103      	movs	r1, #3
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fe25 	bl	80007a4 <BuildResponse>
		return MODBUS_ERROR_ADRESS;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e079      	b.n	8000c52 <Modbus_Recieve+0x1a0>
	}
	Handler->length_to_read = 2;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2202      	movs	r2, #2
 8000b62:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
	if (!WaitBytes(Handler,Handler->length_to_read))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	4619      	mov	r1, r3
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fdec 	bl	800074e <WaitBytes>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <Modbus_Recieve+0xce>
		{
			return 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e068      	b.n	8000c52 <Modbus_Recieve+0x1a0>
		}
	RingGetNBytes(&Handler->Buffer,Handler->recv+6,Handler->length_to_read);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 00fc 	add.w	r0, r3, #252	@ 0xfc
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8000b8c:	1d99      	adds	r1, r3, #6
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	461a      	mov	r2, r3
 8000b98:	f7ff fd67 	bl	800066a <RingGetNBytes>
	Handler->crc=crc16(Handler->recv,6);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8000ba2:	2106      	movs	r1, #6
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f859 	bl	8000c5c <crc16>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
	((uint8_t*)&Handler->Recv_crc)[1] = Handler->recv[6];
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f203 3322 	addw	r3, r3, #802	@ 0x322
 8000bba:	3301      	adds	r3, #1
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	f892 2312 	ldrb.w	r2, [r2, #786]	@ 0x312
 8000bc2:	701a      	strb	r2, [r3, #0]
	((uint8_t*)&Handler->Recv_crc)[0] = Handler->recv[7];
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f203 3322 	addw	r3, r3, #802	@ 0x322
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	f892 2313 	ldrb.w	r2, [r2, #787]	@ 0x313
 8000bd0:	701a      	strb	r2, [r3, #0]
	if (Handler->crc != Handler->Recv_crc)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f8b3 3322 	ldrh.w	r3, [r3, #802]	@ 0x322
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d001      	beq.n	8000be6 <Modbus_Recieve+0x134>
	{
		return 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e035      	b.n	8000c52 <Modbus_Recieve+0x1a0>
	}

	 switch (Handler->recv[1])
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 330d 	ldrb.w	r3, [r3, #781]	@ 0x30d
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d002      	beq.n	8000bf6 <Modbus_Recieve+0x144>
 8000bf0:	2b06      	cmp	r3, #6
 8000bf2:	d005      	beq.n	8000c00 <Modbus_Recieve+0x14e>
 8000bf4:	e01e      	b.n	8000c34 <Modbus_Recieve+0x182>
	 {
		 case READ_HOLDING:
				BuildResponse(Handler,MODBUS_HOLDING);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fdd3 	bl	80007a4 <BuildResponse>
			 break;
 8000bfe:	e027      	b.n	8000c50 <Modbus_Recieve+0x19e>
		 case WRITE_HOLDING:
				((uint8_t*)& Handler->Holding_Regs[Handler->offset])[1] = Handler->recv[5];
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	78db      	ldrb	r3, [r3, #3]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	f892 2311 	ldrb.w	r2, [r2, #785]	@ 0x311
 8000c14:	701a      	strb	r2, [r3, #0]
				((uint8_t*)& Handler->Holding_Regs[Handler->offset])[0] = Handler->recv[4];
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	78db      	ldrb	r3, [r3, #3]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	4413      	add	r3, r2
 8000c20:	3304      	adds	r3, #4
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	f892 2310 	ldrb.w	r2, [r2, #784]	@ 0x310
 8000c28:	701a      	strb	r2, [r3, #0]
				BuildResponse(Handler,MODBUS_WRITE_HOLDING);
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fdb9 	bl	80007a4 <BuildResponse>
			 break;
 8000c32:	e00d      	b.n	8000c50 <Modbus_Recieve+0x19e>
		 default:									// если функция не поддерживается, возвращаем ошибку
			 	 Handler->func = Handler->recv[1];
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 230d 	ldrb.w	r2, [r3, #781]	@ 0x30d
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	705a      	strb	r2, [r3, #1]
				 BuildResponse(Handler,MODBUS_ERROR);
 8000c3e:	2102      	movs	r1, #2
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fdaf 	bl	80007a4 <BuildResponse>
				 Handler->error = MODBUS_ERROR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2202      	movs	r2, #2
 8000c4a:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
			 break;
 8000c4e:	bf00      	nop
	 }


return 	MODBUS_OK;
 8000c50:	2304      	movs	r3, #4
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <crc16>:
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};


uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000c68:	23ff      	movs	r3, #255	@ 0xff
 8000c6a:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000c6c:	23ff      	movs	r3, #255	@ 0xff
 8000c6e:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000c70:	e013      	b.n	8000c9a <crc16+0x3e>
        i = crc_hi ^ *buffer++; /* calculate the CRC  */
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	4053      	eors	r3, r2
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	60bb      	str	r3, [r7, #8]
        crc_hi = crc_lo ^ table_crc_hi[i];
 8000c82:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc0 <crc16+0x64>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4413      	add	r3, r2
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	7bbb      	ldrb	r3, [r7, #14]
 8000c8c:	4053      	eors	r3, r2
 8000c8e:	73fb      	strb	r3, [r7, #15]
        crc_lo = table_crc_lo[i];
 8000c90:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc4 <crc16+0x68>)
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	4413      	add	r3, r2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	73bb      	strb	r3, [r7, #14]
    while (buffer_length--) {
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	1e5a      	subs	r2, r3, #1
 8000c9e:	807a      	strh	r2, [r7, #2]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1e6      	bne.n	8000c72 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	7bbb      	ldrb	r3, [r7, #14]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	b29b      	uxth	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	08006e70 	.word	0x08006e70
 8000cc4:	08006f70 	.word	0x08006f70

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <HAL_MspInit+0x68>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a17      	ldr	r2, [pc, #92]	@ (8000d30 <HAL_MspInit+0x68>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <HAL_MspInit+0x68>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_MspInit+0x68>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	4a11      	ldr	r2, [pc, #68]	@ (8000d30 <HAL_MspInit+0x68>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf0:	61d3      	str	r3, [r2, #28]
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <HAL_MspInit+0x68>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	210f      	movs	r1, #15
 8000d02:	f06f 0001 	mvn.w	r0, #1
 8000d06:	f000 fade 	bl	80012c6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_MspInit+0x6c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_MspInit+0x6c>)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000

08000d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a66      	ldr	r2, [pc, #408]	@ (8000eec <HAL_UART_MspInit+0x1b4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d161      	bne.n	8000e1c <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d58:	4b65      	ldr	r3, [pc, #404]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a64      	ldr	r2, [pc, #400]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000d5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b62      	ldr	r3, [pc, #392]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a5e      	ldr	r2, [pc, #376]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0318 	add.w	r3, r7, #24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4855      	ldr	r0, [pc, #340]	@ (8000ef4 <HAL_UART_MspInit+0x1bc>)
 8000d9e:	f000 fd5f 	bl	8001860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000da2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	4619      	mov	r1, r3
 8000db6:	484f      	ldr	r0, [pc, #316]	@ (8000ef4 <HAL_UART_MspInit+0x1bc>)
 8000db8:	f000 fd52 	bl	8001860 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000dbc:	4b4e      	ldr	r3, [pc, #312]	@ (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000dbe:	4a4f      	ldr	r2, [pc, #316]	@ (8000efc <HAL_UART_MspInit+0x1c4>)
 8000dc0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000dc4:	2210      	movs	r2, #16
 8000dc6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dce:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd4:	4b48      	ldr	r3, [pc, #288]	@ (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dda:	4b47      	ldr	r3, [pc, #284]	@ (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000de0:	4b45      	ldr	r3, [pc, #276]	@ (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000de6:	4b44      	ldr	r3, [pc, #272]	@ (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000de8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000dee:	4842      	ldr	r0, [pc, #264]	@ (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000df0:	f000 fa94 	bl	800131c <HAL_DMA_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000dfa:	f7ff fc05 	bl	8000608 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a3d      	ldr	r2, [pc, #244]	@ (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000e02:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e04:	4a3c      	ldr	r2, [pc, #240]	@ (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	2025      	movs	r0, #37	@ 0x25
 8000e10:	f000 fa59 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e14:	2025      	movs	r0, #37	@ 0x25
 8000e16:	f000 fa72 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e1a:	e063      	b.n	8000ee4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a37      	ldr	r2, [pc, #220]	@ (8000f00 <HAL_UART_MspInit+0x1c8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d15e      	bne.n	8000ee4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e26:	4b32      	ldr	r3, [pc, #200]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a31      	ldr	r2, [pc, #196]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a2b      	ldr	r2, [pc, #172]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b29      	ldr	r3, [pc, #164]	@ (8000ef0 <HAL_UART_MspInit+0x1b8>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e56:	2304      	movs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	4619      	mov	r1, r3
 8000e68:	4822      	ldr	r0, [pc, #136]	@ (8000ef4 <HAL_UART_MspInit+0x1bc>)
 8000e6a:	f000 fcf9 	bl	8001860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e6e:	2308      	movs	r3, #8
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0318 	add.w	r3, r7, #24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481c      	ldr	r0, [pc, #112]	@ (8000ef4 <HAL_UART_MspInit+0x1bc>)
 8000e82:	f000 fced 	bl	8001860 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000e86:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e88:	4a1f      	ldr	r2, [pc, #124]	@ (8000f08 <HAL_UART_MspInit+0x1d0>)
 8000e8a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e8e:	2210      	movs	r2, #16
 8000e90:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e9a:	2280      	movs	r2, #128	@ 0x80
 8000e9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000eb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eb6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000eb8:	4812      	ldr	r0, [pc, #72]	@ (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000eba:	f000 fa2f 	bl	800131c <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8000ec4:	f7ff fba0 	bl	8000608 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000ecc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ece:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2105      	movs	r1, #5
 8000ed8:	2026      	movs	r0, #38	@ 0x26
 8000eda:	f000 f9f4 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ede:	2026      	movs	r0, #38	@ 0x26
 8000ee0:	f000 fa0d 	bl	80012fe <HAL_NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	@ 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800
 8000ef8:	2000010c 	.word	0x2000010c
 8000efc:	40020044 	.word	0x40020044
 8000f00:	40004400 	.word	0x40004400
 8000f04:	20000150 	.word	0x20000150
 8000f08:	40020080 	.word	0x40020080

08000f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	@ 0x38
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000f22:	4b34      	ldr	r3, [pc, #208]	@ (8000ff4 <HAL_InitTick+0xe8>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a33      	ldr	r2, [pc, #204]	@ (8000ff4 <HAL_InitTick+0xe8>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ff4 <HAL_InitTick+0xe8>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f3a:	f107 0210 	add.w	r2, r7, #16
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fa19 	bl	800237c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d103      	bne.n	8000f5c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f54:	f001 f9ea 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8000f58:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f5a:	e004      	b.n	8000f66 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f5c:	f001 f9e6 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8000f60:	4603      	mov	r3, r0
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f68:	4a23      	ldr	r2, [pc, #140]	@ (8000ff8 <HAL_InitTick+0xec>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	0c9b      	lsrs	r3, r3, #18
 8000f70:	3b01      	subs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f74:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f76:	4a22      	ldr	r2, [pc, #136]	@ (8001000 <HAL_InitTick+0xf4>)
 8000f78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f80:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f82:	4a1e      	ldr	r2, [pc, #120]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f86:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000f9a:	4818      	ldr	r0, [pc, #96]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f9c:	f001 fa3c 	bl	8002418 <HAL_TIM_Base_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d11b      	bne.n	8000fe6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000fae:	4813      	ldr	r0, [pc, #76]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000fb0:	f001 fa8a 	bl	80024c8 <HAL_TIM_Base_Start_IT>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000fba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d111      	bne.n	8000fe6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fc2:	201e      	movs	r0, #30
 8000fc4:	f000 f99b 	bl	80012fe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b0f      	cmp	r3, #15
 8000fcc:	d808      	bhi.n	8000fe0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	201e      	movs	r0, #30
 8000fd4:	f000 f977 	bl	80012c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <HAL_InitTick+0xf8>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e002      	b.n	8000fe6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fe6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3738      	adds	r7, #56	@ 0x38
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	431bde83 	.word	0x431bde83
 8000ffc:	200001ac 	.word	0x200001ac
 8001000:	40000800 	.word	0x40000800
 8001004:	20000004 	.word	0x20000004

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
//DMA TX USART
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <DMA1_Channel4_IRQHandler+0x10>)
 8001042:	f000 fad9 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000010c 	.word	0x2000010c

08001050 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <DMA1_Channel7_IRQHandler+0x10>)
 8001056:	f000 facf 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000150 	.word	0x20000150

08001064 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <TIM4_IRQHandler+0x10>)
 800106a:	f001 fa7f 	bl	800256c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200001ac 	.word	0x200001ac

08001078 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <USART1_IRQHandler+0x10>)
 800107e:	f001 fcfb 	bl	8002a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000007c 	.word	0x2000007c

0800108c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <USART2_IRQHandler+0x10>)
 8001092:	f001 fcf1 	bl	8002a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200000c4 	.word	0x200000c4

080010a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010ac:	f7ff fff8 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b0:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010b2:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010b4:	4a0c      	ldr	r2, [pc, #48]	@ (80010e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a09      	ldr	r2, [pc, #36]	@ (80010ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010c8:	4c09      	ldr	r4, [pc, #36]	@ (80010f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d6:	f005 fde7 	bl	8006ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010da:	f7ff f897 	bl	800020c <main>
  bx lr
 80010de:	4770      	bx	lr
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010e8:	080070a4 	.word	0x080070a4
  ldr r2, =_sbss
 80010ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010f0:	20004318 	.word	0x20004318

080010f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC1_2_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <HAL_Init+0x28>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	@ (8001120 <HAL_Init+0x28>)
 8001102:	f043 0310 	orr.w	r3, r3, #16
 8001106:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 f8d1 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	200f      	movs	r0, #15
 8001110:	f7ff fefc 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fdd8 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40022000 	.word	0x40022000

08001124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_IncTick+0x1c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_IncTick+0x20>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a03      	ldr	r2, [pc, #12]	@ (8001144 <HAL_IncTick+0x20>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	20000008 	.word	0x20000008
 8001144:	200001f4 	.word	0x200001f4

08001148 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b02      	ldr	r3, [pc, #8]	@ (8001158 <HAL_GetTick+0x10>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	200001f4 	.word	0x200001f4

0800115c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4906      	ldr	r1, [pc, #24]	@ (80011f4 <__NVIC_EnableIRQ+0x34>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	@ (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	@ (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	@ 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff4f 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff64 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ffb2 	bl	800124c <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff81 	bl	80011f8 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff57 	bl	80011c0 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e043      	b.n	80013ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <HAL_DMA_Init+0xa8>)
 800133a:	4413      	add	r3, r2
 800133c:	4a22      	ldr	r2, [pc, #136]	@ (80013c8 <HAL_DMA_Init+0xac>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	009a      	lsls	r2, r3, #2
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a1f      	ldr	r2, [pc, #124]	@ (80013cc <HAL_DMA_Init+0xb0>)
 800134e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2202      	movs	r2, #2
 8001354:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001366:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800136a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	bffdfff8 	.word	0xbffdfff8
 80013c8:	cccccccd 	.word	0xcccccccd
 80013cc:	40020000 	.word	0x40020000

080013d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_DMA_Start_IT+0x20>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e04b      	b.n	8001488 <HAL_DMA_Start_IT+0xb8>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d13a      	bne.n	800147a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0201 	bic.w	r2, r2, #1
 8001420:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 f9eb 	bl	8001804 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001432:	2b00      	cmp	r3, #0
 8001434:	d008      	beq.n	8001448 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 020e 	orr.w	r2, r2, #14
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	e00f      	b.n	8001468 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0204 	bic.w	r2, r2, #4
 8001456:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 020a 	orr.w	r2, r2, #10
 8001466:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e005      	b.n	8001486 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001482:	2302      	movs	r3, #2
 8001484:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001486:	7dfb      	ldrb	r3, [r7, #23]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d008      	beq.n	80014ba <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2204      	movs	r2, #4
 80014ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e020      	b.n	80014fc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 020e 	bic.w	r2, r2, #14
 80014c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e2:	2101      	movs	r1, #1
 80014e4:	fa01 f202 	lsl.w	r2, r1, r2
 80014e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
	...

08001508 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d005      	beq.n	800152c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2204      	movs	r2, #4
 8001524:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e051      	b.n	80015d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 020e 	bic.w	r2, r2, #14
 800153a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a22      	ldr	r2, [pc, #136]	@ (80015dc <HAL_DMA_Abort_IT+0xd4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d029      	beq.n	80015aa <HAL_DMA_Abort_IT+0xa2>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a21      	ldr	r2, [pc, #132]	@ (80015e0 <HAL_DMA_Abort_IT+0xd8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d022      	beq.n	80015a6 <HAL_DMA_Abort_IT+0x9e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a1f      	ldr	r2, [pc, #124]	@ (80015e4 <HAL_DMA_Abort_IT+0xdc>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01a      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x98>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1e      	ldr	r2, [pc, #120]	@ (80015e8 <HAL_DMA_Abort_IT+0xe0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d012      	beq.n	800159a <HAL_DMA_Abort_IT+0x92>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <HAL_DMA_Abort_IT+0xe4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00a      	beq.n	8001594 <HAL_DMA_Abort_IT+0x8c>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1b      	ldr	r2, [pc, #108]	@ (80015f0 <HAL_DMA_Abort_IT+0xe8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d102      	bne.n	800158e <HAL_DMA_Abort_IT+0x86>
 8001588:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800158c:	e00e      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 800158e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001592:	e00b      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 8001594:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001598:	e008      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 800159a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800159e:	e005      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 80015a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a4:	e002      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 80015a6:	2310      	movs	r3, #16
 80015a8:	e000      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 80015aa:	2301      	movs	r3, #1
 80015ac:	4a11      	ldr	r2, [pc, #68]	@ (80015f4 <HAL_DMA_Abort_IT+0xec>)
 80015ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
    } 
  }
  return status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020008 	.word	0x40020008
 80015e0:	4002001c 	.word	0x4002001c
 80015e4:	40020030 	.word	0x40020030
 80015e8:	40020044 	.word	0x40020044
 80015ec:	40020058 	.word	0x40020058
 80015f0:	4002006c 	.word	0x4002006c
 80015f4:	40020000 	.word	0x40020000

080015f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	2204      	movs	r2, #4
 8001616:	409a      	lsls	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d04f      	beq.n	80016c0 <HAL_DMA_IRQHandler+0xc8>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d04a      	beq.n	80016c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0320 	and.w	r3, r3, #32
 8001634:	2b00      	cmp	r3, #0
 8001636:	d107      	bne.n	8001648 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0204 	bic.w	r2, r2, #4
 8001646:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a66      	ldr	r2, [pc, #408]	@ (80017e8 <HAL_DMA_IRQHandler+0x1f0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d029      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xae>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a65      	ldr	r2, [pc, #404]	@ (80017ec <HAL_DMA_IRQHandler+0x1f4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d022      	beq.n	80016a2 <HAL_DMA_IRQHandler+0xaa>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a63      	ldr	r2, [pc, #396]	@ (80017f0 <HAL_DMA_IRQHandler+0x1f8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01a      	beq.n	800169c <HAL_DMA_IRQHandler+0xa4>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a62      	ldr	r2, [pc, #392]	@ (80017f4 <HAL_DMA_IRQHandler+0x1fc>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d012      	beq.n	8001696 <HAL_DMA_IRQHandler+0x9e>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a60      	ldr	r2, [pc, #384]	@ (80017f8 <HAL_DMA_IRQHandler+0x200>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d00a      	beq.n	8001690 <HAL_DMA_IRQHandler+0x98>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a5f      	ldr	r2, [pc, #380]	@ (80017fc <HAL_DMA_IRQHandler+0x204>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d102      	bne.n	800168a <HAL_DMA_IRQHandler+0x92>
 8001684:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001688:	e00e      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 800168a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800168e:	e00b      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 8001690:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001694:	e008      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 8001696:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800169a:	e005      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 800169c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a0:	e002      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 80016a2:	2340      	movs	r3, #64	@ 0x40
 80016a4:	e000      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 80016a6:	2304      	movs	r3, #4
 80016a8:	4a55      	ldr	r2, [pc, #340]	@ (8001800 <HAL_DMA_IRQHandler+0x208>)
 80016aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 8094 	beq.w	80017de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016be:	e08e      	b.n	80017de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	2202      	movs	r2, #2
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d056      	beq.n	800177e <HAL_DMA_IRQHandler+0x186>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d051      	beq.n	800177e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10b      	bne.n	8001700 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 020a 	bic.w	r2, r2, #10
 80016f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a38      	ldr	r2, [pc, #224]	@ (80017e8 <HAL_DMA_IRQHandler+0x1f0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d029      	beq.n	800175e <HAL_DMA_IRQHandler+0x166>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a37      	ldr	r2, [pc, #220]	@ (80017ec <HAL_DMA_IRQHandler+0x1f4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d022      	beq.n	800175a <HAL_DMA_IRQHandler+0x162>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a35      	ldr	r2, [pc, #212]	@ (80017f0 <HAL_DMA_IRQHandler+0x1f8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d01a      	beq.n	8001754 <HAL_DMA_IRQHandler+0x15c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a34      	ldr	r2, [pc, #208]	@ (80017f4 <HAL_DMA_IRQHandler+0x1fc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d012      	beq.n	800174e <HAL_DMA_IRQHandler+0x156>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a32      	ldr	r2, [pc, #200]	@ (80017f8 <HAL_DMA_IRQHandler+0x200>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d00a      	beq.n	8001748 <HAL_DMA_IRQHandler+0x150>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a31      	ldr	r2, [pc, #196]	@ (80017fc <HAL_DMA_IRQHandler+0x204>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d102      	bne.n	8001742 <HAL_DMA_IRQHandler+0x14a>
 800173c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001740:	e00e      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 8001742:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001746:	e00b      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 8001748:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800174c:	e008      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 800174e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001752:	e005      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 8001754:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001758:	e002      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 800175a:	2320      	movs	r3, #32
 800175c:	e000      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 800175e:	2302      	movs	r3, #2
 8001760:	4a27      	ldr	r2, [pc, #156]	@ (8001800 <HAL_DMA_IRQHandler+0x208>)
 8001762:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001770:	2b00      	cmp	r3, #0
 8001772:	d034      	beq.n	80017de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800177c:	e02f      	b.n	80017de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	2208      	movs	r2, #8
 8001784:	409a      	lsls	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d028      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x1e8>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d023      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 020e 	bic.w	r2, r2, #14
 80017a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b0:	2101      	movs	r1, #1
 80017b2:	fa01 f202 	lsl.w	r2, r1, r2
 80017b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
    }
  }
  return;
 80017de:	bf00      	nop
 80017e0:	bf00      	nop
}
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020008 	.word	0x40020008
 80017ec:	4002001c 	.word	0x4002001c
 80017f0:	40020030 	.word	0x40020030
 80017f4:	40020044 	.word	0x40020044
 80017f8:	40020058 	.word	0x40020058
 80017fc:	4002006c 	.word	0x4002006c
 8001800:	40020000 	.word	0x40020000

08001804 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800181a:	2101      	movs	r1, #1
 800181c:	fa01 f202 	lsl.w	r2, r1, r2
 8001820:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b10      	cmp	r3, #16
 8001830:	d108      	bne.n	8001844 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001842:	e007      	b.n	8001854 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
	...

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b08b      	sub	sp, #44	@ 0x2c
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001872:	e169      	b.n	8001b48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001874:	2201      	movs	r2, #1
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 8158 	bne.w	8001b42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4a9a      	ldr	r2, [pc, #616]	@ (8001b00 <HAL_GPIO_Init+0x2a0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d05e      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 800189c:	4a98      	ldr	r2, [pc, #608]	@ (8001b00 <HAL_GPIO_Init+0x2a0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d875      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018a2:	4a98      	ldr	r2, [pc, #608]	@ (8001b04 <HAL_GPIO_Init+0x2a4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d058      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018a8:	4a96      	ldr	r2, [pc, #600]	@ (8001b04 <HAL_GPIO_Init+0x2a4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d86f      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018ae:	4a96      	ldr	r2, [pc, #600]	@ (8001b08 <HAL_GPIO_Init+0x2a8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d052      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018b4:	4a94      	ldr	r2, [pc, #592]	@ (8001b08 <HAL_GPIO_Init+0x2a8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d869      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018ba:	4a94      	ldr	r2, [pc, #592]	@ (8001b0c <HAL_GPIO_Init+0x2ac>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d04c      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018c0:	4a92      	ldr	r2, [pc, #584]	@ (8001b0c <HAL_GPIO_Init+0x2ac>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d863      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018c6:	4a92      	ldr	r2, [pc, #584]	@ (8001b10 <HAL_GPIO_Init+0x2b0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d046      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018cc:	4a90      	ldr	r2, [pc, #576]	@ (8001b10 <HAL_GPIO_Init+0x2b0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d85d      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018d2:	2b12      	cmp	r3, #18
 80018d4:	d82a      	bhi.n	800192c <HAL_GPIO_Init+0xcc>
 80018d6:	2b12      	cmp	r3, #18
 80018d8:	d859      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018da:	a201      	add	r2, pc, #4	@ (adr r2, 80018e0 <HAL_GPIO_Init+0x80>)
 80018dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e0:	0800195b 	.word	0x0800195b
 80018e4:	08001935 	.word	0x08001935
 80018e8:	08001947 	.word	0x08001947
 80018ec:	08001989 	.word	0x08001989
 80018f0:	0800198f 	.word	0x0800198f
 80018f4:	0800198f 	.word	0x0800198f
 80018f8:	0800198f 	.word	0x0800198f
 80018fc:	0800198f 	.word	0x0800198f
 8001900:	0800198f 	.word	0x0800198f
 8001904:	0800198f 	.word	0x0800198f
 8001908:	0800198f 	.word	0x0800198f
 800190c:	0800198f 	.word	0x0800198f
 8001910:	0800198f 	.word	0x0800198f
 8001914:	0800198f 	.word	0x0800198f
 8001918:	0800198f 	.word	0x0800198f
 800191c:	0800198f 	.word	0x0800198f
 8001920:	0800198f 	.word	0x0800198f
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
 800192c:	4a79      	ldr	r2, [pc, #484]	@ (8001b14 <HAL_GPIO_Init+0x2b4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001932:	e02c      	b.n	800198e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e029      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	3304      	adds	r3, #4
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e024      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	3308      	adds	r3, #8
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e01f      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	330c      	adds	r3, #12
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e01a      	b.n	8001990 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001962:	2304      	movs	r3, #4
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e013      	b.n	8001990 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001970:	2308      	movs	r3, #8
 8001972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	611a      	str	r2, [r3, #16]
          break;
 800197a:	e009      	b.n	8001990 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800197c:	2308      	movs	r3, #8
 800197e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	615a      	str	r2, [r3, #20]
          break;
 8001986:	e003      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e000      	b.n	8001990 <HAL_GPIO_Init+0x130>
          break;
 800198e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2bff      	cmp	r3, #255	@ 0xff
 8001994:	d801      	bhi.n	800199a <HAL_GPIO_Init+0x13a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	e001      	b.n	800199e <HAL_GPIO_Init+0x13e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2bff      	cmp	r3, #255	@ 0xff
 80019a4:	d802      	bhi.n	80019ac <HAL_GPIO_Init+0x14c>
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	e002      	b.n	80019b2 <HAL_GPIO_Init+0x152>
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	3b08      	subs	r3, #8
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	210f      	movs	r1, #15
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	401a      	ands	r2, r3
 80019c4:	6a39      	ldr	r1, [r7, #32]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	431a      	orrs	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80b1 	beq.w	8001b42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001b18 <HAL_GPIO_Init+0x2b8>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001b18 <HAL_GPIO_Init+0x2b8>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001b18 <HAL_GPIO_Init+0x2b8>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019f8:	4a48      	ldr	r2, [pc, #288]	@ (8001b1c <HAL_GPIO_Init+0x2bc>)
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a40      	ldr	r2, [pc, #256]	@ (8001b20 <HAL_GPIO_Init+0x2c0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_GPIO_Init+0x1ec>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a3f      	ldr	r2, [pc, #252]	@ (8001b24 <HAL_GPIO_Init+0x2c4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d00d      	beq.n	8001a48 <HAL_GPIO_Init+0x1e8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b28 <HAL_GPIO_Init+0x2c8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d007      	beq.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a3d      	ldr	r2, [pc, #244]	@ (8001b2c <HAL_GPIO_Init+0x2cc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_GPIO_Init+0x1e0>
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e006      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a40:	2304      	movs	r3, #4
 8001a42:	e004      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a50:	f002 0203 	and.w	r2, r2, #3
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	4093      	lsls	r3, r2
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a5e:	492f      	ldr	r1, [pc, #188]	@ (8001b1c <HAL_GPIO_Init+0x2bc>)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a78:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	492c      	ldr	r1, [pc, #176]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a86:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4928      	ldr	r1, [pc, #160]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa0:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	4922      	ldr	r1, [pc, #136]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60cb      	str	r3, [r1, #12]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aae:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	491e      	ldr	r1, [pc, #120]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4918      	ldr	r1, [pc, #96]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ad6:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4914      	ldr	r1, [pc, #80]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d021      	beq.n	8001b34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	490e      	ldr	r1, [pc, #56]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
 8001afc:	e021      	b.n	8001b42 <HAL_GPIO_Init+0x2e2>
 8001afe:	bf00      	nop
 8001b00:	10320000 	.word	0x10320000
 8001b04:	10310000 	.word	0x10310000
 8001b08:	10220000 	.word	0x10220000
 8001b0c:	10210000 	.word	0x10210000
 8001b10:	10120000 	.word	0x10120000
 8001b14:	10110000 	.word	0x10110000
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	40010800 	.word	0x40010800
 8001b24:	40010c00 	.word	0x40010c00
 8001b28:	40011000 	.word	0x40011000
 8001b2c:	40011400 	.word	0x40011400
 8001b30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_GPIO_Init+0x304>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	4909      	ldr	r1, [pc, #36]	@ (8001b64 <HAL_GPIO_Init+0x304>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	3301      	adds	r3, #1
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f47f ae8e 	bne.w	8001874 <HAL_GPIO_Init+0x14>
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	372c      	adds	r7, #44	@ 0x2c
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e272      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8087 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb8:	4b92      	ldr	r3, [pc, #584]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d00c      	beq.n	8001bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc4:	4b8f      	ldr	r3, [pc, #572]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d112      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
 8001bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bde:	4b89      	ldr	r3, [pc, #548]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d06c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x12c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d168      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e24c      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x76>
 8001c00:	4b80      	ldr	r3, [pc, #512]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a7f      	ldr	r2, [pc, #508]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e02e      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x98>
 8001c16:	4b7b      	ldr	r3, [pc, #492]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b78      	ldr	r3, [pc, #480]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a77      	ldr	r2, [pc, #476]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e01d      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0xbc>
 8001c3a:	4b72      	ldr	r3, [pc, #456]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a71      	ldr	r2, [pc, #452]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b6f      	ldr	r3, [pc, #444]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e00b      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c54:	4b6b      	ldr	r3, [pc, #428]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6a      	ldr	r2, [pc, #424]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b68      	ldr	r3, [pc, #416]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a67      	ldr	r2, [pc, #412]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fa68 	bl	8001148 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff fa64 	bl	8001148 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	@ 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e200      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0xe4>
 8001c9a:	e014      	b.n	8001cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fa54 	bl	8001148 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fa50 	bl	8001148 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	@ 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1ec      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x10c>
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d063      	beq.n	8001d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cde:	4b49      	ldr	r3, [pc, #292]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d11c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x18c>
 8001cea:	4b46      	ldr	r3, [pc, #280]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d116      	bne.n	8001d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	4b43      	ldr	r3, [pc, #268]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e1c0      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4939      	ldr	r1, [pc, #228]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	e03a      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d2c:	4b36      	ldr	r3, [pc, #216]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff fa09 	bl	8001148 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fa05 	bl	8001148 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e1a1      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	4b2a      	ldr	r3, [pc, #168]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4927      	ldr	r1, [pc, #156]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6e:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff f9e8 	bl	8001148 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7ff f9e4 	bl	8001148 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e180      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d03a      	beq.n	8001e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d019      	beq.n	8001de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dae:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff f9c8 	bl	8001148 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7ff f9c4 	bl	8001148 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e160      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f000 fafe 	bl	80023dc <RCC_Delay>
 8001de0:	e01c      	b.n	8001e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff f9ae 	bl	8001148 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dee:	e00f      	b.n	8001e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff f9aa 	bl	8001148 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d908      	bls.n	8001e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e146      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	42420000 	.word	0x42420000
 8001e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b92      	ldr	r3, [pc, #584]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e9      	bne.n	8001df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a6 	beq.w	8001f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b8b      	ldr	r3, [pc, #556]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4b88      	ldr	r3, [pc, #544]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a87      	ldr	r2, [pc, #540]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	61d3      	str	r3, [r2, #28]
 8001e46:	4b85      	ldr	r3, [pc, #532]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e56:	4b82      	ldr	r3, [pc, #520]	@ (8002060 <HAL_RCC_OscConfig+0x4c8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e62:	4b7f      	ldr	r3, [pc, #508]	@ (8002060 <HAL_RCC_OscConfig+0x4c8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7e      	ldr	r2, [pc, #504]	@ (8002060 <HAL_RCC_OscConfig+0x4c8>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff f96b 	bl	8001148 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e76:	f7ff f967 	bl	8001148 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b64      	cmp	r3, #100	@ 0x64
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e103      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b75      	ldr	r3, [pc, #468]	@ (8002060 <HAL_RCC_OscConfig+0x4c8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x312>
 8001e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	e02d      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x334>
 8001eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a69      	ldr	r2, [pc, #420]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	4b67      	ldr	r3, [pc, #412]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a66      	ldr	r2, [pc, #408]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	e01c      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCC_OscConfig+0x356>
 8001ed4:	4b61      	ldr	r3, [pc, #388]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a60      	ldr	r2, [pc, #384]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	4b5e      	ldr	r3, [pc, #376]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	e00b      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001eee:	4b5b      	ldr	r3, [pc, #364]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a5a      	ldr	r2, [pc, #360]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	4b58      	ldr	r3, [pc, #352]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a57      	ldr	r2, [pc, #348]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d015      	beq.n	8001f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f91b 	bl	8001148 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff f917 	bl	8001148 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0b1      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	4b4b      	ldr	r3, [pc, #300]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ee      	beq.n	8001f16 <HAL_RCC_OscConfig+0x37e>
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff f905 	bl	8001148 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff f901 	bl	8001148 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e09b      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	4b40      	ldr	r3, [pc, #256]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1ee      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d105      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8087 	beq.w	800208e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f80:	4b36      	ldr	r3, [pc, #216]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d061      	beq.n	8002050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d146      	bne.n	8002022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b33      	ldr	r3, [pc, #204]	@ (8002064 <HAL_RCC_OscConfig+0x4cc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f8d5 	bl	8001148 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff f8d1 	bl	8001148 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e06d      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	4b29      	ldr	r3, [pc, #164]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fca:	4b24      	ldr	r3, [pc, #144]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	4921      	ldr	r1, [pc, #132]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a19      	ldr	r1, [r3, #32]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	430b      	orrs	r3, r1
 8001fee:	491b      	ldr	r1, [pc, #108]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <HAL_RCC_OscConfig+0x4cc>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7ff f8a5 	bl	8001148 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7ff f8a1 	bl	8001148 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e03d      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x46a>
 8002020:	e035      	b.n	800208e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <HAL_RCC_OscConfig+0x4cc>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff f88e 	bl	8001148 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7ff f88a 	bl	8001148 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e026      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_RCC_OscConfig+0x4c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x498>
 800204e:	e01e      	b.n	800208e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d107      	bne.n	8002068 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e019      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002068:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_RCC_OscConfig+0x500>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	429a      	cmp	r2, r3
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0d0      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b6a      	ldr	r3, [pc, #424]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d910      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b67      	ldr	r3, [pc, #412]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 0207 	bic.w	r2, r3, #7
 80020c6:	4965      	ldr	r1, [pc, #404]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b63      	ldr	r3, [pc, #396]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0b8      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f8:	4b59      	ldr	r3, [pc, #356]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a58      	ldr	r2, [pc, #352]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002110:	4b53      	ldr	r3, [pc, #332]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a52      	ldr	r2, [pc, #328]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800211a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b50      	ldr	r3, [pc, #320]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	494d      	ldr	r1, [pc, #308]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d040      	beq.n	80021bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b47      	ldr	r3, [pc, #284]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d115      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e07f      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	4b41      	ldr	r3, [pc, #260]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e073      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	4b3d      	ldr	r3, [pc, #244]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e06b      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217a:	4b39      	ldr	r3, [pc, #228]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f023 0203 	bic.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4936      	ldr	r1, [pc, #216]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800218c:	f7fe ffdc 	bl	8001148 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	e00a      	b.n	80021aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002194:	f7fe ffd8 	bl	8001148 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e053      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 020c 	and.w	r2, r3, #12
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1eb      	bne.n	8002194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021bc:	4b27      	ldr	r3, [pc, #156]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d210      	bcs.n	80021ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b24      	ldr	r3, [pc, #144]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 0207 	bic.w	r2, r3, #7
 80021d2:	4922      	ldr	r1, [pc, #136]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b20      	ldr	r3, [pc, #128]	@ (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e032      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f8:	4b19      	ldr	r3, [pc, #100]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4916      	ldr	r1, [pc, #88]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002216:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	490e      	ldr	r1, [pc, #56]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222a:	f000 f821 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 800222e:	4602      	mov	r2, r0
 8002230:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	490a      	ldr	r1, [pc, #40]	@ (8002264 <HAL_RCC_ClockConfig+0x1c8>)
 800223c:	5ccb      	ldrb	r3, [r1, r3]
 800223e:	fa22 f303 	lsr.w	r3, r2, r3
 8002242:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <HAL_RCC_ClockConfig+0x1cc>)
 8002244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_RCC_ClockConfig+0x1d0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fe5e 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40022000 	.word	0x40022000
 8002260:	40021000 	.word	0x40021000
 8002264:	08007070 	.word	0x08007070
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228a:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x94>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b04      	cmp	r3, #4
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x30>
 800229a:	2b08      	cmp	r3, #8
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x36>
 800229e:	e027      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x98>)
 80022a2:	613b      	str	r3, [r7, #16]
      break;
 80022a4:	e027      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	0c9b      	lsrs	r3, r3, #18
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	4a17      	ldr	r2, [pc, #92]	@ (800230c <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b0:	5cd3      	ldrb	r3, [r2, r3]
 80022b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	0c5b      	lsrs	r3, r3, #17
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	4a11      	ldr	r2, [pc, #68]	@ (8002310 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x98>)
 80022d2:	fb03 f202 	mul.w	r2, r3, r2
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e004      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	613b      	str	r3, [r7, #16]
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x98>)
 80022f2:	613b      	str	r3, [r7, #16]
      break;
 80022f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f6:	693b      	ldr	r3, [r7, #16]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	007a1200 	.word	0x007a1200
 800230c:	08007088 	.word	0x08007088
 8002310:	08007098 	.word	0x08007098
 8002314:	003d0900 	.word	0x003d0900

08002318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800231c:	4b02      	ldr	r3, [pc, #8]	@ (8002328 <HAL_RCC_GetHCLKFreq+0x10>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	20000000 	.word	0x20000000

0800232c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002330:	f7ff fff2 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 8002334:	4602      	mov	r2, r0
 8002336:	4b05      	ldr	r3, [pc, #20]	@ (800234c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4903      	ldr	r1, [pc, #12]	@ (8002350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002342:	5ccb      	ldrb	r3, [r1, r3]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	08007080 	.word	0x08007080

08002354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002358:	f7ff ffde 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	0adb      	lsrs	r3, r3, #11
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4903      	ldr	r1, [pc, #12]	@ (8002378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	08007080 	.word	0x08007080

0800237c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	220f      	movs	r2, #15
 800238a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_RCC_GetClockConfig+0x58>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002398:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <HAL_RCC_GetClockConfig+0x58>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023a4:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <HAL_RCC_GetClockConfig+0x58>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023b0:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <HAL_RCC_GetClockConfig+0x58>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	08db      	lsrs	r3, r3, #3
 80023b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0207 	and.w	r2, r3, #7
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40022000 	.word	0x40022000

080023dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <RCC_Delay+0x34>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <RCC_Delay+0x38>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0a5b      	lsrs	r3, r3, #9
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f8:	bf00      	nop
  }
  while (Delay --);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	60fa      	str	r2, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f9      	bne.n	80023f8 <RCC_Delay+0x1c>
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000000 	.word	0x20000000
 8002414:	10624dd3 	.word	0x10624dd3

08002418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e041      	b.n	80024ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f839 	bl	80024b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f000 f9b4 	bl	80027c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d001      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e03a      	b.n	8002556 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a18      	ldr	r2, [pc, #96]	@ (8002560 <HAL_TIM_Base_Start_IT+0x98>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800250a:	d009      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a14      	ldr	r2, [pc, #80]	@ (8002564 <HAL_TIM_Base_Start_IT+0x9c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a13      	ldr	r2, [pc, #76]	@ (8002568 <HAL_TIM_Base_Start_IT+0xa0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d111      	bne.n	8002544 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d010      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	e007      	b.n	8002554 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40012c00 	.word	0x40012c00
 8002564:	40000400 	.word	0x40000400
 8002568:	40000800 	.word	0x40000800

0800256c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d122      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b02      	cmp	r3, #2
 800258e:	d11b      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0202 	mvn.w	r2, #2
 8002598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f8ed 	bl	800278e <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f8e0 	bl	800277c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f8ef 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d122      	bne.n	800261c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d11b      	bne.n	800261c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0204 	mvn.w	r2, #4
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8c3 	bl	800278e <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8b6 	bl	800277c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f8c5 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b08      	cmp	r3, #8
 8002628:	d122      	bne.n	8002670 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b08      	cmp	r3, #8
 8002636:	d11b      	bne.n	8002670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0208 	mvn.w	r2, #8
 8002640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2204      	movs	r2, #4
 8002646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f899 	bl	800278e <HAL_TIM_IC_CaptureCallback>
 800265c:	e005      	b.n	800266a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f88c 	bl	800277c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f89b 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b10      	cmp	r3, #16
 800267c:	d122      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b10      	cmp	r3, #16
 800268a:	d11b      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0210 	mvn.w	r2, #16
 8002694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2208      	movs	r2, #8
 800269a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f86f 	bl	800278e <HAL_TIM_IC_CaptureCallback>
 80026b0:	e005      	b.n	80026be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f862 	bl	800277c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f871 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10e      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d107      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0201 	mvn.w	r2, #1
 80026e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fd ff7a 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fa:	2b80      	cmp	r3, #128	@ 0x80
 80026fc:	d10e      	bne.n	800271c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002708:	2b80      	cmp	r3, #128	@ 0x80
 800270a:	d107      	bne.n	800271c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f8bf 	bl	800289a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002726:	2b40      	cmp	r3, #64	@ 0x40
 8002728:	d10e      	bne.n	8002748 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002734:	2b40      	cmp	r3, #64	@ 0x40
 8002736:	d107      	bne.n	8002748 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f835 	bl	80027b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b20      	cmp	r3, #32
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b20      	cmp	r3, #32
 8002762:	d107      	bne.n	8002774 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0220 	mvn.w	r2, #32
 800276c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f88a 	bl	8002888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a29      	ldr	r2, [pc, #164]	@ (800287c <TIM_Base_SetConfig+0xb8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00b      	beq.n	80027f4 <TIM_Base_SetConfig+0x30>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e2:	d007      	beq.n	80027f4 <TIM_Base_SetConfig+0x30>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a26      	ldr	r2, [pc, #152]	@ (8002880 <TIM_Base_SetConfig+0xbc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <TIM_Base_SetConfig+0x30>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a25      	ldr	r2, [pc, #148]	@ (8002884 <TIM_Base_SetConfig+0xc0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d108      	bne.n	8002806 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1c      	ldr	r2, [pc, #112]	@ (800287c <TIM_Base_SetConfig+0xb8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00b      	beq.n	8002826 <TIM_Base_SetConfig+0x62>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002814:	d007      	beq.n	8002826 <TIM_Base_SetConfig+0x62>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a19      	ldr	r2, [pc, #100]	@ (8002880 <TIM_Base_SetConfig+0xbc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <TIM_Base_SetConfig+0x62>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a18      	ldr	r2, [pc, #96]	@ (8002884 <TIM_Base_SetConfig+0xc0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d108      	bne.n	8002838 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800282c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a07      	ldr	r2, [pc, #28]	@ (800287c <TIM_Base_SetConfig+0xb8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d103      	bne.n	800286c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	615a      	str	r2, [r3, #20]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40000400 	.word	0x40000400
 8002884:	40000800 	.word	0x40000800

08002888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e042      	b.n	8002944 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe fa30 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	@ 0x24
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fe11 	bl	8003518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b20      	cmp	r3, #32
 8002964:	d112      	bne.n	800298c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_UART_Receive_IT+0x26>
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e00b      	b.n	800298e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	461a      	mov	r2, r3
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fbcc 	bl	8003120 <UART_Start_Receive_IT>
 8002988:	4603      	mov	r3, r0
 800298a:	e000      	b.n	800298e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800298c:	2302      	movs	r3, #2
  }
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08c      	sub	sp, #48	@ 0x30
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d156      	bne.n	8002a60 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_UART_Transmit_DMA+0x26>
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e04f      	b.n	8002a62 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	88fa      	ldrh	r2, [r7, #6]
 80029d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2221      	movs	r2, #33	@ 0x21
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e6:	4a21      	ldr	r2, [pc, #132]	@ (8002a6c <HAL_UART_Transmit_DMA+0xd4>)
 80029e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ee:	4a20      	ldr	r2, [pc, #128]	@ (8002a70 <HAL_UART_Transmit_DMA+0xd8>)
 80029f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a74 <HAL_UART_Transmit_DMA+0xdc>)
 80029f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fe:	2200      	movs	r2, #0
 8002a00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3304      	adds	r3, #4
 8002a16:	461a      	mov	r2, r3
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	f7fe fcd9 	bl	80013d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	e853 3f00 	ldrex	r3, [r3]
 8002a36:	617b      	str	r3, [r7, #20]
   return(result);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3314      	adds	r3, #20
 8002a46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a48:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a4a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4c:	6a39      	ldr	r1, [r7, #32]
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a50:	e841 2300 	strex	r3, r2, [r1]
 8002a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e5      	bne.n	8002a28 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3730      	adds	r7, #48	@ 0x30
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	08002fd7 	.word	0x08002fd7
 8002a70:	08003071 	.word	0x08003071
 8002a74:	0800308d 	.word	0x0800308d

08002a78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b0ba      	sub	sp, #232	@ 0xe8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_UART_IRQHandler+0x66>
 8002aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fc5f 	bl	800339a <UART_Receive_IT>
      return;
 8002adc:	e25b      	b.n	8002f96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80de 	beq.w	8002ca4 <HAL_UART_IRQHandler+0x22c>
 8002ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80d1 	beq.w	8002ca4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_UART_IRQHandler+0xae>
 8002b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_UART_IRQHandler+0xd2>
 8002b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	f043 0202 	orr.w	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_UART_IRQHandler+0xf6>
 8002b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	f043 0204 	orr.w	r2, r3, #4
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d011      	beq.n	8002b9e <HAL_UART_IRQHandler+0x126>
 8002b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	f043 0208 	orr.w	r2, r3, #8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 81f2 	beq.w	8002f8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x14e>
 8002bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fbea 	bl	800339a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x17a>
 8002bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d04f      	beq.n	8002c92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 faf4 	bl	80031e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d041      	beq.n	8002c8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3314      	adds	r3, #20
 8002c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c14:	e853 3f00 	ldrex	r3, [r3]
 8002c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3314      	adds	r3, #20
 8002c2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1d9      	bne.n	8002c06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d013      	beq.n	8002c82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e58 <HAL_UART_IRQHandler+0x3e0>)
 8002c60:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fc4e 	bl	8001508 <HAL_DMA_Abort_IT>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d016      	beq.n	8002ca0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c80:	e00e      	b.n	8002ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f993 	bl	8002fae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c88:	e00a      	b.n	8002ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f98f 	bl	8002fae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c90:	e006      	b.n	8002ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f98b 	bl	8002fae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c9e:	e175      	b.n	8002f8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca0:	bf00      	nop
    return;
 8002ca2:	e173      	b.n	8002f8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	f040 814f 	bne.w	8002f4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8148 	beq.w	8002f4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8141 	beq.w	8002f4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80b6 	beq.w	8002e5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8145 	beq.w	8002f90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	f080 813e 	bcs.w	8002f90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	f000 8088 	beq.w	8002e38 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d36:	e853 3f00 	ldrex	r3, [r3]
 8002d3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d54:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d64:	e841 2300 	strex	r3, r2, [r1]
 8002d68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1d9      	bne.n	8002d28 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d7e:	e853 3f00 	ldrex	r3, [r3]
 8002d82:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3314      	adds	r3, #20
 8002d94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d98:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002da0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002da4:	e841 2300 	strex	r3, r2, [r1]
 8002da8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002daa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e1      	bne.n	8002d74 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3314      	adds	r3, #20
 8002db6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002dc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3314      	adds	r3, #20
 8002dd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002dd4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002dda:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ddc:	e841 2300 	strex	r3, r2, [r1]
 8002de0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002de2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e3      	bne.n	8002db0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e08:	f023 0310 	bic.w	r3, r3, #16
 8002e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e1a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e1c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e3      	bne.n	8002df6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fb2c 	bl	8001490 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f8b6 	bl	8002fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e54:	e09c      	b.n	8002f90 <HAL_UART_IRQHandler+0x518>
 8002e56:	bf00      	nop
 8002e58:	080032a5 	.word	0x080032a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 808e 	beq.w	8002f94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8089 	beq.w	8002f94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330c      	adds	r3, #12
 8002e88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	e853 3f00 	ldrex	r3, [r3]
 8002e90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002ea6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ea8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002eac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e3      	bne.n	8002e82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3314      	adds	r3, #20
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	e853 3f00 	ldrex	r3, [r3]
 8002ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3314      	adds	r3, #20
 8002eda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ede:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e3      	bne.n	8002eba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0310 	bic.w	r3, r3, #16
 8002f16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f24:	61fa      	str	r2, [r7, #28]
 8002f26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	69b9      	ldr	r1, [r7, #24]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	e841 2300 	strex	r3, r2, [r1]
 8002f30:	617b      	str	r3, [r7, #20]
   return(result);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e3      	bne.n	8002f00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f42:	4619      	mov	r1, r3
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f83b 	bl	8002fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f4a:	e023      	b.n	8002f94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HAL_UART_IRQHandler+0x4f4>
 8002f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f9b1 	bl	80032cc <UART_Transmit_IT>
    return;
 8002f6a:	e014      	b.n	8002f96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00e      	beq.n	8002f96 <HAL_UART_IRQHandler+0x51e>
 8002f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f9f0 	bl	800336a <UART_EndTransmit_IT>
    return;
 8002f8a:	e004      	b.n	8002f96 <HAL_UART_IRQHandler+0x51e>
    return;
 8002f8c:	bf00      	nop
 8002f8e:	e002      	b.n	8002f96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f90:	bf00      	nop
 8002f92:	e000      	b.n	8002f96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f94:	bf00      	nop
  }
}
 8002f96:	37e8      	adds	r7, #232	@ 0xe8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b090      	sub	sp, #64	@ 0x40
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d137      	bne.n	8003062 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3314      	adds	r3, #20
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	e853 3f00 	ldrex	r3, [r3]
 8003006:	623b      	str	r3, [r7, #32]
   return(result);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800300e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3314      	adds	r3, #20
 8003016:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003018:	633a      	str	r2, [r7, #48]	@ 0x30
 800301a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800301e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003020:	e841 2300 	strex	r3, r2, [r1]
 8003024:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e5      	bne.n	8002ff8 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800302c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	330c      	adds	r3, #12
 8003032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	60fb      	str	r3, [r7, #12]
   return(result);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003042:	637b      	str	r3, [r7, #52]	@ 0x34
 8003044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800304c:	61fa      	str	r2, [r7, #28]
 800304e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	69b9      	ldr	r1, [r7, #24]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	e841 2300 	strex	r3, r2, [r1]
 8003058:	617b      	str	r3, [r7, #20]
   return(result);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e5      	bne.n	800302c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003060:	e002      	b.n	8003068 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003062:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003064:	f7fd f874 	bl	8000150 <HAL_UART_TxCpltCallback>
}
 8003068:	bf00      	nop
 800306a:	3740      	adds	r7, #64	@ 0x40
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f7ff ff8c 	bl	8002f9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b21      	cmp	r3, #33	@ 0x21
 80030be:	d108      	bne.n	80030d2 <UART_DMAError+0x46>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2200      	movs	r2, #0
 80030ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80030cc:	68b8      	ldr	r0, [r7, #8]
 80030ce:	f000 f860 	bl	8003192 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b22      	cmp	r3, #34	@ 0x22
 80030f2:	d108      	bne.n	8003106 <UART_DMAError+0x7a>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2200      	movs	r2, #0
 80030fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003100:	68b8      	ldr	r0, [r7, #8]
 8003102:	f000 f86d 	bl	80031e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f043 0210 	orr.w	r2, r3, #16
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003112:	68b8      	ldr	r0, [r7, #8]
 8003114:	f7ff ff4b 	bl	8002fae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	88fa      	ldrh	r2, [r7, #6]
 800313e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2222      	movs	r2, #34	@ 0x22
 800314a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003164:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0220 	orr.w	r2, r2, #32
 8003184:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003192:	b480      	push	{r7}
 8003194:	b089      	sub	sp, #36	@ 0x24
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	61ba      	str	r2, [r7, #24]
 80031bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6979      	ldr	r1, [r7, #20]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	613b      	str	r3, [r7, #16]
   return(result);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e5      	bne.n	800319a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b095      	sub	sp, #84	@ 0x54
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	330c      	adds	r3, #12
 80031ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003208:	643a      	str	r2, [r7, #64]	@ 0x40
 800320a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800320e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e5      	bne.n	80031e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3314      	adds	r3, #20
 8003222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	61fb      	str	r3, [r7, #28]
   return(result);
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3314      	adds	r3, #20
 800323a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800323c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800323e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e5      	bne.n	800321c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003254:	2b01      	cmp	r3, #1
 8003256:	d119      	bne.n	800328c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	330c      	adds	r3, #12
 800325e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	60bb      	str	r3, [r7, #8]
   return(result);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f023 0310 	bic.w	r3, r3, #16
 800326e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	330c      	adds	r3, #12
 8003276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003278:	61ba      	str	r2, [r7, #24]
 800327a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6979      	ldr	r1, [r7, #20]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	613b      	str	r3, [r7, #16]
   return(result);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e5      	bne.n	8003258 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800329a:	bf00      	nop
 800329c:	3754      	adds	r7, #84	@ 0x54
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f7ff fe75 	bl	8002fae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b21      	cmp	r3, #33	@ 0x21
 80032de:	d13e      	bne.n	800335e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e8:	d114      	bne.n	8003314 <UART_Transmit_IT+0x48>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d110      	bne.n	8003314 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003306:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	1c9a      	adds	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	621a      	str	r2, [r3, #32]
 8003312:	e008      	b.n	8003326 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	1c59      	adds	r1, r3, #1
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6211      	str	r1, [r2, #32]
 800331e:	781a      	ldrb	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29b      	uxth	r3, r3
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4619      	mov	r1, r3
 8003334:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003348:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003358:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800335e:	2302      	movs	r3, #2
  }
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003380:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fc fee0 	bl	8000150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b08c      	sub	sp, #48	@ 0x30
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b22      	cmp	r3, #34	@ 0x22
 80033ac:	f040 80ae 	bne.w	800350c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b8:	d117      	bne.n	80033ea <UART_Receive_IT+0x50>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d113      	bne.n	80033ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d8:	b29a      	uxth	r2, r3
 80033da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e2:	1c9a      	adds	r2, r3, #2
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80033e8:	e026      	b.n	8003438 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033fc:	d007      	beq.n	800340e <UART_Receive_IT+0x74>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <UART_Receive_IT+0x82>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	e008      	b.n	800342e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003428:	b2da      	uxtb	r2, r3
 800342a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29b      	uxth	r3, r3
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4619      	mov	r1, r3
 8003446:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003448:	2b00      	cmp	r3, #0
 800344a:	d15d      	bne.n	8003508 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0220 	bic.w	r2, r2, #32
 800345a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800346a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	2b01      	cmp	r3, #1
 8003490:	d135      	bne.n	80034fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	613b      	str	r3, [r7, #16]
   return(result);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f023 0310 	bic.w	r3, r3, #16
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b8:	623a      	str	r2, [r7, #32]
 80034ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	69f9      	ldr	r1, [r7, #28]
 80034be:	6a3a      	ldr	r2, [r7, #32]
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e5      	bne.n	8003498 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d10a      	bne.n	80034f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fd62 	bl	8002fc0 <HAL_UARTEx_RxEventCallback>
 80034fc:	e002      	b.n	8003504 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fc fe36 	bl	8000170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e002      	b.n	800350e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3730      	adds	r7, #48	@ 0x30
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003552:	f023 030c 	bic.w	r3, r3, #12
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	430b      	orrs	r3, r1
 800355e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2c      	ldr	r2, [pc, #176]	@ (800362c <UART_SetConfig+0x114>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d103      	bne.n	8003588 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003580:	f7fe fee8 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	e002      	b.n	800358e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003588:	f7fe fed0 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 800358c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	009a      	lsls	r2, r3, #2
 8003598:	441a      	add	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	4a22      	ldr	r2, [pc, #136]	@ (8003630 <UART_SetConfig+0x118>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	0119      	lsls	r1, r3, #4
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009a      	lsls	r2, r3, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003630 <UART_SetConfig+0x118>)
 80035c6:	fba3 0302 	umull	r0, r3, r3, r2
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	2064      	movs	r0, #100	@ 0x64
 80035ce:	fb00 f303 	mul.w	r3, r0, r3
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	3332      	adds	r3, #50	@ 0x32
 80035d8:	4a15      	ldr	r2, [pc, #84]	@ (8003630 <UART_SetConfig+0x118>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e4:	4419      	add	r1, r3
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	009a      	lsls	r2, r3, #2
 80035f0:	441a      	add	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <UART_SetConfig+0x118>)
 80035fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	2064      	movs	r0, #100	@ 0x64
 8003606:	fb00 f303 	mul.w	r3, r0, r3
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	3332      	adds	r3, #50	@ 0x32
 8003610:	4a07      	ldr	r2, [pc, #28]	@ (8003630 <UART_SetConfig+0x118>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	f003 020f 	and.w	r2, r3, #15
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	440a      	add	r2, r1
 8003622:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40013800 	.word	0x40013800
 8003630:	51eb851f 	.word	0x51eb851f

08003634 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800363a:	f3ef 8305 	mrs	r3, IPSR
 800363e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003640:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003646:	f3ef 8310 	mrs	r3, PRIMASK
 800364a:	607b      	str	r3, [r7, #4]
  return(result);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <osKernelInitialize+0x32>
 8003652:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <osKernelInitialize+0x60>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d109      	bne.n	800366e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800365a:	f3ef 8311 	mrs	r3, BASEPRI
 800365e:	603b      	str	r3, [r7, #0]
  return(result);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003666:	f06f 0305 	mvn.w	r3, #5
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e00c      	b.n	8003688 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800366e:	4b09      	ldr	r3, [pc, #36]	@ (8003694 <osKernelInitialize+0x60>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d105      	bne.n	8003682 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003676:	4b07      	ldr	r3, [pc, #28]	@ (8003694 <osKernelInitialize+0x60>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e002      	b.n	8003688 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
 8003686:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003688:	68fb      	ldr	r3, [r7, #12]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	200001f8 	.word	0x200001f8

08003698 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800369e:	f3ef 8305 	mrs	r3, IPSR
 80036a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80036a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10f      	bne.n	80036ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036aa:	f3ef 8310 	mrs	r3, PRIMASK
 80036ae:	607b      	str	r3, [r7, #4]
  return(result);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <osKernelStart+0x32>
 80036b6:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <osKernelStart+0x64>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d109      	bne.n	80036d2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036be:	f3ef 8311 	mrs	r3, BASEPRI
 80036c2:	603b      	str	r3, [r7, #0]
  return(result);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80036ca:	f06f 0305 	mvn.w	r3, #5
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e00e      	b.n	80036f0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80036d2:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <osKernelStart+0x64>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d107      	bne.n	80036ea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80036da:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <osKernelStart+0x64>)
 80036dc:	2202      	movs	r2, #2
 80036de:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80036e0:	f001 fd3a 	bl	8005158 <vTaskStartScheduler>
      stat = osOK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	e002      	b.n	80036f0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295
 80036ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80036f0:	68fb      	ldr	r3, [r7, #12]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200001f8 	.word	0x200001f8

08003700 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b092      	sub	sp, #72	@ 0x48
 8003704:	af04      	add	r7, sp, #16
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003710:	f3ef 8305 	mrs	r3, IPSR
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 8095 	bne.w	8003848 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371e:	f3ef 8310 	mrs	r3, PRIMASK
 8003722:	623b      	str	r3, [r7, #32]
  return(result);
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	2b00      	cmp	r3, #0
 8003728:	f040 808e 	bne.w	8003848 <osThreadNew+0x148>
 800372c:	4b49      	ldr	r3, [pc, #292]	@ (8003854 <osThreadNew+0x154>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d106      	bne.n	8003742 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003734:	f3ef 8311 	mrs	r3, BASEPRI
 8003738:	61fb      	str	r3, [r7, #28]
  return(result);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f040 8083 	bne.w	8003848 <osThreadNew+0x148>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d07f      	beq.n	8003848 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8003748:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800374c:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800374e:	2318      	movs	r3, #24
 8003750:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003752:	2300      	movs	r3, #0
 8003754:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003756:	f107 031b 	add.w	r3, r7, #27
 800375a:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
 8003760:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d045      	beq.n	80037f4 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <osThreadNew+0x76>
        name = attr->name;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <osThreadNew+0x9c>
 800378a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378c:	2b38      	cmp	r3, #56	@ 0x38
 800378e:	d805      	bhi.n	800379c <osThreadNew+0x9c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <osThreadNew+0xa0>
        return (NULL);
 800379c:	2300      	movs	r3, #0
 800379e:	e054      	b.n	800384a <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00e      	beq.n	80037d6 <osThreadNew+0xd6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2ba7      	cmp	r3, #167	@ 0xa7
 80037be:	d90a      	bls.n	80037d6 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <osThreadNew+0xd6>
        mem = 1;
 80037d0:	2301      	movs	r3, #1
 80037d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037d4:	e010      	b.n	80037f8 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10c      	bne.n	80037f8 <osThreadNew+0xf8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d108      	bne.n	80037f8 <osThreadNew+0xf8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <osThreadNew+0xf8>
          mem = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037f2:	e001      	b.n	80037f8 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80037f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d110      	bne.n	8003820 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003806:	9202      	str	r2, [sp, #8]
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003812:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f001 fab5 	bl	8004d84 <xTaskCreateStatic>
 800381a:	4603      	mov	r3, r0
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e013      	b.n	8003848 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	2b00      	cmp	r3, #0
 8003824:	d110      	bne.n	8003848 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003828:	b29a      	uxth	r2, r3
 800382a:	f107 0314 	add.w	r3, r7, #20
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f001 fb02 	bl	8004e42 <xTaskCreate>
 800383e:	4603      	mov	r3, r0
 8003840:	2b01      	cmp	r3, #1
 8003842:	d001      	beq.n	8003848 <osThreadNew+0x148>
          hTask = NULL;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003848:	697b      	ldr	r3, [r7, #20]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3738      	adds	r7, #56	@ 0x38
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	200001f8 	.word	0x200001f8

08003858 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003860:	f3ef 8305 	mrs	r3, IPSR
 8003864:	613b      	str	r3, [r7, #16]
  return(result);
 8003866:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10f      	bne.n	800388c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8310 	mrs	r3, PRIMASK
 8003870:	60fb      	str	r3, [r7, #12]
  return(result);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <osDelay+0x34>
 8003878:	4b0d      	ldr	r3, [pc, #52]	@ (80038b0 <osDelay+0x58>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d109      	bne.n	8003894 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003880:	f3ef 8311 	mrs	r3, BASEPRI
 8003884:	60bb      	str	r3, [r7, #8]
  return(result);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <osDelay+0x3c>
    stat = osErrorISR;
 800388c:	f06f 0305 	mvn.w	r3, #5
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	e007      	b.n	80038a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f001 fc24 	bl	80050ec <vTaskDelay>
    }
  }

  return (stat);
 80038a4:	697b      	ldr	r3, [r7, #20]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	200001f8 	.word	0x200001f8

080038b4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08c      	sub	sp, #48	@ 0x30
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038c4:	f3ef 8305 	mrs	r3, IPSR
 80038c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80038ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f040 8086 	bne.w	80039de <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d2:	f3ef 8310 	mrs	r3, PRIMASK
 80038d6:	617b      	str	r3, [r7, #20]
  return(result);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d17f      	bne.n	80039de <osSemaphoreNew+0x12a>
 80038de:	4b42      	ldr	r3, [pc, #264]	@ (80039e8 <osSemaphoreNew+0x134>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d105      	bne.n	80038f2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038e6:	f3ef 8311 	mrs	r3, BASEPRI
 80038ea:	613b      	str	r3, [r7, #16]
  return(result);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d175      	bne.n	80039de <osSemaphoreNew+0x12a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d072      	beq.n	80039de <osSemaphoreNew+0x12a>
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d86e      	bhi.n	80039de <osSemaphoreNew+0x12a>
    mem = -1;
 8003900:	f04f 33ff 	mov.w	r3, #4294967295
 8003904:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d015      	beq.n	8003938 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d006      	beq.n	8003922 <osSemaphoreNew+0x6e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b4f      	cmp	r3, #79	@ 0x4f
 800391a:	d902      	bls.n	8003922 <osSemaphoreNew+0x6e>
        mem = 1;
 800391c:	2301      	movs	r3, #1
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	e00c      	b.n	800393c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d108      	bne.n	800393c <osSemaphoreNew+0x88>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d104      	bne.n	800393c <osSemaphoreNew+0x88>
          mem = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
 8003936:	e001      	b.n	800393c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d04c      	beq.n	80039de <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d128      	bne.n	800399c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d10a      	bne.n	8003966 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2203      	movs	r2, #3
 8003956:	9200      	str	r2, [sp, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	2100      	movs	r1, #0
 800395c:	2001      	movs	r0, #1
 800395e:	f000 fa51 	bl	8003e04 <xQueueGenericCreateStatic>
 8003962:	6278      	str	r0, [r7, #36]	@ 0x24
 8003964:	e005      	b.n	8003972 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003966:	2203      	movs	r2, #3
 8003968:	2100      	movs	r1, #0
 800396a:	2001      	movs	r0, #1
 800396c:	f000 fac6 	bl	8003efc <xQueueGenericCreate>
 8003970:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d022      	beq.n	80039be <osSemaphoreNew+0x10a>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01f      	beq.n	80039be <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800397e:	2300      	movs	r3, #0
 8003980:	2200      	movs	r2, #0
 8003982:	2100      	movs	r1, #0
 8003984:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003986:	f000 fb89 	bl	800409c <xQueueGenericSend>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d016      	beq.n	80039be <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8003990:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003992:	f001 f825 	bl	80049e0 <vQueueDelete>
            hSemaphore = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	@ 0x24
 800399a:	e010      	b.n	80039be <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d108      	bne.n	80039b4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	461a      	mov	r2, r3
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 fb08 	bl	8003fc0 <xQueueCreateCountingSemaphoreStatic>
 80039b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80039b2:	e004      	b.n	80039be <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fb3b 	bl	8004032 <xQueueCreateCountingSemaphore>
 80039bc:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00c      	beq.n	80039de <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <osSemaphoreNew+0x11e>
          name = attr->name;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	e001      	b.n	80039d6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80039d6:	69f9      	ldr	r1, [r7, #28]
 80039d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039da:	f001 f94d 	bl	8004c78 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3728      	adds	r7, #40	@ 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200001f8 	.word	0x200001f8

080039ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d103      	bne.n	8003a0c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003a04:	f06f 0303 	mvn.w	r3, #3
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	e04b      	b.n	8003aa4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a0c:	f3ef 8305 	mrs	r3, IPSR
 8003a10:	617b      	str	r3, [r7, #20]
  return(result);
 8003a12:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10f      	bne.n	8003a38 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a18:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1c:	613b      	str	r3, [r7, #16]
  return(result);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <osSemaphoreAcquire+0x4c>
 8003a24:	4b22      	ldr	r3, [pc, #136]	@ (8003ab0 <osSemaphoreAcquire+0xc4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d128      	bne.n	8003a7e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a2c:	f3ef 8311 	mrs	r3, BASEPRI
 8003a30:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d022      	beq.n	8003a7e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003a3e:	f06f 0303 	mvn.w	r3, #3
 8003a42:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003a44:	e02d      	b.n	8003aa2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003a4a:	f107 0308 	add.w	r3, r7, #8
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2100      	movs	r1, #0
 8003a52:	69b8      	ldr	r0, [r7, #24]
 8003a54:	f000 ff42 	bl	80048dc <xQueueReceiveFromISR>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d003      	beq.n	8003a66 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8003a5e:	f06f 0302 	mvn.w	r3, #2
 8003a62:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003a64:	e01d      	b.n	8003aa2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01a      	beq.n	8003aa2 <osSemaphoreAcquire+0xb6>
 8003a6c:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <osSemaphoreAcquire+0xc8>)
 8003a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8003a7c:	e011      	b.n	8003aa2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	69b8      	ldr	r0, [r7, #24]
 8003a82:	f000 fe1b 	bl	80046bc <xQueueSemaphoreTake>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d00b      	beq.n	8003aa4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003a92:	f06f 0301 	mvn.w	r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	e004      	b.n	8003aa4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003a9a:	f06f 0302 	mvn.w	r3, #2
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	e000      	b.n	8003aa4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003aa2:	bf00      	nop
      }
    }
  }

  return (stat);
 8003aa4:	69fb      	ldr	r3, [r7, #28]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	200001f8 	.word	0x200001f8
 8003ab4:	e000ed04 	.word	0xe000ed04

08003ab8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d103      	bne.n	8003ad6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003ace:	f06f 0303 	mvn.w	r3, #3
 8003ad2:	61fb      	str	r3, [r7, #28]
 8003ad4:	e03e      	b.n	8003b54 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad6:	f3ef 8305 	mrs	r3, IPSR
 8003ada:	617b      	str	r3, [r7, #20]
  return(result);
 8003adc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10f      	bne.n	8003b02 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <osSemaphoreRelease+0x4a>
 8003aee:	4b1c      	ldr	r3, [pc, #112]	@ (8003b60 <osSemaphoreRelease+0xa8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d120      	bne.n	8003b38 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003af6:	f3ef 8311 	mrs	r3, BASEPRI
 8003afa:	60fb      	str	r3, [r7, #12]
  return(result);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01a      	beq.n	8003b38 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	69b8      	ldr	r0, [r7, #24]
 8003b0e:	f000 fc62 	bl	80043d6 <xQueueGiveFromISR>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d003      	beq.n	8003b20 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003b18:	f06f 0302 	mvn.w	r3, #2
 8003b1c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003b1e:	e018      	b.n	8003b52 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d015      	beq.n	8003b52 <osSemaphoreRelease+0x9a>
 8003b26:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <osSemaphoreRelease+0xac>)
 8003b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003b36:	e00c      	b.n	8003b52 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	69b8      	ldr	r0, [r7, #24]
 8003b40:	f000 faac 	bl	800409c <xQueueGenericSend>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d004      	beq.n	8003b54 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003b4a:	f06f 0302 	mvn.w	r3, #2
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	e000      	b.n	8003b54 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003b52:	bf00      	nop
    }
  }

  return (stat);
 8003b54:	69fb      	ldr	r3, [r7, #28]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200001f8 	.word	0x200001f8
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a07      	ldr	r2, [pc, #28]	@ (8003b94 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a06      	ldr	r2, [pc, #24]	@ (8003b98 <vApplicationGetIdleTaskMemory+0x30>)
 8003b7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b86:	601a      	str	r2, [r3, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	200001fc 	.word	0x200001fc
 8003b98:	200002a4 	.word	0x200002a4

08003b9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a07      	ldr	r2, [pc, #28]	@ (8003bc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003bac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4a06      	ldr	r2, [pc, #24]	@ (8003bcc <vApplicationGetTimerTaskMemory+0x30>)
 8003bb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bba:	601a      	str	r2, [r3, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000aa4 	.word	0x20000aa4
 8003bcc:	20000b4c 	.word	0x20000b4c

08003bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f103 0208 	add.w	r2, r3, #8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f04f 32ff 	mov.w	r2, #4294967295
 8003be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f103 0208 	add.w	r2, r3, #8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f103 0208 	add.w	r2, r3, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	601a      	str	r2, [r3, #0]
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d103      	bne.n	8003c8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	e00c      	b.n	8003ca6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3308      	adds	r3, #8
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	e002      	b.n	8003c9a <vListInsert+0x2e>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d2f6      	bcs.n	8003c94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	601a      	str	r2, [r3, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6892      	ldr	r2, [r2, #8]
 8003cf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6852      	ldr	r2, [r2, #4]
 8003cfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d103      	bne.n	8003d10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	1e5a      	subs	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
	...

08003d30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d5c:	f002 fc66 	bl	800662c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d68:	68f9      	ldr	r1, [r7, #12]
 8003d6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	441a      	add	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	441a      	add	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	22ff      	movs	r2, #255	@ 0xff
 8003da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	22ff      	movs	r2, #255	@ 0xff
 8003da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d114      	bne.n	8003ddc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01a      	beq.n	8003df0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3310      	adds	r3, #16
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 fc6a 	bl	8005698 <xTaskRemoveFromEventList>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d012      	beq.n	8003df0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003dca:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <xQueueGenericReset+0xd0>)
 8003dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	e009      	b.n	8003df0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3310      	adds	r3, #16
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fef5 	bl	8003bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3324      	adds	r3, #36	@ 0x24
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fef0 	bl	8003bd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003df0:	f002 fc4c 	bl	800668c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003df4:	2301      	movs	r3, #1
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	e000ed04 	.word	0xe000ed04

08003e04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08e      	sub	sp, #56	@ 0x38
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e2a:	bf00      	nop
 8003e2c:	bf00      	nop
 8003e2e:	e7fd      	b.n	8003e2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	e7fd      	b.n	8003e4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <xQueueGenericCreateStatic+0x56>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <xQueueGenericCreateStatic+0x5a>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <xQueueGenericCreateStatic+0x5c>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10b      	bne.n	8003e7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	623b      	str	r3, [r7, #32]
}
 8003e76:	bf00      	nop
 8003e78:	bf00      	nop
 8003e7a:	e7fd      	b.n	8003e78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <xQueueGenericCreateStatic+0x84>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <xQueueGenericCreateStatic+0x88>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <xQueueGenericCreateStatic+0x8a>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	61fb      	str	r3, [r7, #28]
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	e7fd      	b.n	8003ea6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003eaa:	2350      	movs	r3, #80	@ 0x50
 8003eac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b50      	cmp	r3, #80	@ 0x50
 8003eb2:	d00b      	beq.n	8003ecc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	61bb      	str	r3, [r7, #24]
}
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ede:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f844 	bl	8003f7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3730      	adds	r7, #48	@ 0x30
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	@ 0x28
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	4613      	mov	r3, r2
 8003f08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	613b      	str	r3, [r7, #16]
}
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	e004      	b.n	8003f3e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	fb02 f303 	mul.w	r3, r2, r3
 8003f3c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	3350      	adds	r3, #80	@ 0x50
 8003f42:	4618      	mov	r0, r3
 8003f44:	f002 fc74 	bl	8006830 <pvPortMalloc>
 8003f48:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00f      	beq.n	8003f70 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	3350      	adds	r3, #80	@ 0x50
 8003f54:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f5e:	79fa      	ldrb	r2, [r7, #7]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f805 	bl	8003f7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f70:	69bb      	ldr	r3, [r7, #24]
	}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3720      	adds	r7, #32
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e002      	b.n	8003f9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fa8:	2101      	movs	r1, #1
 8003faa:	69b8      	ldr	r0, [r7, #24]
 8003fac:	f7ff fec0 	bl	8003d30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	@ 0x28
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	61bb      	str	r3, [r7, #24]
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	e7fd      	b.n	8003fe6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d90b      	bls.n	800400a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	617b      	str	r3, [r7, #20]
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	e7fd      	b.n	8004006 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800400a:	2302      	movs	r3, #2
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	2100      	movs	r1, #0
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff fef5 	bl	8003e04 <xQueueGenericCreateStatic>
 800401a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004028:	69fb      	ldr	r3, [r7, #28]
	}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10b      	bne.n	800405a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	613b      	str	r3, [r7, #16]
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	e7fd      	b.n	8004056 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	429a      	cmp	r2, r3
 8004060:	d90b      	bls.n	800407a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	60fb      	str	r3, [r7, #12]
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	e7fd      	b.n	8004076 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800407a:	2202      	movs	r2, #2
 800407c:	2100      	movs	r1, #0
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff ff3c 	bl	8003efc <xQueueGenericCreate>
 8004084:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004092:	697b      	ldr	r3, [r7, #20]
	}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08e      	sub	sp, #56	@ 0x38
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040aa:	2300      	movs	r3, #0
 80040ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10b      	bne.n	80040d0 <xQueueGenericSend+0x34>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	e7fd      	b.n	80040cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <xQueueGenericSend+0x42>
 80040d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <xQueueGenericSend+0x46>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <xQueueGenericSend+0x48>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <xQueueGenericSend+0x64>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d103      	bne.n	800410e <xQueueGenericSend+0x72>
 8004106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <xQueueGenericSend+0x76>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <xQueueGenericSend+0x78>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <xQueueGenericSend+0x94>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	623b      	str	r3, [r7, #32]
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004130:	f001 fc7c 	bl	8005a2c <xTaskGetSchedulerState>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d102      	bne.n	8004140 <xQueueGenericSend+0xa4>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <xQueueGenericSend+0xa8>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <xQueueGenericSend+0xaa>
 8004144:	2300      	movs	r3, #0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <xQueueGenericSend+0xc6>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	61fb      	str	r3, [r7, #28]
}
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	e7fd      	b.n	800415e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004162:	f002 fa63 	bl	800662c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004168:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <xQueueGenericSend+0xdc>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d129      	bne.n	80041cc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800417e:	f000 fc6a 	bl	8004a56 <prvCopyDataToQueue>
 8004182:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800418c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418e:	3324      	adds	r3, #36	@ 0x24
 8004190:	4618      	mov	r0, r3
 8004192:	f001 fa81 	bl	8005698 <xTaskRemoveFromEventList>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d013      	beq.n	80041c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800419c:	4b3f      	ldr	r3, [pc, #252]	@ (800429c <xQueueGenericSend+0x200>)
 800419e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	e00a      	b.n	80041c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041b4:	4b39      	ldr	r3, [pc, #228]	@ (800429c <xQueueGenericSend+0x200>)
 80041b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041c4:	f002 fa62 	bl	800668c <vPortExitCritical>
				return pdPASS;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e063      	b.n	8004294 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041d2:	f002 fa5b 	bl	800668c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e05c      	b.n	8004294 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fabb 	bl	8005760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041ea:	2301      	movs	r3, #1
 80041ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ee:	f002 fa4d 	bl	800668c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041f2:	f001 f821 	bl	8005238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041f6:	f002 fa19 	bl	800662c <vPortEnterCritical>
 80041fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004200:	b25b      	sxtb	r3, r3
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d103      	bne.n	8004210 <xQueueGenericSend+0x174>
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004216:	b25b      	sxtb	r3, r3
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d103      	bne.n	8004226 <xQueueGenericSend+0x18a>
 800421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004226:	f002 fa31 	bl	800668c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800422a:	1d3a      	adds	r2, r7, #4
 800422c:	f107 0314 	add.w	r3, r7, #20
 8004230:	4611      	mov	r1, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f001 faaa 	bl	800578c <xTaskCheckForTimeOut>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d124      	bne.n	8004288 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800423e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004240:	f000 fd01 	bl	8004c46 <prvIsQueueFull>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d018      	beq.n	800427c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424c:	3310      	adds	r3, #16
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f9ce 	bl	80055f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800425a:	f000 fc8c 	bl	8004b76 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800425e:	f000 fff9 	bl	8005254 <xTaskResumeAll>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	f47f af7c 	bne.w	8004162 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800426a:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <xQueueGenericSend+0x200>)
 800426c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	e772      	b.n	8004162 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800427c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800427e:	f000 fc7a 	bl	8004b76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004282:	f000 ffe7 	bl	8005254 <xTaskResumeAll>
 8004286:	e76c      	b.n	8004162 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800428a:	f000 fc74 	bl	8004b76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800428e:	f000 ffe1 	bl	8005254 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004292:	2300      	movs	r3, #0
		}
	}
}
 8004294:	4618      	mov	r0, r3
 8004296:	3738      	adds	r7, #56	@ 0x38
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	e000ed04 	.word	0xe000ed04

080042a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08e      	sub	sp, #56	@ 0x38
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80042b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	e7fd      	b.n	80042cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <xQueueGenericSendFromISR+0x3e>
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <xQueueGenericSendFromISR+0x42>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <xQueueGenericSendFromISR+0x44>
 80042e2:	2300      	movs	r3, #0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	623b      	str	r3, [r7, #32]
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d103      	bne.n	800430e <xQueueGenericSendFromISR+0x6e>
 8004306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <xQueueGenericSendFromISR+0x72>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <xQueueGenericSendFromISR+0x74>
 8004312:	2300      	movs	r3, #0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	61fb      	str	r3, [r7, #28]
}
 800432a:	bf00      	nop
 800432c:	bf00      	nop
 800432e:	e7fd      	b.n	800432c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004330:	f002 fa3e 	bl	80067b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004334:	f3ef 8211 	mrs	r2, BASEPRI
 8004338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	61ba      	str	r2, [r7, #24]
 800434a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800434c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800434e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004358:	429a      	cmp	r2, r3
 800435a:	d302      	bcc.n	8004362 <xQueueGenericSendFromISR+0xc2>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d12c      	bne.n	80043bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004372:	f000 fb70 	bl	8004a56 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004376:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437e:	d112      	bne.n	80043a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	d016      	beq.n	80043b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438a:	3324      	adds	r3, #36	@ 0x24
 800438c:	4618      	mov	r0, r3
 800438e:	f001 f983 	bl	8005698 <xTaskRemoveFromEventList>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00e      	beq.n	80043b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e007      	b.n	80043b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043aa:	3301      	adds	r3, #1
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	b25a      	sxtb	r2, r3
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80043b6:	2301      	movs	r3, #1
 80043b8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80043ba:	e001      	b.n	80043c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3738      	adds	r7, #56	@ 0x38
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b08e      	sub	sp, #56	@ 0x38
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10b      	bne.n	8004402 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	623b      	str	r3, [r7, #32]
}
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	e7fd      	b.n	80043fe <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00b      	beq.n	8004422 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	61fb      	str	r3, [r7, #28]
}
 800441c:	bf00      	nop
 800441e:	bf00      	nop
 8004420:	e7fd      	b.n	800441e <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <xQueueGiveFromISR+0x5c>
 800442a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <xQueueGiveFromISR+0x60>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <xQueueGiveFromISR+0x62>
 8004436:	2300      	movs	r3, #0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	61bb      	str	r3, [r7, #24]
}
 800444e:	bf00      	nop
 8004450:	bf00      	nop
 8004452:	e7fd      	b.n	8004450 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004454:	f002 f9ac 	bl	80067b0 <vPortValidateInterruptPriority>
	__asm volatile
 8004458:	f3ef 8211 	mrs	r2, BASEPRI
 800445c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	617a      	str	r2, [r7, #20]
 800446e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004470:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004472:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800447a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004480:	429a      	cmp	r2, r3
 8004482:	d22b      	bcs.n	80044dc <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800448a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800448e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004496:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d112      	bne.n	80044c6 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d016      	beq.n	80044d6 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044aa:	3324      	adds	r3, #36	@ 0x24
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 f8f3 	bl	8005698 <xTaskRemoveFromEventList>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00e      	beq.n	80044d6 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e007      	b.n	80044d6 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044ca:	3301      	adds	r3, #1
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	b25a      	sxtb	r2, r3
 80044d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80044d6:	2301      	movs	r3, #1
 80044d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044da:	e001      	b.n	80044e0 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f383 8811 	msr	BASEPRI, r3
}
 80044ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3738      	adds	r7, #56	@ 0x38
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08c      	sub	sp, #48	@ 0x30
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800450c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10b      	bne.n	800452a <xQueueReceive+0x32>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	623b      	str	r3, [r7, #32]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d103      	bne.n	8004538 <xQueueReceive+0x40>
 8004530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <xQueueReceive+0x44>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <xQueueReceive+0x46>
 800453c:	2300      	movs	r3, #0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10b      	bne.n	800455a <xQueueReceive+0x62>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	61fb      	str	r3, [r7, #28]
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	e7fd      	b.n	8004556 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800455a:	f001 fa67 	bl	8005a2c <xTaskGetSchedulerState>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <xQueueReceive+0x72>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <xQueueReceive+0x76>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <xQueueReceive+0x78>
 800456e:	2300      	movs	r3, #0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <xQueueReceive+0x94>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	61bb      	str	r3, [r7, #24]
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800458c:	f002 f84e 	bl	800662c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01f      	beq.n	80045dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045a0:	f000 fac3 	bl	8004b2a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	1e5a      	subs	r2, r3, #1
 80045a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00f      	beq.n	80045d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b6:	3310      	adds	r3, #16
 80045b8:	4618      	mov	r0, r3
 80045ba:	f001 f86d 	bl	8005698 <xTaskRemoveFromEventList>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045c4:	4b3c      	ldr	r3, [pc, #240]	@ (80046b8 <xQueueReceive+0x1c0>)
 80045c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045d4:	f002 f85a 	bl	800668c <vPortExitCritical>
				return pdPASS;
 80045d8:	2301      	movs	r3, #1
 80045da:	e069      	b.n	80046b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d103      	bne.n	80045ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045e2:	f002 f853 	bl	800668c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e062      	b.n	80046b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045f0:	f107 0310 	add.w	r3, r7, #16
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 f8b3 	bl	8005760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045fa:	2301      	movs	r3, #1
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045fe:	f002 f845 	bl	800668c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004602:	f000 fe19 	bl	8005238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004606:	f002 f811 	bl	800662c <vPortEnterCritical>
 800460a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004610:	b25b      	sxtb	r3, r3
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d103      	bne.n	8004620 <xQueueReceive+0x128>
 8004618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004626:	b25b      	sxtb	r3, r3
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d103      	bne.n	8004636 <xQueueReceive+0x13e>
 800462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004636:	f002 f829 	bl	800668c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800463a:	1d3a      	adds	r2, r7, #4
 800463c:	f107 0310 	add.w	r3, r7, #16
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f001 f8a2 	bl	800578c <xTaskCheckForTimeOut>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d123      	bne.n	8004696 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800464e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004650:	f000 fae3 	bl	8004c1a <prvIsQueueEmpty>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d017      	beq.n	800468a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800465a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465c:	3324      	adds	r3, #36	@ 0x24
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f000 ffc6 	bl	80055f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800466a:	f000 fa84 	bl	8004b76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800466e:	f000 fdf1 	bl	8005254 <xTaskResumeAll>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d189      	bne.n	800458c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004678:	4b0f      	ldr	r3, [pc, #60]	@ (80046b8 <xQueueReceive+0x1c0>)
 800467a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	e780      	b.n	800458c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800468a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800468c:	f000 fa73 	bl	8004b76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004690:	f000 fde0 	bl	8005254 <xTaskResumeAll>
 8004694:	e77a      	b.n	800458c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004698:	f000 fa6d 	bl	8004b76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800469c:	f000 fdda 	bl	8005254 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046a2:	f000 faba 	bl	8004c1a <prvIsQueueEmpty>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f43f af6f 	beq.w	800458c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3730      	adds	r7, #48	@ 0x30
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08e      	sub	sp, #56	@ 0x38
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	623b      	str	r3, [r7, #32]
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	61fb      	str	r3, [r7, #28]
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004710:	f001 f98c 	bl	8005a2c <xTaskGetSchedulerState>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <xQueueSemaphoreTake+0x64>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <xQueueSemaphoreTake+0x68>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <xQueueSemaphoreTake+0x6a>
 8004724:	2300      	movs	r3, #0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	61bb      	str	r3, [r7, #24]
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004742:	f001 ff73 	bl	800662c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d024      	beq.n	800479c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	1e5a      	subs	r2, r3, #1
 8004756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004758:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800475a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004762:	f001 fae7 	bl	8005d34 <pvTaskIncrementMutexHeldCount>
 8004766:	4602      	mov	r2, r0
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800476c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00f      	beq.n	8004794 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004776:	3310      	adds	r3, #16
 8004778:	4618      	mov	r0, r3
 800477a:	f000 ff8d 	bl	8005698 <xTaskRemoveFromEventList>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004784:	4b54      	ldr	r3, [pc, #336]	@ (80048d8 <xQueueSemaphoreTake+0x21c>)
 8004786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004794:	f001 ff7a 	bl	800668c <vPortExitCritical>
				return pdPASS;
 8004798:	2301      	movs	r3, #1
 800479a:	e098      	b.n	80048ce <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d112      	bne.n	80047c8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00b      	beq.n	80047c0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	617b      	str	r3, [r7, #20]
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	e7fd      	b.n	80047bc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80047c0:	f001 ff64 	bl	800668c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e082      	b.n	80048ce <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047ce:	f107 030c 	add.w	r3, r7, #12
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 ffc4 	bl	8005760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047d8:	2301      	movs	r3, #1
 80047da:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047dc:	f001 ff56 	bl	800668c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047e0:	f000 fd2a 	bl	8005238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047e4:	f001 ff22 	bl	800662c <vPortEnterCritical>
 80047e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047ee:	b25b      	sxtb	r3, r3
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d103      	bne.n	80047fe <xQueueSemaphoreTake+0x142>
 80047f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004800:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004804:	b25b      	sxtb	r3, r3
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d103      	bne.n	8004814 <xQueueSemaphoreTake+0x158>
 800480c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004814:	f001 ff3a 	bl	800668c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004818:	463a      	mov	r2, r7
 800481a:	f107 030c 	add.w	r3, r7, #12
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f000 ffb3 	bl	800578c <xTaskCheckForTimeOut>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d132      	bne.n	8004892 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800482c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800482e:	f000 f9f4 	bl	8004c1a <prvIsQueueEmpty>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d026      	beq.n	8004886 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004840:	f001 fef4 	bl	800662c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4618      	mov	r0, r3
 800484a:	f001 f90d 	bl	8005a68 <xTaskPriorityInherit>
 800484e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004850:	f001 ff1c 	bl	800668c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004856:	3324      	adds	r3, #36	@ 0x24
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fec9 	bl	80055f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004862:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004864:	f000 f987 	bl	8004b76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004868:	f000 fcf4 	bl	8005254 <xTaskResumeAll>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	f47f af67 	bne.w	8004742 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004874:	4b18      	ldr	r3, [pc, #96]	@ (80048d8 <xQueueSemaphoreTake+0x21c>)
 8004876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	e75d      	b.n	8004742 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004886:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004888:	f000 f975 	bl	8004b76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800488c:	f000 fce2 	bl	8005254 <xTaskResumeAll>
 8004890:	e757      	b.n	8004742 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004892:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004894:	f000 f96f 	bl	8004b76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004898:	f000 fcdc 	bl	8005254 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800489c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800489e:	f000 f9bc 	bl	8004c1a <prvIsQueueEmpty>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f43f af4c 	beq.w	8004742 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00d      	beq.n	80048cc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80048b0:	f001 febc 	bl	800662c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80048b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048b6:	f000 f8b7 	bl	8004a28 <prvGetDisinheritPriorityAfterTimeout>
 80048ba:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80048bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 f9ae 	bl	8005c24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048c8:	f001 fee0 	bl	800668c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3738      	adds	r7, #56	@ 0x38
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08e      	sub	sp, #56	@ 0x38
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	623b      	str	r3, [r7, #32]
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <xQueueReceiveFromISR+0x3c>
 8004910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <xQueueReceiveFromISR+0x40>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <xQueueReceiveFromISR+0x42>
 800491c:	2300      	movs	r3, #0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10b      	bne.n	800493a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	61fb      	str	r3, [r7, #28]
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	e7fd      	b.n	8004936 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800493a:	f001 ff39 	bl	80067b0 <vPortValidateInterruptPriority>
	__asm volatile
 800493e:	f3ef 8211 	mrs	r2, BASEPRI
 8004942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	61ba      	str	r2, [r7, #24]
 8004954:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004956:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d02f      	beq.n	80049c6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800496c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004974:	f000 f8d9 	bl	8004b2a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	1e5a      	subs	r2, r3, #1
 800497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004980:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004988:	d112      	bne.n	80049b0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004994:	3310      	adds	r3, #16
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fe7e 	bl	8005698 <xTaskRemoveFromEventList>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00e      	beq.n	80049c0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00b      	beq.n	80049c0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e007      	b.n	80049c0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80049b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049b4:	3301      	adds	r3, #1
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	b25a      	sxtb	r2, r3
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80049c0:	2301      	movs	r3, #1
 80049c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c4:	e001      	b.n	80049ca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f383 8811 	msr	BASEPRI, r3
}
 80049d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3738      	adds	r7, #56	@ 0x38
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <vQueueDelete+0x2a>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60bb      	str	r3, [r7, #8]
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f95c 	bl	8004cc8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d102      	bne.n	8004a20 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f001 ffd0 	bl	80069c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d006      	beq.n	8004a46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e001      	b.n	8004a4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
	}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10d      	bne.n	8004a90 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d14d      	bne.n	8004b18 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 f85f 	bl	8005b44 <xTaskPriorityDisinherit>
 8004a86:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
 8004a8e:	e043      	b.n	8004b18 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d119      	bne.n	8004aca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6898      	ldr	r0, [r3, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	f002 f927 	bl	8006cf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	441a      	add	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d32b      	bcc.n	8004b18 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	e026      	b.n	8004b18 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68d8      	ldr	r0, [r3, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	f002 f90d 	bl	8006cf4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	425b      	negs	r3, r3
 8004ae4:	441a      	add	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d207      	bcs.n	8004b06 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	425b      	negs	r3, r3
 8004b00:	441a      	add	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d105      	bne.n	8004b18 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004b20:	697b      	ldr	r3, [r7, #20]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d018      	beq.n	8004b6e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b44:	441a      	add	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d303      	bcc.n	8004b5e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68d9      	ldr	r1, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	461a      	mov	r2, r3
 8004b68:	6838      	ldr	r0, [r7, #0]
 8004b6a:	f002 f8c3 	bl	8006cf4 <memcpy>
	}
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b7e:	f001 fd55 	bl	800662c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b88:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b8a:	e011      	b.n	8004bb0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d012      	beq.n	8004bba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3324      	adds	r3, #36	@ 0x24
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fd7d 	bl	8005698 <xTaskRemoveFromEventList>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ba4:	f000 fe56 	bl	8005854 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	dce9      	bgt.n	8004b8c <prvUnlockQueue+0x16>
 8004bb8:	e000      	b.n	8004bbc <prvUnlockQueue+0x46>
					break;
 8004bba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	22ff      	movs	r2, #255	@ 0xff
 8004bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004bc4:	f001 fd62 	bl	800668c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bc8:	f001 fd30 	bl	800662c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bd2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bd4:	e011      	b.n	8004bfa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d012      	beq.n	8004c04 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3310      	adds	r3, #16
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fd58 	bl	8005698 <xTaskRemoveFromEventList>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bee:	f000 fe31 	bl	8005854 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bf2:	7bbb      	ldrb	r3, [r7, #14]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	dce9      	bgt.n	8004bd6 <prvUnlockQueue+0x60>
 8004c02:	e000      	b.n	8004c06 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c04:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	22ff      	movs	r2, #255	@ 0xff
 8004c0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004c0e:	f001 fd3d 	bl	800668c <vPortExitCritical>
}
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c22:	f001 fd03 	bl	800662c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	e001      	b.n	8004c38 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c38:	f001 fd28 	bl	800668c <vPortExitCritical>

	return xReturn;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c4e:	f001 fced 	bl	800662c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d102      	bne.n	8004c64 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	e001      	b.n	8004c68 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c68:	f001 fd10 	bl	800668c <vPortExitCritical>

	return xReturn;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e014      	b.n	8004cb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c88:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc4 <vQueueAddToRegistry+0x4c>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c94:	490b      	ldr	r1, [pc, #44]	@ (8004cc4 <vQueueAddToRegistry+0x4c>)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c9e:	4a09      	ldr	r2, [pc, #36]	@ (8004cc4 <vQueueAddToRegistry+0x4c>)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004caa:	e006      	b.n	8004cba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b07      	cmp	r3, #7
 8004cb6:	d9e7      	bls.n	8004c88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr
 8004cc4:	20001b4c 	.word	0x20001b4c

08004cc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e016      	b.n	8004d04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004cd6:	4a10      	ldr	r2, [pc, #64]	@ (8004d18 <vQueueUnregisterQueue+0x50>)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4413      	add	r3, r2
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d10b      	bne.n	8004cfe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8004d18 <vQueueUnregisterQueue+0x50>)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2100      	movs	r1, #0
 8004cec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004cf0:	4a09      	ldr	r2, [pc, #36]	@ (8004d18 <vQueueUnregisterQueue+0x50>)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	605a      	str	r2, [r3, #4]
				break;
 8004cfc:	e006      	b.n	8004d0c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3301      	adds	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b07      	cmp	r3, #7
 8004d08:	d9e5      	bls.n	8004cd6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20001b4c 	.word	0x20001b4c

08004d1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d2c:	f001 fc7e 	bl	800662c <vPortEnterCritical>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d36:	b25b      	sxtb	r3, r3
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d103      	bne.n	8004d46 <vQueueWaitForMessageRestricted+0x2a>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d4c:	b25b      	sxtb	r3, r3
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d52:	d103      	bne.n	8004d5c <vQueueWaitForMessageRestricted+0x40>
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d5c:	f001 fc96 	bl	800668c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	3324      	adds	r3, #36	@ 0x24
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fc65 	bl	8005640 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d76:	6978      	ldr	r0, [r7, #20]
 8004d78:	f7ff fefd 	bl	8004b76 <prvUnlockQueue>
	}
 8004d7c:	bf00      	nop
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08e      	sub	sp, #56	@ 0x38
 8004d88:	af04      	add	r7, sp, #16
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	623b      	str	r3, [r7, #32]
}
 8004daa:	bf00      	nop
 8004dac:	bf00      	nop
 8004dae:	e7fd      	b.n	8004dac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <xTaskCreateStatic+0x4a>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	61fb      	str	r3, [r7, #28]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dce:	23a8      	movs	r3, #168	@ 0xa8
 8004dd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2ba8      	cmp	r3, #168	@ 0xa8
 8004dd6:	d00b      	beq.n	8004df0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	61bb      	str	r3, [r7, #24]
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01e      	beq.n	8004e34 <xTaskCreateStatic+0xb0>
 8004df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01b      	beq.n	8004e34 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e04:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9303      	str	r3, [sp, #12]
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	9302      	str	r3, [sp, #8]
 8004e16:	f107 0314 	add.w	r3, r7, #20
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f850 	bl	8004ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e2e:	f000 f8ed 	bl	800500c <prvAddNewTaskToReadyList>
 8004e32:	e001      	b.n	8004e38 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e38:	697b      	ldr	r3, [r7, #20]
	}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3728      	adds	r7, #40	@ 0x28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b08c      	sub	sp, #48	@ 0x30
 8004e46:	af04      	add	r7, sp, #16
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	603b      	str	r3, [r7, #0]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 fcea 	bl	8006830 <pvPortMalloc>
 8004e5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004e64:	20a8      	movs	r0, #168	@ 0xa8
 8004e66:	f001 fce3 	bl	8006830 <pvPortMalloc>
 8004e6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e78:	e005      	b.n	8004e86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e7a:	6978      	ldr	r0, [r7, #20]
 8004e7c:	f001 fda0 	bl	80069c0 <vPortFree>
 8004e80:	e001      	b.n	8004e86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d017      	beq.n	8004ebc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e94:	88fa      	ldrh	r2, [r7, #6]
 8004e96:	2300      	movs	r3, #0
 8004e98:	9303      	str	r3, [sp, #12]
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	9302      	str	r3, [sp, #8]
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f80e 	bl	8004ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eb0:	69f8      	ldr	r0, [r7, #28]
 8004eb2:	f000 f8ab 	bl	800500c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	e002      	b.n	8004ec2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ec2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3720      	adds	r7, #32
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004edc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	21a5      	movs	r1, #165	@ 0xa5
 8004ee6:	f001 fe81 	bl	8006bec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f023 0307 	bic.w	r3, r3, #7
 8004f02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	617b      	str	r3, [r7, #20]
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	e7fd      	b.n	8004f22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	e012      	b.n	8004f52 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	7819      	ldrb	r1, [r3, #0]
 8004f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	3334      	adds	r3, #52	@ 0x34
 8004f3c:	460a      	mov	r2, r1
 8004f3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d006      	beq.n	8004f5a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	2b0f      	cmp	r3, #15
 8004f56:	d9e9      	bls.n	8004f2c <prvInitialiseNewTask+0x60>
 8004f58:	e000      	b.n	8004f5c <prvInitialiseNewTask+0x90>
		{
			break;
 8004f5a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	2b37      	cmp	r3, #55	@ 0x37
 8004f68:	d901      	bls.n	8004f6e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f6a:	2337      	movs	r3, #55	@ 0x37
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f72:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f78:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	3304      	adds	r3, #4
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe fe42 	bl	8003c0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	3318      	adds	r3, #24
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fe fe3d 	bl	8003c0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	3354      	adds	r3, #84	@ 0x54
 8004fbe:	224c      	movs	r2, #76	@ 0x4c
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 fe12 	bl	8006bec <memset>
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	4a0d      	ldr	r2, [pc, #52]	@ (8005000 <prvInitialiseNewTask+0x134>)
 8004fcc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8005004 <prvInitialiseNewTask+0x138>)
 8004fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8005008 <prvInitialiseNewTask+0x13c>)
 8004fd8:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	68f9      	ldr	r1, [r7, #12]
 8004fde:	69b8      	ldr	r0, [r7, #24]
 8004fe0:	f001 fa30 	bl	8006444 <pxPortInitialiseStack>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ff6:	bf00      	nop
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	200041d8 	.word	0x200041d8
 8005004:	20004240 	.word	0x20004240
 8005008:	200042a8 	.word	0x200042a8

0800500c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005014:	f001 fb0a 	bl	800662c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005018:	4b2d      	ldr	r3, [pc, #180]	@ (80050d0 <prvAddNewTaskToReadyList+0xc4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	4a2c      	ldr	r2, [pc, #176]	@ (80050d0 <prvAddNewTaskToReadyList+0xc4>)
 8005020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005022:	4b2c      	ldr	r3, [pc, #176]	@ (80050d4 <prvAddNewTaskToReadyList+0xc8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800502a:	4a2a      	ldr	r2, [pc, #168]	@ (80050d4 <prvAddNewTaskToReadyList+0xc8>)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005030:	4b27      	ldr	r3, [pc, #156]	@ (80050d0 <prvAddNewTaskToReadyList+0xc4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d110      	bne.n	800505a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005038:	f000 fc30 	bl	800589c <prvInitialiseTaskLists>
 800503c:	e00d      	b.n	800505a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800503e:	4b26      	ldr	r3, [pc, #152]	@ (80050d8 <prvAddNewTaskToReadyList+0xcc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005046:	4b23      	ldr	r3, [pc, #140]	@ (80050d4 <prvAddNewTaskToReadyList+0xc8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	429a      	cmp	r2, r3
 8005052:	d802      	bhi.n	800505a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005054:	4a1f      	ldr	r2, [pc, #124]	@ (80050d4 <prvAddNewTaskToReadyList+0xc8>)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800505a:	4b20      	ldr	r3, [pc, #128]	@ (80050dc <prvAddNewTaskToReadyList+0xd0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3301      	adds	r3, #1
 8005060:	4a1e      	ldr	r2, [pc, #120]	@ (80050dc <prvAddNewTaskToReadyList+0xd0>)
 8005062:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005064:	4b1d      	ldr	r3, [pc, #116]	@ (80050dc <prvAddNewTaskToReadyList+0xd0>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005070:	4b1b      	ldr	r3, [pc, #108]	@ (80050e0 <prvAddNewTaskToReadyList+0xd4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d903      	bls.n	8005080 <prvAddNewTaskToReadyList+0x74>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	4a18      	ldr	r2, [pc, #96]	@ (80050e0 <prvAddNewTaskToReadyList+0xd4>)
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4a15      	ldr	r2, [pc, #84]	@ (80050e4 <prvAddNewTaskToReadyList+0xd8>)
 800508e:	441a      	add	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f7fe fdc5 	bl	8003c26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800509c:	f001 faf6 	bl	800668c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050a0:	4b0d      	ldr	r3, [pc, #52]	@ (80050d8 <prvAddNewTaskToReadyList+0xcc>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00e      	beq.n	80050c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050a8:	4b0a      	ldr	r3, [pc, #40]	@ (80050d4 <prvAddNewTaskToReadyList+0xc8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d207      	bcs.n	80050c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050b6:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <prvAddNewTaskToReadyList+0xdc>)
 80050b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20002060 	.word	0x20002060
 80050d4:	20001b8c 	.word	0x20001b8c
 80050d8:	2000206c 	.word	0x2000206c
 80050dc:	2000207c 	.word	0x2000207c
 80050e0:	20002068 	.word	0x20002068
 80050e4:	20001b90 	.word	0x20001b90
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d018      	beq.n	8005130 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050fe:	4b14      	ldr	r3, [pc, #80]	@ (8005150 <vTaskDelay+0x64>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00b      	beq.n	800511e <vTaskDelay+0x32>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	60bb      	str	r3, [r7, #8]
}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	e7fd      	b.n	800511a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800511e:	f000 f88b 	bl	8005238 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005122:	2100      	movs	r1, #0
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fe19 	bl	8005d5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800512a:	f000 f893 	bl	8005254 <xTaskResumeAll>
 800512e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d107      	bne.n	8005146 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005136:	4b07      	ldr	r3, [pc, #28]	@ (8005154 <vTaskDelay+0x68>)
 8005138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20002088 	.word	0x20002088
 8005154:	e000ed04 	.word	0xe000ed04

08005158 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	@ 0x28
 800515c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005166:	463a      	mov	r2, r7
 8005168:	1d39      	adds	r1, r7, #4
 800516a:	f107 0308 	add.w	r3, r7, #8
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe fcfa 	bl	8003b68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	9202      	str	r2, [sp, #8]
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	2300      	movs	r3, #0
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2300      	movs	r3, #0
 8005184:	460a      	mov	r2, r1
 8005186:	4924      	ldr	r1, [pc, #144]	@ (8005218 <vTaskStartScheduler+0xc0>)
 8005188:	4824      	ldr	r0, [pc, #144]	@ (800521c <vTaskStartScheduler+0xc4>)
 800518a:	f7ff fdfb 	bl	8004d84 <xTaskCreateStatic>
 800518e:	4603      	mov	r3, r0
 8005190:	4a23      	ldr	r2, [pc, #140]	@ (8005220 <vTaskStartScheduler+0xc8>)
 8005192:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005194:	4b22      	ldr	r3, [pc, #136]	@ (8005220 <vTaskStartScheduler+0xc8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800519c:	2301      	movs	r3, #1
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	e001      	b.n	80051a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d102      	bne.n	80051b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051ac:	f000 fe2a 	bl	8005e04 <xTimerCreateTimerTask>
 80051b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d11b      	bne.n	80051f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	613b      	str	r3, [r7, #16]
}
 80051ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051cc:	4b15      	ldr	r3, [pc, #84]	@ (8005224 <vTaskStartScheduler+0xcc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3354      	adds	r3, #84	@ 0x54
 80051d2:	4a15      	ldr	r2, [pc, #84]	@ (8005228 <vTaskStartScheduler+0xd0>)
 80051d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051d6:	4b15      	ldr	r3, [pc, #84]	@ (800522c <vTaskStartScheduler+0xd4>)
 80051d8:	f04f 32ff 	mov.w	r2, #4294967295
 80051dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051de:	4b14      	ldr	r3, [pc, #80]	@ (8005230 <vTaskStartScheduler+0xd8>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80051e4:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <vTaskStartScheduler+0xdc>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051ea:	f001 f9ad 	bl	8006548 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051ee:	e00f      	b.n	8005210 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d10b      	bne.n	8005210 <vTaskStartScheduler+0xb8>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	60fb      	str	r3, [r7, #12]
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	e7fd      	b.n	800520c <vTaskStartScheduler+0xb4>
}
 8005210:	bf00      	nop
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	08006e00 	.word	0x08006e00
 800521c:	0800586d 	.word	0x0800586d
 8005220:	20002084 	.word	0x20002084
 8005224:	20001b8c 	.word	0x20001b8c
 8005228:	20000010 	.word	0x20000010
 800522c:	20002080 	.word	0x20002080
 8005230:	2000206c 	.word	0x2000206c
 8005234:	20002064 	.word	0x20002064

08005238 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800523c:	4b04      	ldr	r3, [pc, #16]	@ (8005250 <vTaskSuspendAll+0x18>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	4a03      	ldr	r2, [pc, #12]	@ (8005250 <vTaskSuspendAll+0x18>)
 8005244:	6013      	str	r3, [r2, #0]
}
 8005246:	bf00      	nop
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20002088 	.word	0x20002088

08005254 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005262:	4b42      	ldr	r3, [pc, #264]	@ (800536c <xTaskResumeAll+0x118>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <xTaskResumeAll+0x2e>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	603b      	str	r3, [r7, #0]
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	e7fd      	b.n	800527e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005282:	f001 f9d3 	bl	800662c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005286:	4b39      	ldr	r3, [pc, #228]	@ (800536c <xTaskResumeAll+0x118>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3b01      	subs	r3, #1
 800528c:	4a37      	ldr	r2, [pc, #220]	@ (800536c <xTaskResumeAll+0x118>)
 800528e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005290:	4b36      	ldr	r3, [pc, #216]	@ (800536c <xTaskResumeAll+0x118>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d162      	bne.n	800535e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005298:	4b35      	ldr	r3, [pc, #212]	@ (8005370 <xTaskResumeAll+0x11c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05e      	beq.n	800535e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052a0:	e02f      	b.n	8005302 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80052a2:	4b34      	ldr	r3, [pc, #208]	@ (8005374 <xTaskResumeAll+0x120>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3318      	adds	r3, #24
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe fd14 	bl	8003cdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fe fd0f 	bl	8003cdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005378 <xTaskResumeAll+0x124>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d903      	bls.n	80052d2 <xTaskResumeAll+0x7e>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005378 <xTaskResumeAll+0x124>)
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4a27      	ldr	r2, [pc, #156]	@ (800537c <xTaskResumeAll+0x128>)
 80052e0:	441a      	add	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7fe fc9c 	bl	8003c26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f2:	4b23      	ldr	r3, [pc, #140]	@ (8005380 <xTaskResumeAll+0x12c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d302      	bcc.n	8005302 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80052fc:	4b21      	ldr	r3, [pc, #132]	@ (8005384 <xTaskResumeAll+0x130>)
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005302:	4b1c      	ldr	r3, [pc, #112]	@ (8005374 <xTaskResumeAll+0x120>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1cb      	bne.n	80052a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005310:	f000 fb68 	bl	80059e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005314:	4b1c      	ldr	r3, [pc, #112]	@ (8005388 <xTaskResumeAll+0x134>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d010      	beq.n	8005342 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005320:	f000 f844 	bl	80053ac <xTaskIncrementTick>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800532a:	4b16      	ldr	r3, [pc, #88]	@ (8005384 <xTaskResumeAll+0x130>)
 800532c:	2201      	movs	r2, #1
 800532e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3b01      	subs	r3, #1
 8005334:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1f1      	bne.n	8005320 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800533c:	4b12      	ldr	r3, [pc, #72]	@ (8005388 <xTaskResumeAll+0x134>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005342:	4b10      	ldr	r3, [pc, #64]	@ (8005384 <xTaskResumeAll+0x130>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800534a:	2301      	movs	r3, #1
 800534c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800534e:	4b0f      	ldr	r3, [pc, #60]	@ (800538c <xTaskResumeAll+0x138>)
 8005350:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800535e:	f001 f995 	bl	800668c <vPortExitCritical>

	return xAlreadyYielded;
 8005362:	68bb      	ldr	r3, [r7, #8]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20002088 	.word	0x20002088
 8005370:	20002060 	.word	0x20002060
 8005374:	20002020 	.word	0x20002020
 8005378:	20002068 	.word	0x20002068
 800537c:	20001b90 	.word	0x20001b90
 8005380:	20001b8c 	.word	0x20001b8c
 8005384:	20002074 	.word	0x20002074
 8005388:	20002070 	.word	0x20002070
 800538c:	e000ed04 	.word	0xe000ed04

08005390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005396:	4b04      	ldr	r3, [pc, #16]	@ (80053a8 <xTaskGetTickCount+0x18>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800539c:	687b      	ldr	r3, [r7, #4]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr
 80053a8:	20002064 	.word	0x20002064

080053ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053b6:	4b52      	ldr	r3, [pc, #328]	@ (8005500 <xTaskIncrementTick+0x154>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 808f 	bne.w	80054de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053c0:	4b50      	ldr	r3, [pc, #320]	@ (8005504 <xTaskIncrementTick+0x158>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053c8:	4a4e      	ldr	r2, [pc, #312]	@ (8005504 <xTaskIncrementTick+0x158>)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d121      	bne.n	8005418 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80053d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005508 <xTaskIncrementTick+0x15c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	603b      	str	r3, [r7, #0]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <xTaskIncrementTick+0x46>
 80053f6:	4b44      	ldr	r3, [pc, #272]	@ (8005508 <xTaskIncrementTick+0x15c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	4b43      	ldr	r3, [pc, #268]	@ (800550c <xTaskIncrementTick+0x160>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a41      	ldr	r2, [pc, #260]	@ (8005508 <xTaskIncrementTick+0x15c>)
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4a41      	ldr	r2, [pc, #260]	@ (800550c <xTaskIncrementTick+0x160>)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	4b41      	ldr	r3, [pc, #260]	@ (8005510 <xTaskIncrementTick+0x164>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3301      	adds	r3, #1
 8005410:	4a3f      	ldr	r2, [pc, #252]	@ (8005510 <xTaskIncrementTick+0x164>)
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	f000 fae6 	bl	80059e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005418:	4b3e      	ldr	r3, [pc, #248]	@ (8005514 <xTaskIncrementTick+0x168>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	429a      	cmp	r2, r3
 8005420:	d34e      	bcc.n	80054c0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005422:	4b39      	ldr	r3, [pc, #228]	@ (8005508 <xTaskIncrementTick+0x15c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <xTaskIncrementTick+0x84>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <xTaskIncrementTick+0x86>
 8005430:	2300      	movs	r3, #0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d004      	beq.n	8005440 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005436:	4b37      	ldr	r3, [pc, #220]	@ (8005514 <xTaskIncrementTick+0x168>)
 8005438:	f04f 32ff 	mov.w	r2, #4294967295
 800543c:	601a      	str	r2, [r3, #0]
					break;
 800543e:	e03f      	b.n	80054c0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005440:	4b31      	ldr	r3, [pc, #196]	@ (8005508 <xTaskIncrementTick+0x15c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d203      	bcs.n	8005460 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005458:	4a2e      	ldr	r2, [pc, #184]	@ (8005514 <xTaskIncrementTick+0x168>)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6013      	str	r3, [r2, #0]
						break;
 800545e:	e02f      	b.n	80054c0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	3304      	adds	r3, #4
 8005464:	4618      	mov	r0, r3
 8005466:	f7fe fc39 	bl	8003cdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	3318      	adds	r3, #24
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fc30 	bl	8003cdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005480:	4b25      	ldr	r3, [pc, #148]	@ (8005518 <xTaskIncrementTick+0x16c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d903      	bls.n	8005490 <xTaskIncrementTick+0xe4>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548c:	4a22      	ldr	r2, [pc, #136]	@ (8005518 <xTaskIncrementTick+0x16c>)
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4a1f      	ldr	r2, [pc, #124]	@ (800551c <xTaskIncrementTick+0x170>)
 800549e:	441a      	add	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f7fe fbbd 	bl	8003c26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005520 <xTaskIncrementTick+0x174>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d3b3      	bcc.n	8005422 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054be:	e7b0      	b.n	8005422 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054c0:	4b17      	ldr	r3, [pc, #92]	@ (8005520 <xTaskIncrementTick+0x174>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c6:	4915      	ldr	r1, [pc, #84]	@ (800551c <xTaskIncrementTick+0x170>)
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d907      	bls.n	80054e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e004      	b.n	80054e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054de:	4b11      	ldr	r3, [pc, #68]	@ (8005524 <xTaskIncrementTick+0x178>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3301      	adds	r3, #1
 80054e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005524 <xTaskIncrementTick+0x178>)
 80054e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005528 <xTaskIncrementTick+0x17c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80054f0:	2301      	movs	r3, #1
 80054f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054f4:	697b      	ldr	r3, [r7, #20]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20002088 	.word	0x20002088
 8005504:	20002064 	.word	0x20002064
 8005508:	20002018 	.word	0x20002018
 800550c:	2000201c 	.word	0x2000201c
 8005510:	20002078 	.word	0x20002078
 8005514:	20002080 	.word	0x20002080
 8005518:	20002068 	.word	0x20002068
 800551c:	20001b90 	.word	0x20001b90
 8005520:	20001b8c 	.word	0x20001b8c
 8005524:	20002070 	.word	0x20002070
 8005528:	20002074 	.word	0x20002074

0800552c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005532:	4b2a      	ldr	r3, [pc, #168]	@ (80055dc <vTaskSwitchContext+0xb0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800553a:	4b29      	ldr	r3, [pc, #164]	@ (80055e0 <vTaskSwitchContext+0xb4>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005540:	e047      	b.n	80055d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005542:	4b27      	ldr	r3, [pc, #156]	@ (80055e0 <vTaskSwitchContext+0xb4>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005548:	4b26      	ldr	r3, [pc, #152]	@ (80055e4 <vTaskSwitchContext+0xb8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	e011      	b.n	8005574 <vTaskSwitchContext+0x48>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <vTaskSwitchContext+0x42>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	607b      	str	r3, [r7, #4]
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <vTaskSwitchContext+0x3e>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3b01      	subs	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	491c      	ldr	r1, [pc, #112]	@ (80055e8 <vTaskSwitchContext+0xbc>)
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0e3      	beq.n	8005550 <vTaskSwitchContext+0x24>
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4a15      	ldr	r2, [pc, #84]	@ (80055e8 <vTaskSwitchContext+0xbc>)
 8005594:	4413      	add	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	3308      	adds	r3, #8
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d104      	bne.n	80055b8 <vTaskSwitchContext+0x8c>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	605a      	str	r2, [r3, #4]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	4a0b      	ldr	r2, [pc, #44]	@ (80055ec <vTaskSwitchContext+0xc0>)
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	4a08      	ldr	r2, [pc, #32]	@ (80055e4 <vTaskSwitchContext+0xb8>)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055c8:	4b08      	ldr	r3, [pc, #32]	@ (80055ec <vTaskSwitchContext+0xc0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3354      	adds	r3, #84	@ 0x54
 80055ce:	4a08      	ldr	r2, [pc, #32]	@ (80055f0 <vTaskSwitchContext+0xc4>)
 80055d0:	6013      	str	r3, [r2, #0]
}
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr
 80055dc:	20002088 	.word	0x20002088
 80055e0:	20002074 	.word	0x20002074
 80055e4:	20002068 	.word	0x20002068
 80055e8:	20001b90 	.word	0x20001b90
 80055ec:	20001b8c 	.word	0x20001b8c
 80055f0:	20000010 	.word	0x20000010

080055f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10b      	bne.n	800561c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	60fb      	str	r3, [r7, #12]
}
 8005616:	bf00      	nop
 8005618:	bf00      	nop
 800561a:	e7fd      	b.n	8005618 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800561c:	4b07      	ldr	r3, [pc, #28]	@ (800563c <vTaskPlaceOnEventList+0x48>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3318      	adds	r3, #24
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7fe fb21 	bl	8003c6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800562a:	2101      	movs	r1, #1
 800562c:	6838      	ldr	r0, [r7, #0]
 800562e:	f000 fb95 	bl	8005d5c <prvAddCurrentTaskToDelayedList>
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20001b8c 	.word	0x20001b8c

08005640 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	617b      	str	r3, [r7, #20]
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800566a:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <vTaskPlaceOnEventListRestricted+0x54>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3318      	adds	r3, #24
 8005670:	4619      	mov	r1, r3
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7fe fad7 	bl	8003c26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800567e:	f04f 33ff 	mov.w	r3, #4294967295
 8005682:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	68b8      	ldr	r0, [r7, #8]
 8005688:	f000 fb68 	bl	8005d5c <prvAddCurrentTaskToDelayedList>
	}
 800568c:	bf00      	nop
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20001b8c 	.word	0x20001b8c

08005698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60fb      	str	r3, [r7, #12]
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	e7fd      	b.n	80056c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	3318      	adds	r3, #24
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fe fb06 	bl	8003cdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005748 <xTaskRemoveFromEventList+0xb0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d11d      	bne.n	8005714 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	3304      	adds	r3, #4
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fe fafd 	bl	8003cdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e6:	4b19      	ldr	r3, [pc, #100]	@ (800574c <xTaskRemoveFromEventList+0xb4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d903      	bls.n	80056f6 <xTaskRemoveFromEventList+0x5e>
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	4a16      	ldr	r2, [pc, #88]	@ (800574c <xTaskRemoveFromEventList+0xb4>)
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4a13      	ldr	r2, [pc, #76]	@ (8005750 <xTaskRemoveFromEventList+0xb8>)
 8005704:	441a      	add	r2, r3
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3304      	adds	r3, #4
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f7fe fa8a 	bl	8003c26 <vListInsertEnd>
 8005712:	e005      	b.n	8005720 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	3318      	adds	r3, #24
 8005718:	4619      	mov	r1, r3
 800571a:	480e      	ldr	r0, [pc, #56]	@ (8005754 <xTaskRemoveFromEventList+0xbc>)
 800571c:	f7fe fa83 	bl	8003c26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005724:	4b0c      	ldr	r3, [pc, #48]	@ (8005758 <xTaskRemoveFromEventList+0xc0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	429a      	cmp	r2, r3
 800572c:	d905      	bls.n	800573a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800572e:	2301      	movs	r3, #1
 8005730:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005732:	4b0a      	ldr	r3, [pc, #40]	@ (800575c <xTaskRemoveFromEventList+0xc4>)
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e001      	b.n	800573e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800573e:	697b      	ldr	r3, [r7, #20]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20002088 	.word	0x20002088
 800574c:	20002068 	.word	0x20002068
 8005750:	20001b90 	.word	0x20001b90
 8005754:	20002020 	.word	0x20002020
 8005758:	20001b8c 	.word	0x20001b8c
 800575c:	20002074 	.word	0x20002074

08005760 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005768:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <vTaskInternalSetTimeOutState+0x24>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005770:	4b05      	ldr	r3, [pc, #20]	@ (8005788 <vTaskInternalSetTimeOutState+0x28>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	605a      	str	r2, [r3, #4]
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20002078 	.word	0x20002078
 8005788:	20002064 	.word	0x20002064

0800578c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10b      	bne.n	80057b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	613b      	str	r3, [r7, #16]
}
 80057ae:	bf00      	nop
 80057b0:	bf00      	nop
 80057b2:	e7fd      	b.n	80057b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	60fb      	str	r3, [r7, #12]
}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	e7fd      	b.n	80057ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80057d2:	f000 ff2b 	bl	800662c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057d6:	4b1d      	ldr	r3, [pc, #116]	@ (800584c <xTaskCheckForTimeOut+0xc0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d102      	bne.n	80057f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	e023      	b.n	800583e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <xTaskCheckForTimeOut+0xc4>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d007      	beq.n	8005812 <xTaskCheckForTimeOut+0x86>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800580c:	2301      	movs	r3, #1
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	e015      	b.n	800583e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	429a      	cmp	r2, r3
 800581a:	d20b      	bcs.n	8005834 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	1ad2      	subs	r2, r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ff99 	bl	8005760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	e004      	b.n	800583e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800583a:	2301      	movs	r3, #1
 800583c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800583e:	f000 ff25 	bl	800668c <vPortExitCritical>

	return xReturn;
 8005842:	69fb      	ldr	r3, [r7, #28]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20002064 	.word	0x20002064
 8005850:	20002078 	.word	0x20002078

08005854 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005858:	4b03      	ldr	r3, [pc, #12]	@ (8005868 <vTaskMissedYield+0x14>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]
}
 800585e:	bf00      	nop
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20002074 	.word	0x20002074

0800586c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005874:	f000 f852 	bl	800591c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <prvIdleTask+0x28>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d9f9      	bls.n	8005874 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005880:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <prvIdleTask+0x2c>)
 8005882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005890:	e7f0      	b.n	8005874 <prvIdleTask+0x8>
 8005892:	bf00      	nop
 8005894:	20001b90 	.word	0x20001b90
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058a2:	2300      	movs	r3, #0
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	e00c      	b.n	80058c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4a12      	ldr	r2, [pc, #72]	@ (80058fc <prvInitialiseTaskLists+0x60>)
 80058b4:	4413      	add	r3, r2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe f98a 	bl	8003bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3301      	adds	r3, #1
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b37      	cmp	r3, #55	@ 0x37
 80058c6:	d9ef      	bls.n	80058a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058c8:	480d      	ldr	r0, [pc, #52]	@ (8005900 <prvInitialiseTaskLists+0x64>)
 80058ca:	f7fe f981 	bl	8003bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058ce:	480d      	ldr	r0, [pc, #52]	@ (8005904 <prvInitialiseTaskLists+0x68>)
 80058d0:	f7fe f97e 	bl	8003bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058d4:	480c      	ldr	r0, [pc, #48]	@ (8005908 <prvInitialiseTaskLists+0x6c>)
 80058d6:	f7fe f97b 	bl	8003bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058da:	480c      	ldr	r0, [pc, #48]	@ (800590c <prvInitialiseTaskLists+0x70>)
 80058dc:	f7fe f978 	bl	8003bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058e0:	480b      	ldr	r0, [pc, #44]	@ (8005910 <prvInitialiseTaskLists+0x74>)
 80058e2:	f7fe f975 	bl	8003bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <prvInitialiseTaskLists+0x78>)
 80058e8:	4a05      	ldr	r2, [pc, #20]	@ (8005900 <prvInitialiseTaskLists+0x64>)
 80058ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <prvInitialiseTaskLists+0x7c>)
 80058ee:	4a05      	ldr	r2, [pc, #20]	@ (8005904 <prvInitialiseTaskLists+0x68>)
 80058f0:	601a      	str	r2, [r3, #0]
}
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20001b90 	.word	0x20001b90
 8005900:	20001ff0 	.word	0x20001ff0
 8005904:	20002004 	.word	0x20002004
 8005908:	20002020 	.word	0x20002020
 800590c:	20002034 	.word	0x20002034
 8005910:	2000204c 	.word	0x2000204c
 8005914:	20002018 	.word	0x20002018
 8005918:	2000201c 	.word	0x2000201c

0800591c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005922:	e019      	b.n	8005958 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005924:	f000 fe82 	bl	800662c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005928:	4b10      	ldr	r3, [pc, #64]	@ (800596c <prvCheckTasksWaitingTermination+0x50>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3304      	adds	r3, #4
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe f9d1 	bl	8003cdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <prvCheckTasksWaitingTermination+0x54>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3b01      	subs	r3, #1
 8005940:	4a0b      	ldr	r2, [pc, #44]	@ (8005970 <prvCheckTasksWaitingTermination+0x54>)
 8005942:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005944:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <prvCheckTasksWaitingTermination+0x58>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3b01      	subs	r3, #1
 800594a:	4a0a      	ldr	r2, [pc, #40]	@ (8005974 <prvCheckTasksWaitingTermination+0x58>)
 800594c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800594e:	f000 fe9d 	bl	800668c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f810 	bl	8005978 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005958:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <prvCheckTasksWaitingTermination+0x58>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e1      	bne.n	8005924 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20002034 	.word	0x20002034
 8005970:	20002060 	.word	0x20002060
 8005974:	20002048 	.word	0x20002048

08005978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3354      	adds	r3, #84	@ 0x54
 8005984:	4618      	mov	r0, r3
 8005986:	f001 f939 	bl	8006bfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005990:	2b00      	cmp	r3, #0
 8005992:	d108      	bne.n	80059a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005998:	4618      	mov	r0, r3
 800599a:	f001 f811 	bl	80069c0 <vPortFree>
				vPortFree( pxTCB );
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f001 f80e 	bl	80069c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059a4:	e019      	b.n	80059da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d103      	bne.n	80059b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 f805 	bl	80069c0 <vPortFree>
	}
 80059b6:	e010      	b.n	80059da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d00b      	beq.n	80059da <prvDeleteTCB+0x62>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	60fb      	str	r3, [r7, #12]
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	e7fd      	b.n	80059d6 <prvDeleteTCB+0x5e>
	}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005a24 <prvResetNextTaskUnblockTime+0x40>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <prvResetNextTaskUnblockTime+0x14>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <prvResetNextTaskUnblockTime+0x16>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <prvResetNextTaskUnblockTime+0x44>)
 8005a00:	f04f 32ff 	mov.w	r2, #4294967295
 8005a04:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a06:	e008      	b.n	8005a1a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a08:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <prvResetNextTaskUnblockTime+0x40>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4a04      	ldr	r2, [pc, #16]	@ (8005a28 <prvResetNextTaskUnblockTime+0x44>)
 8005a18:	6013      	str	r3, [r2, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr
 8005a24:	20002018 	.word	0x20002018
 8005a28:	20002080 	.word	0x20002080

08005a2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a32:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <xTaskGetSchedulerState+0x34>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d102      	bne.n	8005a40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	607b      	str	r3, [r7, #4]
 8005a3e:	e008      	b.n	8005a52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a40:	4b08      	ldr	r3, [pc, #32]	@ (8005a64 <xTaskGetSchedulerState+0x38>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	e001      	b.n	8005a52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a52:	687b      	ldr	r3, [r7, #4]
	}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	2000206c 	.word	0x2000206c
 8005a64:	20002088 	.word	0x20002088

08005a68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d056      	beq.n	8005b2c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a82:	4b2d      	ldr	r3, [pc, #180]	@ (8005b38 <xTaskPriorityInherit+0xd0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d246      	bcs.n	8005b1a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	db06      	blt.n	8005aa2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a94:	4b28      	ldr	r3, [pc, #160]	@ (8005b38 <xTaskPriorityInherit+0xd0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	6959      	ldr	r1, [r3, #20]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4a22      	ldr	r2, [pc, #136]	@ (8005b3c <xTaskPriorityInherit+0xd4>)
 8005ab4:	4413      	add	r3, r2
 8005ab6:	4299      	cmp	r1, r3
 8005ab8:	d101      	bne.n	8005abe <xTaskPriorityInherit+0x56>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <xTaskPriorityInherit+0x58>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d022      	beq.n	8005b0a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fe f907 	bl	8003cdc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ace:	4b1a      	ldr	r3, [pc, #104]	@ (8005b38 <xTaskPriorityInherit+0xd0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005adc:	4b18      	ldr	r3, [pc, #96]	@ (8005b40 <xTaskPriorityInherit+0xd8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d903      	bls.n	8005aec <xTaskPriorityInherit+0x84>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae8:	4a15      	ldr	r2, [pc, #84]	@ (8005b40 <xTaskPriorityInherit+0xd8>)
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4a10      	ldr	r2, [pc, #64]	@ (8005b3c <xTaskPriorityInherit+0xd4>)
 8005afa:	441a      	add	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f7fe f88f 	bl	8003c26 <vListInsertEnd>
 8005b08:	e004      	b.n	8005b14 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b38 <xTaskPriorityInherit+0xd0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e008      	b.n	8005b2c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b1e:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <xTaskPriorityInherit+0xd0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d201      	bcs.n	8005b2c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20001b8c 	.word	0x20001b8c
 8005b3c:	20001b90 	.word	0x20001b90
 8005b40:	20002068 	.word	0x20002068

08005b44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d058      	beq.n	8005c0c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c18 <xTaskPriorityDisinherit+0xd4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d00b      	beq.n	8005b7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	60fb      	str	r3, [r7, #12]
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10b      	bne.n	8005b9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	60bb      	str	r3, [r7, #8]
}
 8005b96:	bf00      	nop
 8005b98:	bf00      	nop
 8005b9a:	e7fd      	b.n	8005b98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba0:	1e5a      	subs	r2, r3, #1
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d02c      	beq.n	8005c0c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d128      	bne.n	8005c0c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe f88c 	bl	8003cdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8005c1c <xTaskPriorityDisinherit+0xd8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d903      	bls.n	8005bec <xTaskPriorityDisinherit+0xa8>
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	4a0c      	ldr	r2, [pc, #48]	@ (8005c1c <xTaskPriorityDisinherit+0xd8>)
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4a09      	ldr	r2, [pc, #36]	@ (8005c20 <xTaskPriorityDisinherit+0xdc>)
 8005bfa:	441a      	add	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f7fe f80f 	bl	8003c26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c0c:	697b      	ldr	r3, [r7, #20]
	}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20001b8c 	.word	0x20001b8c
 8005c1c:	20002068 	.word	0x20002068
 8005c20:	20001b90 	.word	0x20001b90

08005c24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c32:	2301      	movs	r3, #1
 8005c34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d071      	beq.n	8005d20 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10b      	bne.n	8005c5c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	60fb      	str	r3, [r7, #12]
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	e7fd      	b.n	8005c58 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d902      	bls.n	8005c6c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	e002      	b.n	8005c72 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c70:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d051      	beq.n	8005d20 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d14c      	bne.n	8005d20 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c86:	4b28      	ldr	r3, [pc, #160]	@ (8005d28 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d10b      	bne.n	8005ca8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60bb      	str	r3, [r7, #8]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	db04      	blt.n	8005cc6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	6959      	ldr	r1, [r3, #20]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4a15      	ldr	r2, [pc, #84]	@ (8005d2c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005cd6:	4413      	add	r3, r2
 8005cd8:	4299      	cmp	r1, r3
 8005cda:	d101      	bne.n	8005ce0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01c      	beq.n	8005d20 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fd fff6 	bl	8003cdc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8005d30 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d903      	bls.n	8005d04 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	4a0b      	ldr	r2, [pc, #44]	@ (8005d30 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4a06      	ldr	r2, [pc, #24]	@ (8005d2c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005d12:	441a      	add	r2, r3
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f7fd ff83 	bl	8003c26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d20:	bf00      	nop
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20001b8c 	.word	0x20001b8c
 8005d2c:	20001b90 	.word	0x20001b90
 8005d30:	20002068 	.word	0x20002068

08005d34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d38:	4b07      	ldr	r3, [pc, #28]	@ (8005d58 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d40:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d46:	3201      	adds	r2, #1
 8005d48:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005d4a:	4b03      	ldr	r3, [pc, #12]	@ (8005d58 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
	}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20001b8c 	.word	0x20001b8c

08005d5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d66:	4b21      	ldr	r3, [pc, #132]	@ (8005dec <prvAddCurrentTaskToDelayedList+0x90>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d6c:	4b20      	ldr	r3, [pc, #128]	@ (8005df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fd ffb2 	bl	8003cdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d10a      	bne.n	8005d96 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d86:	4b1a      	ldr	r3, [pc, #104]	@ (8005df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4819      	ldr	r0, [pc, #100]	@ (8005df4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d90:	f7fd ff49 	bl	8003c26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d94:	e026      	b.n	8005de4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d9e:	4b14      	ldr	r3, [pc, #80]	@ (8005df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d209      	bcs.n	8005dc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dae:	4b12      	ldr	r3, [pc, #72]	@ (8005df8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b0f      	ldr	r3, [pc, #60]	@ (8005df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f7fd ff56 	bl	8003c6c <vListInsert>
}
 8005dc0:	e010      	b.n	8005de4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8005dfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f7fd ff4c 	bl	8003c6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005e00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d202      	bcs.n	8005de4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005dde:	4a08      	ldr	r2, [pc, #32]	@ (8005e00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6013      	str	r3, [r2, #0]
}
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20002064 	.word	0x20002064
 8005df0:	20001b8c 	.word	0x20001b8c
 8005df4:	2000204c 	.word	0x2000204c
 8005df8:	2000201c 	.word	0x2000201c
 8005dfc:	20002018 	.word	0x20002018
 8005e00:	20002080 	.word	0x20002080

08005e04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08a      	sub	sp, #40	@ 0x28
 8005e08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e0e:	f000 fad9 	bl	80063c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e12:	4b1d      	ldr	r3, [pc, #116]	@ (8005e88 <xTimerCreateTimerTask+0x84>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d021      	beq.n	8005e5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e22:	1d3a      	adds	r2, r7, #4
 8005e24:	f107 0108 	add.w	r1, r7, #8
 8005e28:	f107 030c 	add.w	r3, r7, #12
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fd feb5 	bl	8003b9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	9202      	str	r2, [sp, #8]
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	2300      	movs	r3, #0
 8005e42:	460a      	mov	r2, r1
 8005e44:	4911      	ldr	r1, [pc, #68]	@ (8005e8c <xTimerCreateTimerTask+0x88>)
 8005e46:	4812      	ldr	r0, [pc, #72]	@ (8005e90 <xTimerCreateTimerTask+0x8c>)
 8005e48:	f7fe ff9c 	bl	8004d84 <xTaskCreateStatic>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	4a11      	ldr	r2, [pc, #68]	@ (8005e94 <xTimerCreateTimerTask+0x90>)
 8005e50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e52:	4b10      	ldr	r3, [pc, #64]	@ (8005e94 <xTimerCreateTimerTask+0x90>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10b      	bne.n	8005e7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	613b      	str	r3, [r7, #16]
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	e7fd      	b.n	8005e78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e7c:	697b      	ldr	r3, [r7, #20]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	200020bc 	.word	0x200020bc
 8005e8c:	08006e08 	.word	0x08006e08
 8005e90:	08005fb9 	.word	0x08005fb9
 8005e94:	200020c0 	.word	0x200020c0

08005e98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	@ 0x28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10b      	bne.n	8005ec8 <xTimerGenericCommand+0x30>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	623b      	str	r3, [r7, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	bf00      	nop
 8005ec6:	e7fd      	b.n	8005ec4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ec8:	4b19      	ldr	r3, [pc, #100]	@ (8005f30 <xTimerGenericCommand+0x98>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d02a      	beq.n	8005f26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	dc18      	bgt.n	8005f14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ee2:	f7ff fda3 	bl	8005a2c <xTaskGetSchedulerState>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d109      	bne.n	8005f00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005eec:	4b10      	ldr	r3, [pc, #64]	@ (8005f30 <xTimerGenericCommand+0x98>)
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	f107 0110 	add.w	r1, r7, #16
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ef8:	f7fe f8d0 	bl	800409c <xQueueGenericSend>
 8005efc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005efe:	e012      	b.n	8005f26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f00:	4b0b      	ldr	r3, [pc, #44]	@ (8005f30 <xTimerGenericCommand+0x98>)
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	f107 0110 	add.w	r1, r7, #16
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f7fe f8c6 	bl	800409c <xQueueGenericSend>
 8005f10:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f12:	e008      	b.n	8005f26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f14:	4b06      	ldr	r3, [pc, #24]	@ (8005f30 <xTimerGenericCommand+0x98>)
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	f107 0110 	add.w	r1, r7, #16
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	f7fe f9be 	bl	80042a0 <xQueueGenericSendFromISR>
 8005f24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3728      	adds	r7, #40	@ 0x28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	200020bc 	.word	0x200020bc

08005f34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb4 <prvProcessExpiredTimer+0x80>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fd fec5 	bl	8003cdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d123      	bne.n	8005fa2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	18d1      	adds	r1, r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	6978      	ldr	r0, [r7, #20]
 8005f68:	f000 f8cc 	bl	8006104 <prvInsertTimerInActiveList>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d017      	beq.n	8005fa2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f72:	2300      	movs	r3, #0
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	2300      	movs	r3, #0
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	6978      	ldr	r0, [r7, #20]
 8005f7e:	f7ff ff8b 	bl	8005e98 <xTimerGenericCommand>
 8005f82:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	60fb      	str	r3, [r7, #12]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	6978      	ldr	r0, [r7, #20]
 8005fa8:	4798      	blx	r3
}
 8005faa:	bf00      	nop
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	200020b4 	.word	0x200020b4

08005fb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fc0:	f107 0308 	add.w	r3, r7, #8
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 f859 	bl	800607c <prvGetNextExpireTime>
 8005fca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f805 	bl	8005fe0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005fd6:	f000 f8d7 	bl	8006188 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fda:	bf00      	nop
 8005fdc:	e7f0      	b.n	8005fc0 <prvTimerTask+0x8>
	...

08005fe0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fea:	f7ff f925 	bl	8005238 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fee:	f107 0308 	add.w	r3, r7, #8
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f866 	bl	80060c4 <prvSampleTimeNow>
 8005ff8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d130      	bne.n	8006062 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <prvProcessTimerOrBlockTask+0x3c>
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	429a      	cmp	r2, r3
 800600c:	d806      	bhi.n	800601c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800600e:	f7ff f921 	bl	8005254 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff ff8d 	bl	8005f34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800601a:	e024      	b.n	8006066 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d008      	beq.n	8006034 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006022:	4b13      	ldr	r3, [pc, #76]	@ (8006070 <prvProcessTimerOrBlockTask+0x90>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	bf0c      	ite	eq
 800602c:	2301      	moveq	r3, #1
 800602e:	2300      	movne	r3, #0
 8006030:	b2db      	uxtb	r3, r3
 8006032:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006034:	4b0f      	ldr	r3, [pc, #60]	@ (8006074 <prvProcessTimerOrBlockTask+0x94>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	4619      	mov	r1, r3
 8006042:	f7fe fe6b 	bl	8004d1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006046:	f7ff f905 	bl	8005254 <xTaskResumeAll>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006050:	4b09      	ldr	r3, [pc, #36]	@ (8006078 <prvProcessTimerOrBlockTask+0x98>)
 8006052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	f3bf 8f6f 	isb	sy
}
 8006060:	e001      	b.n	8006066 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006062:	f7ff f8f7 	bl	8005254 <xTaskResumeAll>
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	200020b8 	.word	0x200020b8
 8006074:	200020bc 	.word	0x200020bc
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006084:	4b0e      	ldr	r3, [pc, #56]	@ (80060c0 <prvGetNextExpireTime+0x44>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	bf0c      	ite	eq
 800608e:	2301      	moveq	r3, #1
 8006090:	2300      	movne	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d105      	bne.n	80060ae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060a2:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <prvGetNextExpireTime+0x44>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	e001      	b.n	80060b2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060b2:	68fb      	ldr	r3, [r7, #12]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bc80      	pop	{r7}
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	200020b4 	.word	0x200020b4

080060c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060cc:	f7ff f960 	bl	8005390 <xTaskGetTickCount>
 80060d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <prvSampleTimeNow+0x3c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d205      	bcs.n	80060e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060dc:	f000 f910 	bl	8006300 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e002      	b.n	80060ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060ee:	4a04      	ldr	r2, [pc, #16]	@ (8006100 <prvSampleTimeNow+0x3c>)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	200020c4 	.word	0x200020c4

08006104 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	429a      	cmp	r2, r3
 8006128:	d812      	bhi.n	8006150 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006138:	2301      	movs	r3, #1
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e01b      	b.n	8006176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800613e:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <prvInsertTimerInActiveList+0x7c>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f7fd fd8f 	bl	8003c6c <vListInsert>
 800614e:	e012      	b.n	8006176 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d206      	bcs.n	8006166 <prvInsertTimerInActiveList+0x62>
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d302      	bcc.n	8006166 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006160:	2301      	movs	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e007      	b.n	8006176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006166:	4b07      	ldr	r3, [pc, #28]	@ (8006184 <prvInsertTimerInActiveList+0x80>)
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f7fd fd7b 	bl	8003c6c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006176:	697b      	ldr	r3, [r7, #20]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	200020b8 	.word	0x200020b8
 8006184:	200020b4 	.word	0x200020b4

08006188 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08e      	sub	sp, #56	@ 0x38
 800618c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800618e:	e0a5      	b.n	80062dc <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	da19      	bge.n	80061ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006196:	1d3b      	adds	r3, r7, #4
 8006198:	3304      	adds	r3, #4
 800619a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800619c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10b      	bne.n	80061ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	61fb      	str	r3, [r7, #28]
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	e7fd      	b.n	80061b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061c0:	6850      	ldr	r0, [r2, #4]
 80061c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061c4:	6892      	ldr	r2, [r2, #8]
 80061c6:	4611      	mov	r1, r2
 80061c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f2c0 8085 	blt.w	80062dc <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d004      	beq.n	80061e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	3304      	adds	r3, #4
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fd fd7a 	bl	8003cdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061e8:	463b      	mov	r3, r7
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff ff6a 	bl	80060c4 <prvSampleTimeNow>
 80061f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b09      	cmp	r3, #9
 80061f6:	d86c      	bhi.n	80062d2 <prvProcessReceivedCommands+0x14a>
 80061f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006200 <prvProcessReceivedCommands+0x78>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	08006229 	.word	0x08006229
 8006204:	08006229 	.word	0x08006229
 8006208:	08006229 	.word	0x08006229
 800620c:	080062d3 	.word	0x080062d3
 8006210:	08006287 	.word	0x08006287
 8006214:	080062c1 	.word	0x080062c1
 8006218:	08006229 	.word	0x08006229
 800621c:	08006229 	.word	0x08006229
 8006220:	080062d3 	.word	0x080062d3
 8006224:	08006287 	.word	0x08006287
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	18d1      	adds	r1, r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006236:	f7ff ff65 	bl	8006104 <prvInsertTimerInActiveList>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d04a      	beq.n	80062d6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006244:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006246:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d142      	bne.n	80062d6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	441a      	add	r2, r3
 8006258:	2300      	movs	r3, #0
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	2300      	movs	r3, #0
 800625e:	2100      	movs	r1, #0
 8006260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006262:	f7ff fe19 	bl	8005e98 <xTimerGenericCommand>
 8006266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d133      	bne.n	80062d6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	61bb      	str	r3, [r7, #24]
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	e7fd      	b.n	8006282 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800628c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <prvProcessReceivedCommands+0x124>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	617b      	str	r3, [r7, #20]
}
 80062a6:	bf00      	nop
 80062a8:	bf00      	nop
 80062aa:	e7fd      	b.n	80062a8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	18d1      	adds	r1, r2, r3
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ba:	f7ff ff23 	bl	8006104 <prvInsertTimerInActiveList>
					break;
 80062be:	e00d      	b.n	80062dc <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d107      	bne.n	80062da <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80062ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062cc:	f000 fb78 	bl	80069c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062d0:	e003      	b.n	80062da <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80062d2:	bf00      	nop
 80062d4:	e002      	b.n	80062dc <prvProcessReceivedCommands+0x154>
					break;
 80062d6:	bf00      	nop
 80062d8:	e000      	b.n	80062dc <prvProcessReceivedCommands+0x154>
					break;
 80062da:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062dc:	4b07      	ldr	r3, [pc, #28]	@ (80062fc <prvProcessReceivedCommands+0x174>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	1d39      	adds	r1, r7, #4
 80062e2:	2200      	movs	r2, #0
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe f907 	bl	80044f8 <xQueueReceive>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f47f af4f 	bne.w	8006190 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	3730      	adds	r7, #48	@ 0x30
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	200020bc 	.word	0x200020bc

08006300 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006306:	e046      	b.n	8006396 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006308:	4b2c      	ldr	r3, [pc, #176]	@ (80063bc <prvSwitchTimerLists+0xbc>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006312:	4b2a      	ldr	r3, [pc, #168]	@ (80063bc <prvSwitchTimerLists+0xbc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3304      	adds	r3, #4
 8006320:	4618      	mov	r0, r3
 8006322:	f7fd fcdb 	bl	8003cdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d12f      	bne.n	8006396 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4413      	add	r3, r2
 800633e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	429a      	cmp	r2, r3
 8006346:	d90e      	bls.n	8006366 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006354:	4b19      	ldr	r3, [pc, #100]	@ (80063bc <prvSwitchTimerLists+0xbc>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3304      	adds	r3, #4
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f7fd fc84 	bl	8003c6c <vListInsert>
 8006364:	e017      	b.n	8006396 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006366:	2300      	movs	r3, #0
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	2300      	movs	r3, #0
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	2100      	movs	r1, #0
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff fd91 	bl	8005e98 <xTimerGenericCommand>
 8006376:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10b      	bne.n	8006396 <prvSwitchTimerLists+0x96>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	603b      	str	r3, [r7, #0]
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	e7fd      	b.n	8006392 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006396:	4b09      	ldr	r3, [pc, #36]	@ (80063bc <prvSwitchTimerLists+0xbc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1b3      	bne.n	8006308 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063a0:	4b06      	ldr	r3, [pc, #24]	@ (80063bc <prvSwitchTimerLists+0xbc>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063a6:	4b06      	ldr	r3, [pc, #24]	@ (80063c0 <prvSwitchTimerLists+0xc0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a04      	ldr	r2, [pc, #16]	@ (80063bc <prvSwitchTimerLists+0xbc>)
 80063ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063ae:	4a04      	ldr	r2, [pc, #16]	@ (80063c0 <prvSwitchTimerLists+0xc0>)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	6013      	str	r3, [r2, #0]
}
 80063b4:	bf00      	nop
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	200020b4 	.word	0x200020b4
 80063c0:	200020b8 	.word	0x200020b8

080063c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063ca:	f000 f92f 	bl	800662c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063ce:	4b15      	ldr	r3, [pc, #84]	@ (8006424 <prvCheckForValidListAndQueue+0x60>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d120      	bne.n	8006418 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063d6:	4814      	ldr	r0, [pc, #80]	@ (8006428 <prvCheckForValidListAndQueue+0x64>)
 80063d8:	f7fd fbfa 	bl	8003bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063dc:	4813      	ldr	r0, [pc, #76]	@ (800642c <prvCheckForValidListAndQueue+0x68>)
 80063de:	f7fd fbf7 	bl	8003bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063e2:	4b13      	ldr	r3, [pc, #76]	@ (8006430 <prvCheckForValidListAndQueue+0x6c>)
 80063e4:	4a10      	ldr	r2, [pc, #64]	@ (8006428 <prvCheckForValidListAndQueue+0x64>)
 80063e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063e8:	4b12      	ldr	r3, [pc, #72]	@ (8006434 <prvCheckForValidListAndQueue+0x70>)
 80063ea:	4a10      	ldr	r2, [pc, #64]	@ (800642c <prvCheckForValidListAndQueue+0x68>)
 80063ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063ee:	2300      	movs	r3, #0
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4b11      	ldr	r3, [pc, #68]	@ (8006438 <prvCheckForValidListAndQueue+0x74>)
 80063f4:	4a11      	ldr	r2, [pc, #68]	@ (800643c <prvCheckForValidListAndQueue+0x78>)
 80063f6:	2110      	movs	r1, #16
 80063f8:	200a      	movs	r0, #10
 80063fa:	f7fd fd03 	bl	8003e04 <xQueueGenericCreateStatic>
 80063fe:	4603      	mov	r3, r0
 8006400:	4a08      	ldr	r2, [pc, #32]	@ (8006424 <prvCheckForValidListAndQueue+0x60>)
 8006402:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006404:	4b07      	ldr	r3, [pc, #28]	@ (8006424 <prvCheckForValidListAndQueue+0x60>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800640c:	4b05      	ldr	r3, [pc, #20]	@ (8006424 <prvCheckForValidListAndQueue+0x60>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	490b      	ldr	r1, [pc, #44]	@ (8006440 <prvCheckForValidListAndQueue+0x7c>)
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fc30 	bl	8004c78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006418:	f000 f938 	bl	800668c <vPortExitCritical>
}
 800641c:	bf00      	nop
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	200020bc 	.word	0x200020bc
 8006428:	2000208c 	.word	0x2000208c
 800642c:	200020a0 	.word	0x200020a0
 8006430:	200020b4 	.word	0x200020b4
 8006434:	200020b8 	.word	0x200020b8
 8006438:	20002168 	.word	0x20002168
 800643c:	200020c8 	.word	0x200020c8
 8006440:	08006e10 	.word	0x08006e10

08006444 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3b04      	subs	r3, #4
 8006454:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800645c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3b04      	subs	r3, #4
 8006462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f023 0201 	bic.w	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3b04      	subs	r3, #4
 8006472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006474:	4a08      	ldr	r2, [pc, #32]	@ (8006498 <pxPortInitialiseStack+0x54>)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3b14      	subs	r3, #20
 800647e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3b20      	subs	r3, #32
 800648a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800648c:	68fb      	ldr	r3, [r7, #12]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr
 8006498:	0800649d 	.word	0x0800649d

0800649c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064a6:	4b12      	ldr	r3, [pc, #72]	@ (80064f0 <prvTaskExitError+0x54>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d00b      	beq.n	80064c8 <prvTaskExitError+0x2c>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	60fb      	str	r3, [r7, #12]
}
 80064c2:	bf00      	nop
 80064c4:	bf00      	nop
 80064c6:	e7fd      	b.n	80064c4 <prvTaskExitError+0x28>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	60bb      	str	r3, [r7, #8]
}
 80064da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064dc:	bf00      	nop
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0fc      	beq.n	80064de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr
 80064f0:	2000000c 	.word	0x2000000c
	...

08006500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006500:	4b07      	ldr	r3, [pc, #28]	@ (8006520 <pxCurrentTCBConst2>)
 8006502:	6819      	ldr	r1, [r3, #0]
 8006504:	6808      	ldr	r0, [r1, #0]
 8006506:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800650a:	f380 8809 	msr	PSP, r0
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f380 8811 	msr	BASEPRI, r0
 800651a:	f04e 0e0d 	orr.w	lr, lr, #13
 800651e:	4770      	bx	lr

08006520 <pxCurrentTCBConst2>:
 8006520:	20001b8c 	.word	0x20001b8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006528:	4806      	ldr	r0, [pc, #24]	@ (8006544 <prvPortStartFirstTask+0x1c>)
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	6800      	ldr	r0, [r0, #0]
 800652e:	f380 8808 	msr	MSP, r0
 8006532:	b662      	cpsie	i
 8006534:	b661      	cpsie	f
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	df00      	svc	0
 8006540:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006542:	bf00      	nop
 8006544:	e000ed08 	.word	0xe000ed08

08006548 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800654e:	4b32      	ldr	r3, [pc, #200]	@ (8006618 <xPortStartScheduler+0xd0>)
 8006550:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	22ff      	movs	r2, #255	@ 0xff
 800655e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006570:	b2da      	uxtb	r2, r3
 8006572:	4b2a      	ldr	r3, [pc, #168]	@ (800661c <xPortStartScheduler+0xd4>)
 8006574:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006576:	4b2a      	ldr	r3, [pc, #168]	@ (8006620 <xPortStartScheduler+0xd8>)
 8006578:	2207      	movs	r2, #7
 800657a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800657c:	e009      	b.n	8006592 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800657e:	4b28      	ldr	r3, [pc, #160]	@ (8006620 <xPortStartScheduler+0xd8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3b01      	subs	r3, #1
 8006584:	4a26      	ldr	r2, [pc, #152]	@ (8006620 <xPortStartScheduler+0xd8>)
 8006586:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	b2db      	uxtb	r3, r3
 8006590:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800659a:	2b80      	cmp	r3, #128	@ 0x80
 800659c:	d0ef      	beq.n	800657e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800659e:	4b20      	ldr	r3, [pc, #128]	@ (8006620 <xPortStartScheduler+0xd8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f1c3 0307 	rsb	r3, r3, #7
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d00b      	beq.n	80065c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	60bb      	str	r3, [r7, #8]
}
 80065bc:	bf00      	nop
 80065be:	bf00      	nop
 80065c0:	e7fd      	b.n	80065be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065c2:	4b17      	ldr	r3, [pc, #92]	@ (8006620 <xPortStartScheduler+0xd8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	4a15      	ldr	r2, [pc, #84]	@ (8006620 <xPortStartScheduler+0xd8>)
 80065ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065cc:	4b14      	ldr	r3, [pc, #80]	@ (8006620 <xPortStartScheduler+0xd8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065d4:	4a12      	ldr	r2, [pc, #72]	@ (8006620 <xPortStartScheduler+0xd8>)
 80065d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065e0:	4b10      	ldr	r3, [pc, #64]	@ (8006624 <xPortStartScheduler+0xdc>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006624 <xPortStartScheduler+0xdc>)
 80065e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006624 <xPortStartScheduler+0xdc>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006624 <xPortStartScheduler+0xdc>)
 80065f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80065f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065f8:	f000 f8b8 	bl	800676c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006628 <xPortStartScheduler+0xe0>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006602:	f7ff ff91 	bl	8006528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006606:	f7fe ff91 	bl	800552c <vTaskSwitchContext>
	prvTaskExitError();
 800660a:	f7ff ff47 	bl	800649c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	e000e400 	.word	0xe000e400
 800661c:	200021b8 	.word	0x200021b8
 8006620:	200021bc 	.word	0x200021bc
 8006624:	e000ed20 	.word	0xe000ed20
 8006628:	2000000c 	.word	0x2000000c

0800662c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	607b      	str	r3, [r7, #4]
}
 8006644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006646:	4b0f      	ldr	r3, [pc, #60]	@ (8006684 <vPortEnterCritical+0x58>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3301      	adds	r3, #1
 800664c:	4a0d      	ldr	r2, [pc, #52]	@ (8006684 <vPortEnterCritical+0x58>)
 800664e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006650:	4b0c      	ldr	r3, [pc, #48]	@ (8006684 <vPortEnterCritical+0x58>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d110      	bne.n	800667a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006658:	4b0b      	ldr	r3, [pc, #44]	@ (8006688 <vPortEnterCritical+0x5c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00b      	beq.n	800667a <vPortEnterCritical+0x4e>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	603b      	str	r3, [r7, #0]
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	e7fd      	b.n	8006676 <vPortEnterCritical+0x4a>
	}
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr
 8006684:	2000000c 	.word	0x2000000c
 8006688:	e000ed04 	.word	0xe000ed04

0800668c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006692:	4b12      	ldr	r3, [pc, #72]	@ (80066dc <vPortExitCritical+0x50>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10b      	bne.n	80066b2 <vPortExitCritical+0x26>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	607b      	str	r3, [r7, #4]
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	e7fd      	b.n	80066ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066b2:	4b0a      	ldr	r3, [pc, #40]	@ (80066dc <vPortExitCritical+0x50>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	4a08      	ldr	r2, [pc, #32]	@ (80066dc <vPortExitCritical+0x50>)
 80066ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066bc:	4b07      	ldr	r3, [pc, #28]	@ (80066dc <vPortExitCritical+0x50>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <vPortExitCritical+0x44>
 80066c4:	2300      	movs	r3, #0
 80066c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	f383 8811 	msr	BASEPRI, r3
}
 80066ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	2000000c 	.word	0x2000000c

080066e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066e0:	f3ef 8009 	mrs	r0, PSP
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006720 <pxCurrentTCBConst>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066f0:	6010      	str	r0, [r2, #0]
 80066f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80066f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80066fa:	f380 8811 	msr	BASEPRI, r0
 80066fe:	f7fe ff15 	bl	800552c <vTaskSwitchContext>
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8811 	msr	BASEPRI, r0
 800670a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800670e:	6819      	ldr	r1, [r3, #0]
 8006710:	6808      	ldr	r0, [r1, #0]
 8006712:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006716:	f380 8809 	msr	PSP, r0
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	4770      	bx	lr

08006720 <pxCurrentTCBConst>:
 8006720:	20001b8c 	.word	0x20001b8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop

08006728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	607b      	str	r3, [r7, #4]
}
 8006740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006742:	f7fe fe33 	bl	80053ac <xTaskIncrementTick>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800674c:	4b06      	ldr	r3, [pc, #24]	@ (8006768 <SysTick_Handler+0x40>)
 800674e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	2300      	movs	r3, #0
 8006756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f383 8811 	msr	BASEPRI, r3
}
 800675e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006770:	4b0a      	ldr	r3, [pc, #40]	@ (800679c <vPortSetupTimerInterrupt+0x30>)
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006776:	4b0a      	ldr	r3, [pc, #40]	@ (80067a0 <vPortSetupTimerInterrupt+0x34>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800677c:	4b09      	ldr	r3, [pc, #36]	@ (80067a4 <vPortSetupTimerInterrupt+0x38>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a09      	ldr	r2, [pc, #36]	@ (80067a8 <vPortSetupTimerInterrupt+0x3c>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	099b      	lsrs	r3, r3, #6
 8006788:	4a08      	ldr	r2, [pc, #32]	@ (80067ac <vPortSetupTimerInterrupt+0x40>)
 800678a:	3b01      	subs	r3, #1
 800678c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800678e:	4b03      	ldr	r3, [pc, #12]	@ (800679c <vPortSetupTimerInterrupt+0x30>)
 8006790:	2207      	movs	r2, #7
 8006792:	601a      	str	r2, [r3, #0]
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr
 800679c:	e000e010 	.word	0xe000e010
 80067a0:	e000e018 	.word	0xe000e018
 80067a4:	20000000 	.word	0x20000000
 80067a8:	10624dd3 	.word	0x10624dd3
 80067ac:	e000e014 	.word	0xe000e014

080067b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067b6:	f3ef 8305 	mrs	r3, IPSR
 80067ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b0f      	cmp	r3, #15
 80067c0:	d915      	bls.n	80067ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067c2:	4a17      	ldr	r2, [pc, #92]	@ (8006820 <vPortValidateInterruptPriority+0x70>)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067cc:	4b15      	ldr	r3, [pc, #84]	@ (8006824 <vPortValidateInterruptPriority+0x74>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	7afa      	ldrb	r2, [r7, #11]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d20b      	bcs.n	80067ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	607b      	str	r3, [r7, #4]
}
 80067e8:	bf00      	nop
 80067ea:	bf00      	nop
 80067ec:	e7fd      	b.n	80067ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006828 <vPortValidateInterruptPriority+0x78>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067f6:	4b0d      	ldr	r3, [pc, #52]	@ (800682c <vPortValidateInterruptPriority+0x7c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d90b      	bls.n	8006816 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	603b      	str	r3, [r7, #0]
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	e7fd      	b.n	8006812 <vPortValidateInterruptPriority+0x62>
	}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr
 8006820:	e000e3f0 	.word	0xe000e3f0
 8006824:	200021b8 	.word	0x200021b8
 8006828:	e000ed0c 	.word	0xe000ed0c
 800682c:	200021bc 	.word	0x200021bc

08006830 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	@ 0x28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800683c:	f7fe fcfc 	bl	8005238 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006840:	4b5a      	ldr	r3, [pc, #360]	@ (80069ac <pvPortMalloc+0x17c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006848:	f000 f916 	bl	8006a78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800684c:	4b58      	ldr	r3, [pc, #352]	@ (80069b0 <pvPortMalloc+0x180>)
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4013      	ands	r3, r2
 8006854:	2b00      	cmp	r3, #0
 8006856:	f040 8090 	bne.w	800697a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01e      	beq.n	800689e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006860:	2208      	movs	r2, #8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4413      	add	r3, r2
 8006866:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	2b00      	cmp	r3, #0
 8006870:	d015      	beq.n	800689e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f023 0307 	bic.w	r3, r3, #7
 8006878:	3308      	adds	r3, #8
 800687a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00b      	beq.n	800689e <pvPortMalloc+0x6e>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	617b      	str	r3, [r7, #20]
}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	e7fd      	b.n	800689a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d06a      	beq.n	800697a <pvPortMalloc+0x14a>
 80068a4:	4b43      	ldr	r3, [pc, #268]	@ (80069b4 <pvPortMalloc+0x184>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d865      	bhi.n	800697a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068ae:	4b42      	ldr	r3, [pc, #264]	@ (80069b8 <pvPortMalloc+0x188>)
 80068b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068b2:	4b41      	ldr	r3, [pc, #260]	@ (80069b8 <pvPortMalloc+0x188>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068b8:	e004      	b.n	80068c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d903      	bls.n	80068d6 <pvPortMalloc+0xa6>
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f1      	bne.n	80068ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068d6:	4b35      	ldr	r3, [pc, #212]	@ (80069ac <pvPortMalloc+0x17c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068dc:	429a      	cmp	r2, r3
 80068de:	d04c      	beq.n	800697a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2208      	movs	r2, #8
 80068e6:	4413      	add	r3, r2
 80068e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	1ad2      	subs	r2, r2, r3
 80068fa:	2308      	movs	r3, #8
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	429a      	cmp	r2, r3
 8006900:	d920      	bls.n	8006944 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4413      	add	r3, r2
 8006908:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <pvPortMalloc+0xfc>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	613b      	str	r3, [r7, #16]
}
 8006926:	bf00      	nop
 8006928:	bf00      	nop
 800692a:	e7fd      	b.n	8006928 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800693e:	69b8      	ldr	r0, [r7, #24]
 8006940:	f000 f8fc 	bl	8006b3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006944:	4b1b      	ldr	r3, [pc, #108]	@ (80069b4 <pvPortMalloc+0x184>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	4a19      	ldr	r2, [pc, #100]	@ (80069b4 <pvPortMalloc+0x184>)
 8006950:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006952:	4b18      	ldr	r3, [pc, #96]	@ (80069b4 <pvPortMalloc+0x184>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4b19      	ldr	r3, [pc, #100]	@ (80069bc <pvPortMalloc+0x18c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d203      	bcs.n	8006966 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800695e:	4b15      	ldr	r3, [pc, #84]	@ (80069b4 <pvPortMalloc+0x184>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a16      	ldr	r2, [pc, #88]	@ (80069bc <pvPortMalloc+0x18c>)
 8006964:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	4b11      	ldr	r3, [pc, #68]	@ (80069b0 <pvPortMalloc+0x180>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	431a      	orrs	r2, r3
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	2200      	movs	r2, #0
 8006978:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800697a:	f7fe fc6b 	bl	8005254 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <pvPortMalloc+0x170>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	bf00      	nop
 800699e:	e7fd      	b.n	800699c <pvPortMalloc+0x16c>
	return pvReturn;
 80069a0:	69fb      	ldr	r3, [r7, #28]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3728      	adds	r7, #40	@ 0x28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	200041c8 	.word	0x200041c8
 80069b0:	200041d4 	.word	0x200041d4
 80069b4:	200041cc 	.word	0x200041cc
 80069b8:	200041c0 	.word	0x200041c0
 80069bc:	200041d0 	.word	0x200041d0

080069c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d04a      	beq.n	8006a68 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069d2:	2308      	movs	r3, #8
 80069d4:	425b      	negs	r3, r3
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4413      	add	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	4b22      	ldr	r3, [pc, #136]	@ (8006a70 <vPortFree+0xb0>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10b      	bne.n	8006a06 <vPortFree+0x46>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60fb      	str	r3, [r7, #12]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <vPortFree+0x66>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	60bb      	str	r3, [r7, #8]
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	e7fd      	b.n	8006a22 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	4b11      	ldr	r3, [pc, #68]	@ (8006a70 <vPortFree+0xb0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d019      	beq.n	8006a68 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d115      	bne.n	8006a68 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	4b0b      	ldr	r3, [pc, #44]	@ (8006a70 <vPortFree+0xb0>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	43db      	mvns	r3, r3
 8006a46:	401a      	ands	r2, r3
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a4c:	f7fe fbf4 	bl	8005238 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	4b07      	ldr	r3, [pc, #28]	@ (8006a74 <vPortFree+0xb4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4413      	add	r3, r2
 8006a5a:	4a06      	ldr	r2, [pc, #24]	@ (8006a74 <vPortFree+0xb4>)
 8006a5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a5e:	6938      	ldr	r0, [r7, #16]
 8006a60:	f000 f86c 	bl	8006b3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a64:	f7fe fbf6 	bl	8005254 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a68:	bf00      	nop
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	200041d4 	.word	0x200041d4
 8006a74:	200041cc 	.word	0x200041cc

08006a78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a84:	4b27      	ldr	r3, [pc, #156]	@ (8006b24 <prvHeapInit+0xac>)
 8006a86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00c      	beq.n	8006aac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3307      	adds	r3, #7
 8006a96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0307 	bic.w	r3, r3, #7
 8006a9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b24 <prvHeapInit+0xac>)
 8006aa8:	4413      	add	r3, r2
 8006aaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b28 <prvHeapInit+0xb0>)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8006b28 <prvHeapInit+0xb0>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ac4:	2208      	movs	r2, #8
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0307 	bic.w	r3, r3, #7
 8006ad2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4a15      	ldr	r2, [pc, #84]	@ (8006b2c <prvHeapInit+0xb4>)
 8006ad8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ada:	4b14      	ldr	r3, [pc, #80]	@ (8006b2c <prvHeapInit+0xb4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ae2:	4b12      	ldr	r3, [pc, #72]	@ (8006b2c <prvHeapInit+0xb4>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	1ad2      	subs	r2, r2, r3
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006af8:	4b0c      	ldr	r3, [pc, #48]	@ (8006b2c <prvHeapInit+0xb4>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	4a0a      	ldr	r2, [pc, #40]	@ (8006b30 <prvHeapInit+0xb8>)
 8006b06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	4a09      	ldr	r2, [pc, #36]	@ (8006b34 <prvHeapInit+0xbc>)
 8006b0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b10:	4b09      	ldr	r3, [pc, #36]	@ (8006b38 <prvHeapInit+0xc0>)
 8006b12:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006b16:	601a      	str	r2, [r3, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	200021c0 	.word	0x200021c0
 8006b28:	200041c0 	.word	0x200041c0
 8006b2c:	200041c8 	.word	0x200041c8
 8006b30:	200041d0 	.word	0x200041d0
 8006b34:	200041cc 	.word	0x200041cc
 8006b38:	200041d4 	.word	0x200041d4

08006b3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b44:	4b27      	ldr	r3, [pc, #156]	@ (8006be4 <prvInsertBlockIntoFreeList+0xa8>)
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	e002      	b.n	8006b50 <prvInsertBlockIntoFreeList+0x14>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d8f7      	bhi.n	8006b4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	4413      	add	r3, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d108      	bne.n	8006b7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	441a      	add	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	441a      	add	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d118      	bne.n	8006bc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	4b14      	ldr	r3, [pc, #80]	@ (8006be8 <prvInsertBlockIntoFreeList+0xac>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d00d      	beq.n	8006bba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	441a      	add	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	e008      	b.n	8006bcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bba:	4b0b      	ldr	r3, [pc, #44]	@ (8006be8 <prvInsertBlockIntoFreeList+0xac>)
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e003      	b.n	8006bcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d002      	beq.n	8006bda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bda:	bf00      	nop
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr
 8006be4:	200041c0 	.word	0x200041c0
 8006be8:	200041c8 	.word	0x200041c8

08006bec <memset>:
 8006bec:	4603      	mov	r3, r0
 8006bee:	4402      	add	r2, r0
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d100      	bne.n	8006bf6 <memset+0xa>
 8006bf4:	4770      	bx	lr
 8006bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfa:	e7f9      	b.n	8006bf0 <memset+0x4>

08006bfc <_reclaim_reent>:
 8006bfc:	4b29      	ldr	r3, [pc, #164]	@ (8006ca4 <_reclaim_reent+0xa8>)
 8006bfe:	b570      	push	{r4, r5, r6, lr}
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4604      	mov	r4, r0
 8006c04:	4283      	cmp	r3, r0
 8006c06:	d04b      	beq.n	8006ca0 <_reclaim_reent+0xa4>
 8006c08:	69c3      	ldr	r3, [r0, #28]
 8006c0a:	b1ab      	cbz	r3, 8006c38 <_reclaim_reent+0x3c>
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	b16b      	cbz	r3, 8006c2c <_reclaim_reent+0x30>
 8006c10:	2500      	movs	r5, #0
 8006c12:	69e3      	ldr	r3, [r4, #28]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	5959      	ldr	r1, [r3, r5]
 8006c18:	2900      	cmp	r1, #0
 8006c1a:	d13b      	bne.n	8006c94 <_reclaim_reent+0x98>
 8006c1c:	3504      	adds	r5, #4
 8006c1e:	2d80      	cmp	r5, #128	@ 0x80
 8006c20:	d1f7      	bne.n	8006c12 <_reclaim_reent+0x16>
 8006c22:	69e3      	ldr	r3, [r4, #28]
 8006c24:	4620      	mov	r0, r4
 8006c26:	68d9      	ldr	r1, [r3, #12]
 8006c28:	f000 f872 	bl	8006d10 <_free_r>
 8006c2c:	69e3      	ldr	r3, [r4, #28]
 8006c2e:	6819      	ldr	r1, [r3, #0]
 8006c30:	b111      	cbz	r1, 8006c38 <_reclaim_reent+0x3c>
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 f86c 	bl	8006d10 <_free_r>
 8006c38:	6961      	ldr	r1, [r4, #20]
 8006c3a:	b111      	cbz	r1, 8006c42 <_reclaim_reent+0x46>
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 f867 	bl	8006d10 <_free_r>
 8006c42:	69e1      	ldr	r1, [r4, #28]
 8006c44:	b111      	cbz	r1, 8006c4c <_reclaim_reent+0x50>
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 f862 	bl	8006d10 <_free_r>
 8006c4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006c4e:	b111      	cbz	r1, 8006c56 <_reclaim_reent+0x5a>
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 f85d 	bl	8006d10 <_free_r>
 8006c56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c58:	b111      	cbz	r1, 8006c60 <_reclaim_reent+0x64>
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 f858 	bl	8006d10 <_free_r>
 8006c60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006c62:	b111      	cbz	r1, 8006c6a <_reclaim_reent+0x6e>
 8006c64:	4620      	mov	r0, r4
 8006c66:	f000 f853 	bl	8006d10 <_free_r>
 8006c6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006c6c:	b111      	cbz	r1, 8006c74 <_reclaim_reent+0x78>
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 f84e 	bl	8006d10 <_free_r>
 8006c74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006c76:	b111      	cbz	r1, 8006c7e <_reclaim_reent+0x82>
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 f849 	bl	8006d10 <_free_r>
 8006c7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006c80:	b111      	cbz	r1, 8006c88 <_reclaim_reent+0x8c>
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 f844 	bl	8006d10 <_free_r>
 8006c88:	6a23      	ldr	r3, [r4, #32]
 8006c8a:	b14b      	cbz	r3, 8006ca0 <_reclaim_reent+0xa4>
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c92:	4718      	bx	r3
 8006c94:	680e      	ldr	r6, [r1, #0]
 8006c96:	4620      	mov	r0, r4
 8006c98:	f000 f83a 	bl	8006d10 <_free_r>
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	e7bb      	b.n	8006c18 <_reclaim_reent+0x1c>
 8006ca0:	bd70      	pop	{r4, r5, r6, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20000010 	.word	0x20000010

08006ca8 <__libc_init_array>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	2600      	movs	r6, #0
 8006cac:	4d0c      	ldr	r5, [pc, #48]	@ (8006ce0 <__libc_init_array+0x38>)
 8006cae:	4c0d      	ldr	r4, [pc, #52]	@ (8006ce4 <__libc_init_array+0x3c>)
 8006cb0:	1b64      	subs	r4, r4, r5
 8006cb2:	10a4      	asrs	r4, r4, #2
 8006cb4:	42a6      	cmp	r6, r4
 8006cb6:	d109      	bne.n	8006ccc <__libc_init_array+0x24>
 8006cb8:	f000 f87e 	bl	8006db8 <_init>
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	4d0a      	ldr	r5, [pc, #40]	@ (8006ce8 <__libc_init_array+0x40>)
 8006cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8006cec <__libc_init_array+0x44>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	42a6      	cmp	r6, r4
 8006cc8:	d105      	bne.n	8006cd6 <__libc_init_array+0x2e>
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd0:	4798      	blx	r3
 8006cd2:	3601      	adds	r6, #1
 8006cd4:	e7ee      	b.n	8006cb4 <__libc_init_array+0xc>
 8006cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cda:	4798      	blx	r3
 8006cdc:	3601      	adds	r6, #1
 8006cde:	e7f2      	b.n	8006cc6 <__libc_init_array+0x1e>
 8006ce0:	0800709c 	.word	0x0800709c
 8006ce4:	0800709c 	.word	0x0800709c
 8006ce8:	0800709c 	.word	0x0800709c
 8006cec:	080070a0 	.word	0x080070a0

08006cf0 <__retarget_lock_acquire_recursive>:
 8006cf0:	4770      	bx	lr

08006cf2 <__retarget_lock_release_recursive>:
 8006cf2:	4770      	bx	lr

08006cf4 <memcpy>:
 8006cf4:	440a      	add	r2, r1
 8006cf6:	4291      	cmp	r1, r2
 8006cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cfc:	d100      	bne.n	8006d00 <memcpy+0xc>
 8006cfe:	4770      	bx	lr
 8006d00:	b510      	push	{r4, lr}
 8006d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d06:	4291      	cmp	r1, r2
 8006d08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d0c:	d1f9      	bne.n	8006d02 <memcpy+0xe>
 8006d0e:	bd10      	pop	{r4, pc}

08006d10 <_free_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4605      	mov	r5, r0
 8006d14:	2900      	cmp	r1, #0
 8006d16:	d040      	beq.n	8006d9a <_free_r+0x8a>
 8006d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d1c:	1f0c      	subs	r4, r1, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bfb8      	it	lt
 8006d22:	18e4      	addlt	r4, r4, r3
 8006d24:	f000 f83c 	bl	8006da0 <__malloc_lock>
 8006d28:	4a1c      	ldr	r2, [pc, #112]	@ (8006d9c <_free_r+0x8c>)
 8006d2a:	6813      	ldr	r3, [r2, #0]
 8006d2c:	b933      	cbnz	r3, 8006d3c <_free_r+0x2c>
 8006d2e:	6063      	str	r3, [r4, #4]
 8006d30:	6014      	str	r4, [r2, #0]
 8006d32:	4628      	mov	r0, r5
 8006d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d38:	f000 b838 	b.w	8006dac <__malloc_unlock>
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	d908      	bls.n	8006d52 <_free_r+0x42>
 8006d40:	6820      	ldr	r0, [r4, #0]
 8006d42:	1821      	adds	r1, r4, r0
 8006d44:	428b      	cmp	r3, r1
 8006d46:	bf01      	itttt	eq
 8006d48:	6819      	ldreq	r1, [r3, #0]
 8006d4a:	685b      	ldreq	r3, [r3, #4]
 8006d4c:	1809      	addeq	r1, r1, r0
 8006d4e:	6021      	streq	r1, [r4, #0]
 8006d50:	e7ed      	b.n	8006d2e <_free_r+0x1e>
 8006d52:	461a      	mov	r2, r3
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	b10b      	cbz	r3, 8006d5c <_free_r+0x4c>
 8006d58:	42a3      	cmp	r3, r4
 8006d5a:	d9fa      	bls.n	8006d52 <_free_r+0x42>
 8006d5c:	6811      	ldr	r1, [r2, #0]
 8006d5e:	1850      	adds	r0, r2, r1
 8006d60:	42a0      	cmp	r0, r4
 8006d62:	d10b      	bne.n	8006d7c <_free_r+0x6c>
 8006d64:	6820      	ldr	r0, [r4, #0]
 8006d66:	4401      	add	r1, r0
 8006d68:	1850      	adds	r0, r2, r1
 8006d6a:	4283      	cmp	r3, r0
 8006d6c:	6011      	str	r1, [r2, #0]
 8006d6e:	d1e0      	bne.n	8006d32 <_free_r+0x22>
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4408      	add	r0, r1
 8006d76:	6010      	str	r0, [r2, #0]
 8006d78:	6053      	str	r3, [r2, #4]
 8006d7a:	e7da      	b.n	8006d32 <_free_r+0x22>
 8006d7c:	d902      	bls.n	8006d84 <_free_r+0x74>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	e7d6      	b.n	8006d32 <_free_r+0x22>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	1821      	adds	r1, r4, r0
 8006d88:	428b      	cmp	r3, r1
 8006d8a:	bf01      	itttt	eq
 8006d8c:	6819      	ldreq	r1, [r3, #0]
 8006d8e:	685b      	ldreq	r3, [r3, #4]
 8006d90:	1809      	addeq	r1, r1, r0
 8006d92:	6021      	streq	r1, [r4, #0]
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	6054      	str	r4, [r2, #4]
 8006d98:	e7cb      	b.n	8006d32 <_free_r+0x22>
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	20004314 	.word	0x20004314

08006da0 <__malloc_lock>:
 8006da0:	4801      	ldr	r0, [pc, #4]	@ (8006da8 <__malloc_lock+0x8>)
 8006da2:	f7ff bfa5 	b.w	8006cf0 <__retarget_lock_acquire_recursive>
 8006da6:	bf00      	nop
 8006da8:	20004310 	.word	0x20004310

08006dac <__malloc_unlock>:
 8006dac:	4801      	ldr	r0, [pc, #4]	@ (8006db4 <__malloc_unlock+0x8>)
 8006dae:	f7ff bfa0 	b.w	8006cf2 <__retarget_lock_release_recursive>
 8006db2:	bf00      	nop
 8006db4:	20004310 	.word	0x20004310

08006db8 <_init>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr

08006dc4 <_fini>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	bf00      	nop
 8006dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dca:	bc08      	pop	{r3}
 8006dcc:	469e      	mov	lr, r3
 8006dce:	4770      	bx	lr
